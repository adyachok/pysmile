# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pysmile_impl', [dirname(__file__)])
        except ImportError:
            import _pysmile_impl
            return _pysmile_impl
        if fp is not None:
            try:
                _mod = imp.load_module('_pysmile_impl', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pysmile_impl = swig_import_helper()
    del swig_import_helper
else:
    import _pysmile_impl
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysmile_impl.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pysmile_impl.SwigPyIterator_value(self)
    def incr(self, n = 1): return _pysmile_impl.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _pysmile_impl.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pysmile_impl.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pysmile_impl.SwigPyIterator_equal(self, *args)
    def copy(self): return _pysmile_impl.SwigPyIterator_copy(self)
    def next(self): return _pysmile_impl.SwigPyIterator_next(self)
    def __next__(self): return _pysmile_impl.SwigPyIterator___next__(self)
    def previous(self): return _pysmile_impl.SwigPyIterator_previous(self)
    def advance(self, *args): return _pysmile_impl.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pysmile_impl.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pysmile_impl.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pysmile_impl.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pysmile_impl.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pysmile_impl.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pysmile_impl.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pysmile_impl.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _pysmile_impl.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _pysmile_impl.intArray___setitem__(self, *args)
    def cast(self): return _pysmile_impl.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pysmile_impl.intArray_frompointer
    if _newclass:frompointer = staticmethod(_pysmile_impl.intArray_frompointer)
intArray_swigregister = _pysmile_impl.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _pysmile_impl.intArray_frompointer(*args)
intArray_frompointer = _pysmile_impl.intArray_frompointer

class intPointer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intPointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intPointer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_intPointer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_intPointer
    __del__ = lambda self : None;
    def assign(self, *args): return _pysmile_impl.intPointer_assign(self, *args)
    def value(self): return _pysmile_impl.intPointer_value(self)
    def cast(self): return _pysmile_impl.intPointer_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pysmile_impl.intPointer_frompointer
    if _newclass:frompointer = staticmethod(_pysmile_impl.intPointer_frompointer)
intPointer_swigregister = _pysmile_impl.intPointer_swigregister
intPointer_swigregister(intPointer)

def intPointer_frompointer(*args):
  return _pysmile_impl.intPointer_frompointer(*args)
intPointer_frompointer = _pysmile_impl.intPointer_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _pysmile_impl.doubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _pysmile_impl.doubleArray___setitem__(self, *args)
    def cast(self): return _pysmile_impl.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pysmile_impl.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_pysmile_impl.doubleArray_frompointer)
doubleArray_swigregister = _pysmile_impl.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args):
  return _pysmile_impl.doubleArray_frompointer(*args)
doubleArray_frompointer = _pysmile_impl.doubleArray_frompointer

class doublePointer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doublePointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doublePointer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_doublePointer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_doublePointer
    __del__ = lambda self : None;
    def assign(self, *args): return _pysmile_impl.doublePointer_assign(self, *args)
    def value(self): return _pysmile_impl.doublePointer_value(self)
    def cast(self): return _pysmile_impl.doublePointer_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pysmile_impl.doublePointer_frompointer
    if _newclass:frompointer = staticmethod(_pysmile_impl.doublePointer_frompointer)
doublePointer_swigregister = _pysmile_impl.doublePointer_swigregister
doublePointer_swigregister(doublePointer)

def doublePointer_frompointer(*args):
  return _pysmile_impl.doublePointer_frompointer(*args)
doublePointer_frompointer = _pysmile_impl.doublePointer_frompointer

DSL_OBJECT_READY = _pysmile_impl.DSL_OBJECT_READY
DSL_OBJECT_CONSISTENT = _pysmile_impl.DSL_OBJECT_CONSISTENT
DSL_DEFAULT_OBJECT_FLAGS = _pysmile_impl.DSL_DEFAULT_OBJECT_FLAGS
class DSL_object(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_object, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_object_CleanUp(self, deep)
    def CheckReadiness(self, deep = 0): return _pysmile_impl.DSL_object_CheckReadiness(self, deep)
    def CheckConsistency(self, deep = 1): return _pysmile_impl.DSL_object_CheckConsistency(self, deep)
    def ObjectReady(self): return _pysmile_impl.DSL_object_ObjectReady(self)
    def ObjectConsistent(self): return _pysmile_impl.DSL_object_ObjectConsistent(self)
DSL_object_swigregister = _pysmile_impl.DSL_object_swigregister
DSL_object_swigregister(DSL_object)

DSL_DECISION = _pysmile_impl.DSL_DECISION
DSL_CHANCE = _pysmile_impl.DSL_CHANCE
DSL_DETERMINISTIC = _pysmile_impl.DSL_DETERMINISTIC
DSL_UTILITY = _pysmile_impl.DSL_UTILITY
DSL_DISCRETE = _pysmile_impl.DSL_DISCRETE
DSL_CASTLOGIC = _pysmile_impl.DSL_CASTLOGIC
DSL_DEMORGANLOGIC = _pysmile_impl.DSL_DEMORGANLOGIC
DSL_NOISYMAXLOGIC = _pysmile_impl.DSL_NOISYMAXLOGIC
DSL_NOISYADDERLOGIC = _pysmile_impl.DSL_NOISYADDERLOGIC
DSL_PARENTSCONTIN = _pysmile_impl.DSL_PARENTSCONTIN
DSL_SCC = _pysmile_impl.DSL_SCC
DSL_DCHILDHPARENT = _pysmile_impl.DSL_DCHILDHPARENT
DSL_CONTINUOUS = _pysmile_impl.DSL_CONTINUOUS
DSL_TRUTHTABLE = _pysmile_impl.DSL_TRUTHTABLE
DSL_CPT = _pysmile_impl.DSL_CPT
DSL_NOISY_MAX = _pysmile_impl.DSL_NOISY_MAX
DSL_NOISY_ADDER = _pysmile_impl.DSL_NOISY_ADDER
DSL_CAST = _pysmile_impl.DSL_CAST
DSL_DEMORGAN = _pysmile_impl.DSL_DEMORGAN
DSL_LIST = _pysmile_impl.DSL_LIST
DSL_TABLE = _pysmile_impl.DSL_TABLE
DSL_MAU = _pysmile_impl.DSL_MAU
DSL_EQUATION = _pysmile_impl.DSL_EQUATION
DSL_EQUATION_SCC = _pysmile_impl.DSL_EQUATION_SCC
DSL_DCHILD_HPARENT = _pysmile_impl.DSL_DCHILD_HPARENT
DSL_DISTRIBUTION = _pysmile_impl.DSL_DISTRIBUTION
DSL_HEQUATION = _pysmile_impl.DSL_HEQUATION
DSL_NO_DEFINITION = _pysmile_impl.DSL_NO_DEFINITION
class DSL_nodeDefinition(DSL_object):
    __swig_setmethods__ = {}
    for _s in [DSL_object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_nodeDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_nodeDefinition, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysmile_impl.delete_DSL_nodeDefinition
    __del__ = lambda self : None;
    def Network(self): return _pysmile_impl.DSL_nodeDefinition_Network(self)
    def SetNetwork(self, *args): return _pysmile_impl.DSL_nodeDefinition_SetNetwork(self, *args)
    def SetNetworkAndHandle(self, *args): return _pysmile_impl.DSL_nodeDefinition_SetNetworkAndHandle(self, *args)
    def Handle(self): return _pysmile_impl.DSL_nodeDefinition_Handle(self)
    def CopyParameters(self, *args): return _pysmile_impl.DSL_nodeDefinition_CopyParameters(self, *args)
    def GetType(self): return _pysmile_impl.DSL_nodeDefinition_GetType(self)
    def GetTypeName(self): return _pysmile_impl.DSL_nodeDefinition_GetTypeName(self)
    def NodeTypeIs(self, *args): return _pysmile_impl.DSL_nodeDefinition_NodeTypeIs(self, *args)
    def AddParent(self, *args): return _pysmile_impl.DSL_nodeDefinition_AddParent(self, *args)
    def RemoveParent(self, *args): return _pysmile_impl.DSL_nodeDefinition_RemoveParent(self, *args)
    def AbsorbEvidenceFromParent(self, *args): return _pysmile_impl.DSL_nodeDefinition_AbsorbEvidenceFromParent(self, *args)
    def MarginalizeParent(self, *args): return _pysmile_impl.DSL_nodeDefinition_MarginalizeParent(self, *args)
    def DaddyGetsBigger(self, *args): return _pysmile_impl.DSL_nodeDefinition_DaddyGetsBigger(self, *args)
    def DaddyGetsSmaller(self, *args): return _pysmile_impl.DSL_nodeDefinition_DaddyGetsSmaller(self, *args)
    def DaddyChangedOrderOfOutcomes(self, *args): return _pysmile_impl.DSL_nodeDefinition_DaddyChangedOrderOfOutcomes(self, *args)
    def OrderOfParentsGetsChanged(self, *args): return _pysmile_impl.DSL_nodeDefinition_OrderOfParentsGetsChanged(self, *args)
    def ParentIdChanged(self, *args): return _pysmile_impl.DSL_nodeDefinition_ParentIdChanged(self, *args)
    def BeforeDirectChange(self, changeType = 0): return _pysmile_impl.DSL_nodeDefinition_BeforeDirectChange(self, changeType)
    def AfterDirectChange(self, changeType = 0): return _pysmile_impl.DSL_nodeDefinition_AfterDirectChange(self, changeType)
    def GetSize(self): return _pysmile_impl.DSL_nodeDefinition_GetSize(self)
    def CheckReadiness(self, deep = 0): return _pysmile_impl.DSL_nodeDefinition_CheckReadiness(self, deep)
    def ReCreateFromNetworkStructure(self): return _pysmile_impl.DSL_nodeDefinition_ReCreateFromNetworkStructure(self)
    def Clone(self, *args): return _pysmile_impl.DSL_nodeDefinition_Clone(self, *args)
    def CheckParentsStructure(self): return _pysmile_impl.DSL_nodeDefinition_CheckParentsStructure(self)
    def IsParentNecessary(self, *args): return _pysmile_impl.DSL_nodeDefinition_IsParentNecessary(self, *args)
    def AddOutcome(self, *args): return _pysmile_impl.DSL_nodeDefinition_AddOutcome(self, *args)
    def InsertOutcome(self, *args): return _pysmile_impl.DSL_nodeDefinition_InsertOutcome(self, *args)
    def RemoveOutcome(self, *args): return _pysmile_impl.DSL_nodeDefinition_RemoveOutcome(self, *args)
    def GetNumberOfOutcomes(self): return _pysmile_impl.DSL_nodeDefinition_GetNumberOfOutcomes(self)
    def RenameOutcome(self, *args): return _pysmile_impl.DSL_nodeDefinition_RenameOutcome(self, *args)
    def RenameOutcomes(self, *args): return _pysmile_impl.DSL_nodeDefinition_RenameOutcomes(self, *args)
    def GetOutcomesNames(self): return _pysmile_impl.DSL_nodeDefinition_GetOutcomesNames(self)
    def SetNumberOfOutcomes(self, *args): return _pysmile_impl.DSL_nodeDefinition_SetNumberOfOutcomes(self, *args)
    def ChangeOrderOfOutcomes(self, *args): return _pysmile_impl.DSL_nodeDefinition_ChangeOrderOfOutcomes(self, *args)
    def ChangeOrderOfOutcomesWithAddAndRemove(self, *args): return _pysmile_impl.DSL_nodeDefinition_ChangeOrderOfOutcomesWithAddAndRemove(self, *args)
    def MakeUniform(self): return _pysmile_impl.DSL_nodeDefinition_MakeUniform(self)
    def GetDefinition(self, *args): return _pysmile_impl.DSL_nodeDefinition_GetDefinition(self, *args)
    def SetDefinition(self, *args): return _pysmile_impl.DSL_nodeDefinition_SetDefinition(self, *args)
    def GetTemporalDefinition(self, *args): return _pysmile_impl.DSL_nodeDefinition_GetTemporalDefinition(self, *args)
    def SetTemporalDefinition(self, *args): return _pysmile_impl.DSL_nodeDefinition_SetTemporalDefinition(self, *args)
    def GetMatrix(self): return _pysmile_impl.DSL_nodeDefinition_GetMatrix(self)
DSL_nodeDefinition_swigregister = _pysmile_impl.DSL_nodeDefinition_swigregister
DSL_nodeDefinition_swigregister(DSL_nodeDefinition)

DSL_NOVALUE = _pysmile_impl.DSL_NOVALUE
DSL_BELIEFVECTOR = _pysmile_impl.DSL_BELIEFVECTOR
DSL_EXPECTEDUTILITY = _pysmile_impl.DSL_EXPECTEDUTILITY
DSL_LISTOFDECISIONS = _pysmile_impl.DSL_LISTOFDECISIONS
DSL_MAUEXPECTEDUTILITY = _pysmile_impl.DSL_MAUEXPECTEDUTILITY
DSL_EQUATIONEVALUATION = _pysmile_impl.DSL_EQUATIONEVALUATION
DSL_CONTINUOUSVAL = _pysmile_impl.DSL_CONTINUOUSVAL
DSL_VALUE_EVIDENCE = _pysmile_impl.DSL_VALUE_EVIDENCE
DSL_VALUE_VALID = _pysmile_impl.DSL_VALUE_VALID
DSL_VALUE_EVIDENCE_PROPAGATED = _pysmile_impl.DSL_VALUE_EVIDENCE_PROPAGATED
DSL_VALUE_CONTROLLED = _pysmile_impl.DSL_VALUE_CONTROLLED
DSL_VALUE_SOFT_EVIDENCE = _pysmile_impl.DSL_VALUE_SOFT_EVIDENCE
DSL_VALUE_DEFAULT_FLAGS = _pysmile_impl.DSL_VALUE_DEFAULT_FLAGS
class DSL_nodeValue(DSL_object):
    __swig_setmethods__ = {}
    for _s in [DSL_object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_nodeValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_nodeValue, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysmile_impl.delete_DSL_nodeValue
    __del__ = lambda self : None;
    def Network(self): return _pysmile_impl.DSL_nodeValue_Network(self)
    def SetNetwork(self, *args): return _pysmile_impl.DSL_nodeValue_SetNetwork(self, *args)
    def SetNetworkAndHandle(self, *args): return _pysmile_impl.DSL_nodeValue_SetNetworkAndHandle(self, *args)
    def Handle(self): return _pysmile_impl.DSL_nodeValue_Handle(self)
    def Clone(self, *args): return _pysmile_impl.DSL_nodeValue_Clone(self, *args)
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_nodeValue_CleanUp(self, deep)
    def ReCreateFromNetworkStructure(self): return _pysmile_impl.DSL_nodeValue_ReCreateFromNetworkStructure(self)
    def GetType(self): return _pysmile_impl.DSL_nodeValue_GetType(self)
    def GetSize(self): return _pysmile_impl.DSL_nodeValue_GetSize(self)
    def GetIndexingParents(self): return _pysmile_impl.DSL_nodeValue_GetIndexingParents(self)
    def AddIndexingParent(self, *args): return _pysmile_impl.DSL_nodeValue_AddIndexingParent(self, *args)
    def SetFlag(self, *args): return _pysmile_impl.DSL_nodeValue_SetFlag(self, *args)
    def ClearFlag(self, *args): return _pysmile_impl.DSL_nodeValue_ClearFlag(self, *args)
    def GetAllFlags(self): return _pysmile_impl.DSL_nodeValue_GetAllFlags(self)
    def IsFlagSet(self, *args): return _pysmile_impl.DSL_nodeValue_IsFlagSet(self, *args)
    def IsValueValid(self): return _pysmile_impl.DSL_nodeValue_IsValueValid(self)
    def SetValueValid(self): return _pysmile_impl.DSL_nodeValue_SetValueValid(self)
    def SetValueInvalid(self): return _pysmile_impl.DSL_nodeValue_SetValueInvalid(self)
    def GetEvidence(self, *args): return _pysmile_impl.DSL_nodeValue_GetEvidence(self, *args)
    def SetEvidence(self, *args): return _pysmile_impl.DSL_nodeValue_SetEvidence(self, *args)
    def ClearEvidence(self): return _pysmile_impl.DSL_nodeValue_ClearEvidence(self)
    def ClearPropagatedEvidence(self): return _pysmile_impl.DSL_nodeValue_ClearPropagatedEvidence(self)
    def SetPropagatedEvidence(self, *args): return _pysmile_impl.DSL_nodeValue_SetPropagatedEvidence(self, *args)
    def GetVirtualEvidence(self, *args): return _pysmile_impl.DSL_nodeValue_GetVirtualEvidence(self, *args)
    def SetVirtualEvidence(self, *args): return _pysmile_impl.DSL_nodeValue_SetVirtualEvidence(self, *args)
    def IsEvidence(self): return _pysmile_impl.DSL_nodeValue_IsEvidence(self)
    def IsRealEvidence(self): return _pysmile_impl.DSL_nodeValue_IsRealEvidence(self)
    def IsPropagatedEvidence(self): return _pysmile_impl.DSL_nodeValue_IsPropagatedEvidence(self)
    def IsVirtualEvidence(self): return _pysmile_impl.DSL_nodeValue_IsVirtualEvidence(self)
    def GetValue(self, *args): return _pysmile_impl.DSL_nodeValue_GetValue(self, *args)
    def SetValue(self, *args): return _pysmile_impl.DSL_nodeValue_SetValue(self, *args)
    def GetMatrix(self): return _pysmile_impl.DSL_nodeValue_GetMatrix(self)
    def HasTemporalEvidence(self): return _pysmile_impl.DSL_nodeValue_HasTemporalEvidence(self)
    def IsTemporalEvidence(self, *args): return _pysmile_impl.DSL_nodeValue_IsTemporalEvidence(self, *args)
    def GetTemporalEvidence(self, *args): return _pysmile_impl.DSL_nodeValue_GetTemporalEvidence(self, *args)
    def SetTemporalEvidence(self, *args): return _pysmile_impl.DSL_nodeValue_SetTemporalEvidence(self, *args)
    def ClearTemporalEvidence(self, *args): return _pysmile_impl.DSL_nodeValue_ClearTemporalEvidence(self, *args)
DSL_nodeValue_swigregister = _pysmile_impl.DSL_nodeValue_swigregister
DSL_nodeValue_swigregister(DSL_nodeValue)

DSL_CI_EXPANDED_CPT = _pysmile_impl.DSL_CI_EXPANDED_CPT
DSL_CI_KEEP_IN_SYNC = _pysmile_impl.DSL_CI_KEEP_IN_SYNC
DSL_CI_DEFAULT_FLAGS = _pysmile_impl.DSL_CI_DEFAULT_FLAGS
DSL_NOISYMAX_MIN_STATES = _pysmile_impl.DSL_NOISYMAX_MIN_STATES
class DSL_ciDefinition(DSL_nodeDefinition):
    __swig_setmethods__ = {}
    for _s in [DSL_nodeDefinition]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_ciDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_nodeDefinition]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_ciDefinition, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysmile_impl.delete_DSL_ciDefinition
    __del__ = lambda self : None;
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_ciDefinition_CleanUp(self, deep)
    def CheckReadiness(self, deep = 0): return _pysmile_impl.DSL_ciDefinition_CheckReadiness(self, deep)
    def CheckConsistency(self, deep = 0): return _pysmile_impl.DSL_ciDefinition_CheckConsistency(self, deep)
    def CheckParentsStructure(self): return _pysmile_impl.DSL_ciDefinition_CheckParentsStructure(self)
    def IsExpanded(self): return _pysmile_impl.DSL_ciDefinition_IsExpanded(self)
    def KeepSynchronized(self): return _pysmile_impl.DSL_ciDefinition_KeepSynchronized(self)
    def SetKeepSynchronized(self): return _pysmile_impl.DSL_ciDefinition_SetKeepSynchronized(self)
    def SetDontKeepSynchronized(self): return _pysmile_impl.DSL_ciDefinition_SetDontKeepSynchronized(self)
    def CiToCpt(self): return _pysmile_impl.DSL_ciDefinition_CiToCpt(self)
    def CptToCi(self): return _pysmile_impl.DSL_ciDefinition_CptToCi(self)
    def GetCpt(self): return _pysmile_impl.DSL_ciDefinition_GetCpt(self)
    def GetCiWeights(self): return _pysmile_impl.DSL_ciDefinition_GetCiWeights(self)
    def GetTemporalCiWeights(self, *args): return _pysmile_impl.DSL_ciDefinition_GetTemporalCiWeights(self, *args)
    def SetTemporalCiWeights(self, *args): return _pysmile_impl.DSL_ciDefinition_SetTemporalCiWeights(self, *args)
    def GetCiFlags(self): return _pysmile_impl.DSL_ciDefinition_GetCiFlags(self)
    def AddParent(self, *args): return _pysmile_impl.DSL_ciDefinition_AddParent(self, *args)
    def RemoveParent(self, *args): return _pysmile_impl.DSL_ciDefinition_RemoveParent(self, *args)
    def DaddyGetsBigger(self, *args): return _pysmile_impl.DSL_ciDefinition_DaddyGetsBigger(self, *args)
    def DaddyGetsSmaller(self, *args): return _pysmile_impl.DSL_ciDefinition_DaddyGetsSmaller(self, *args)
    def AddOutcome(self, *args): return _pysmile_impl.DSL_ciDefinition_AddOutcome(self, *args)
    def InsertOutcome(self, *args): return _pysmile_impl.DSL_ciDefinition_InsertOutcome(self, *args)
    def RemoveOutcome(self, *args): return _pysmile_impl.DSL_ciDefinition_RemoveOutcome(self, *args)
    def GetNumberOfOutcomes(self): return _pysmile_impl.DSL_ciDefinition_GetNumberOfOutcomes(self)
    def RenameOutcome(self, *args): return _pysmile_impl.DSL_ciDefinition_RenameOutcome(self, *args)
    def RenameOutcomes(self, *args): return _pysmile_impl.DSL_ciDefinition_RenameOutcomes(self, *args)
    def GetOutcomesNames(self): return _pysmile_impl.DSL_ciDefinition_GetOutcomesNames(self)
    def SetNumberOfOutcomes(self, *args): return _pysmile_impl.DSL_ciDefinition_SetNumberOfOutcomes(self, *args)
    def GetSize(self): return _pysmile_impl.DSL_ciDefinition_GetSize(self)
    def GetDefinition(self, *args): return _pysmile_impl.DSL_ciDefinition_GetDefinition(self, *args)
DSL_ciDefinition_swigregister = _pysmile_impl.DSL_ciDefinition_swigregister
DSL_ciDefinition_swigregister(DSL_ciDefinition)

class DSL_intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_intArray
    __del__ = lambda self : None;
    def Swap(self, *args): return _pysmile_impl.DSL_intArray_Swap(self, *args)
    def __eq__(self, *args): return _pysmile_impl.DSL_intArray___eq__(self, *args)
    def __lt__(self, *args): return _pysmile_impl.DSL_intArray___lt__(self, *args)
    def GetSize(self): return _pysmile_impl.DSL_intArray_GetSize(self)
    def NumItems(self): return _pysmile_impl.DSL_intArray_NumItems(self)
    def UseAsList(self, *args): return _pysmile_impl.DSL_intArray_UseAsList(self, *args)
    def Last(self): return _pysmile_impl.DSL_intArray_Last(self)
    def List_Last(self): return _pysmile_impl.DSL_intArray_List_Last(self)
    def Subscript(self, *args): return _pysmile_impl.DSL_intArray_Subscript(self, *args)
    def Add(self, *args): return _pysmile_impl.DSL_intArray_Add(self, *args)
    def AddExclusive(self, *args): return _pysmile_impl.DSL_intArray_AddExclusive(self, *args)
    def Insert(self, *args): return _pysmile_impl.DSL_intArray_Insert(self, *args)
    def Delete(self, *args): return _pysmile_impl.DSL_intArray_Delete(self, *args)
    def DeleteByContent(self, *args): return _pysmile_impl.DSL_intArray_DeleteByContent(self, *args)
    def DeleteDuplicates(self): return _pysmile_impl.DSL_intArray_DeleteDuplicates(self)
    def FindPosition(self, *args): return _pysmile_impl.DSL_intArray_FindPosition(self, *args)
    def IsInList(self, *args): return _pysmile_impl.DSL_intArray_IsInList(self, *args)
    def RoomGuaranteed(self, *args): return _pysmile_impl.DSL_intArray_RoomGuaranteed(self, *args)
    def SetSize(self, *args): return _pysmile_impl.DSL_intArray_SetSize(self, *args)
    def Items(self, *args): return _pysmile_impl.DSL_intArray_Items(self, *args)
    def Flush(self): return _pysmile_impl.DSL_intArray_Flush(self)
    def FillFrom(self, *args): return _pysmile_impl.DSL_intArray_FillFrom(self, *args)
    def FillWith(self, *args): return _pysmile_impl.DSL_intArray_FillWith(self, *args)
    def ChangeOrder(self, *args): return _pysmile_impl.DSL_intArray_ChangeOrder(self, *args)
    def CleanUp(self): return _pysmile_impl.DSL_intArray_CleanUp(self)
    def get(self, *args): return _pysmile_impl.DSL_intArray_get(self, *args)
    def setUnchecked(self, *args): return _pysmile_impl.DSL_intArray_setUnchecked(self, *args)
DSL_intArray_swigregister = _pysmile_impl.DSL_intArray_swigregister
DSL_intArray_swigregister(DSL_intArray)

class DSL_doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_doubleArray
    __del__ = lambda self : None;
    def Swap(self, *args): return _pysmile_impl.DSL_doubleArray_Swap(self, *args)
    def Subscript(self, *args): return _pysmile_impl.DSL_doubleArray_Subscript(self, *args)
    def GetSize(self): return _pysmile_impl.DSL_doubleArray_GetSize(self)
    def NumItems(self): return _pysmile_impl.DSL_doubleArray_NumItems(self)
    def UseAsList(self, *args): return _pysmile_impl.DSL_doubleArray_UseAsList(self, *args)
    def Add(self, *args): return _pysmile_impl.DSL_doubleArray_Add(self, *args)
    def Insert(self, *args): return _pysmile_impl.DSL_doubleArray_Insert(self, *args)
    def Delete(self, *args): return _pysmile_impl.DSL_doubleArray_Delete(self, *args)
    def DeleteByContent(self, *args): return _pysmile_impl.DSL_doubleArray_DeleteByContent(self, *args)
    def FindPosition(self, *args): return _pysmile_impl.DSL_doubleArray_FindPosition(self, *args)
    def IsInList(self, *args): return _pysmile_impl.DSL_doubleArray_IsInList(self, *args)
    def Flush(self): return _pysmile_impl.DSL_doubleArray_Flush(self)
    def RoomGuaranteed(self, *args): return _pysmile_impl.DSL_doubleArray_RoomGuaranteed(self, *args)
    def SetSize(self, *args): return _pysmile_impl.DSL_doubleArray_SetSize(self, *args)
    def Items(self, *args): return _pysmile_impl.DSL_doubleArray_Items(self, *args)
    def FillFrom(self, *args): return _pysmile_impl.DSL_doubleArray_FillFrom(self, *args)
    def FillWith(self, *args): return _pysmile_impl.DSL_doubleArray_FillWith(self, *args)
    def ChangeOrder(self, *args): return _pysmile_impl.DSL_doubleArray_ChangeOrder(self, *args)
    def CleanUp(self): return _pysmile_impl.DSL_doubleArray_CleanUp(self)
    __swig_getmethods__["StartBlockCaching"] = lambda x: _pysmile_impl.DSL_doubleArray_StartBlockCaching
    if _newclass:StartBlockCaching = staticmethod(_pysmile_impl.DSL_doubleArray_StartBlockCaching)
    __swig_getmethods__["StopBlockCaching"] = lambda x: _pysmile_impl.DSL_doubleArray_StopBlockCaching
    if _newclass:StopBlockCaching = staticmethod(_pysmile_impl.DSL_doubleArray_StopBlockCaching)
    def get(self, *args): return _pysmile_impl.DSL_doubleArray_get(self, *args)
    def setUnchecked(self, *args): return _pysmile_impl.DSL_doubleArray_setUnchecked(self, *args)
DSL_doubleArray_swigregister = _pysmile_impl.DSL_doubleArray_swigregister
DSL_doubleArray_swigregister(DSL_doubleArray)

def DSL_doubleArray_StartBlockCaching(*args):
  return _pysmile_impl.DSL_doubleArray_StartBlockCaching(*args)
DSL_doubleArray_StartBlockCaching = _pysmile_impl.DSL_doubleArray_StartBlockCaching

def DSL_doubleArray_StopBlockCaching():
  return _pysmile_impl.DSL_doubleArray_StopBlockCaching()
DSL_doubleArray_StopBlockCaching = _pysmile_impl.DSL_doubleArray_StopBlockCaching

class DSL_Dmatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_Dmatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_Dmatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_Dmatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def Subscript(self, *args): return _pysmile_impl.DSL_Dmatrix_Subscript(self, *args)
    def GetNumberOfDimensions(self): return _pysmile_impl.DSL_Dmatrix_GetNumberOfDimensions(self)
    def GetLastDimension(self): return _pysmile_impl.DSL_Dmatrix_GetLastDimension(self)
    def GetSizeOfDimension(self, *args): return _pysmile_impl.DSL_Dmatrix_GetSizeOfDimension(self, *args)
    def GetSize(self): return _pysmile_impl.DSL_Dmatrix_GetSize(self)
    def Sum(self, *args): return _pysmile_impl.DSL_Dmatrix_Sum(self, *args)
    def Subtract(self, *args): return _pysmile_impl.DSL_Dmatrix_Subtract(self, *args)
    def Add(self, *args): return _pysmile_impl.DSL_Dmatrix_Add(self, *args)
    def Multiply(self, *args): return _pysmile_impl.DSL_Dmatrix_Multiply(self, *args)
    def FillWith(self, *args): return _pysmile_impl.DSL_Dmatrix_FillWith(self, *args)
    def Setup(self, *args): return _pysmile_impl.DSL_Dmatrix_Setup(self, *args)
    def AddDimension(self, *args): return _pysmile_impl.DSL_Dmatrix_AddDimension(self, *args)
    def AddDimensions(self, *args): return _pysmile_impl.DSL_Dmatrix_AddDimensions(self, *args)
    def InsertDimension(self, *args): return _pysmile_impl.DSL_Dmatrix_InsertDimension(self, *args)
    def RemoveDimensions(self, *args): return _pysmile_impl.DSL_Dmatrix_RemoveDimensions(self, *args)
    def RemoveDimension(self, *args): return _pysmile_impl.DSL_Dmatrix_RemoveDimension(self, *args)
    def IncreaseDimensionSize(self, *args): return _pysmile_impl.DSL_Dmatrix_IncreaseDimensionSize(self, *args)
    def DecreaseDimensionSize(self, *args): return _pysmile_impl.DSL_Dmatrix_DecreaseDimensionSize(self, *args)
    def ResizeDimension(self, *args): return _pysmile_impl.DSL_Dmatrix_ResizeDimension(self, *args)
    def ShiftDataUpwards(self, *args): return _pysmile_impl.DSL_Dmatrix_ShiftDataUpwards(self, *args)
    def ShiftDataDownwards(self, *args): return _pysmile_impl.DSL_Dmatrix_ShiftDataDownwards(self, *args)
    def Normalize(self, *args): return _pysmile_impl.DSL_Dmatrix_Normalize(self, *args)
    def Normalized(self, *args): return _pysmile_impl.DSL_Dmatrix_Normalized(self, *args)
    def Complement(self, *args): return _pysmile_impl.DSL_Dmatrix_Complement(self, *args)
    def CheckElements(self, *args): return _pysmile_impl.DSL_Dmatrix_CheckElements(self, *args)
    def CleanUp(self): return _pysmile_impl.DSL_Dmatrix_CleanUp(self)
    def Swap(self, *args): return _pysmile_impl.DSL_Dmatrix_Swap(self, *args)
    def IndexToCoordinates(self, *args): return _pysmile_impl.DSL_Dmatrix_IndexToCoordinates(self, *args)
    def CoordinatesToIndex(self, *args): return _pysmile_impl.DSL_Dmatrix_CoordinatesToIndex(self, *args)
    def NextCoordinates(self, *args): return _pysmile_impl.DSL_Dmatrix_NextCoordinates(self, *args)
    def PrevCoordinates(self, *args): return _pysmile_impl.DSL_Dmatrix_PrevCoordinates(self, *args)
    def GetItems(self, *args): return _pysmile_impl.DSL_Dmatrix_GetItems(self, *args)
    def GetDimensions(self): return _pysmile_impl.DSL_Dmatrix_GetDimensions(self)
    def GetPreProduct(self): return _pysmile_impl.DSL_Dmatrix_GetPreProduct(self)
    def ChangeOrderOfDimensions(self, *args): return _pysmile_impl.DSL_Dmatrix_ChangeOrderOfDimensions(self, *args)
    def ChangeOrderWithinDimension(self, *args): return _pysmile_impl.DSL_Dmatrix_ChangeOrderWithinDimension(self, *args)
    def CompatibleWith(self, *args): return _pysmile_impl.DSL_Dmatrix_CompatibleWith(self, *args)
    __swig_destroy__ = _pysmile_impl.delete_DSL_Dmatrix
    __del__ = lambda self : None;
DSL_Dmatrix_swigregister = _pysmile_impl.DSL_Dmatrix_swigregister
DSL_Dmatrix_swigregister(DSL_Dmatrix)

class DSL_array(DSL_object):
    __swig_setmethods__ = {}
    for _s in [DSL_object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_array, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_array, name)
    __repr__ = _swig_repr
    def __init__(self, initialDelta = 10): 
        this = _pysmile_impl.new_DSL_array(initialDelta)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_array
    __del__ = lambda self : None;
    def GetSize(self): return _pysmile_impl.DSL_array_GetSize(self)
    def NumItems(self): return _pysmile_impl.DSL_array_NumItems(self)
    def UseAsList(self, *args): return _pysmile_impl.DSL_array_UseAsList(self, *args)
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_array_CleanUp(self, deep)
DSL_array_swigregister = _pysmile_impl.DSL_array_swigregister
DSL_array_swigregister(DSL_array)

class DSL_stringArray(DSL_array):
    __swig_setmethods__ = {}
    for _s in [DSL_array]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_stringArray, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_array]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_stringArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_stringArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_stringArray
    __del__ = lambda self : None;
    def Subscript(self, *args): return _pysmile_impl.DSL_stringArray_Subscript(self, *args)
    def SetString(self, *args): return _pysmile_impl.DSL_stringArray_SetString(self, *args)
    def Add(self, *args): return _pysmile_impl.DSL_stringArray_Add(self, *args)
    def Insert(self, *args): return _pysmile_impl.DSL_stringArray_Insert(self, *args)
    def Delete(self, *args): return _pysmile_impl.DSL_stringArray_Delete(self, *args)
    def DeleteByContent(self, *args): return _pysmile_impl.DSL_stringArray_DeleteByContent(self, *args)
    def FindPosition(self, *args): return _pysmile_impl.DSL_stringArray_FindPosition(self, *args)
    def IsInList(self, *args): return _pysmile_impl.DSL_stringArray_IsInList(self, *args)
    def Flush(self): return _pysmile_impl.DSL_stringArray_Flush(self)
    def RoomGuaranteed(self, *args): return _pysmile_impl.DSL_stringArray_RoomGuaranteed(self, *args)
    def SetSize(self, *args): return _pysmile_impl.DSL_stringArray_SetSize(self, *args)
    def Items(self): return _pysmile_impl.DSL_stringArray_Items(self)
    def FillFrom(self, *args): return _pysmile_impl.DSL_stringArray_FillFrom(self, *args)
    def ChangeOrder(self, *args): return _pysmile_impl.DSL_stringArray_ChangeOrder(self, *args)
    def CheckReadiness(self, deep = 0): return _pysmile_impl.DSL_stringArray_CheckReadiness(self, deep)
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_stringArray_CleanUp(self, deep)
DSL_stringArray_swigregister = _pysmile_impl.DSL_stringArray_swigregister
DSL_stringArray_swigregister(DSL_stringArray)

class DSL_idArray(DSL_stringArray):
    __swig_setmethods__ = {}
    for _s in [DSL_stringArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_idArray, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_stringArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_idArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_idArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def EmptyIdsEnabled(self): return _pysmile_impl.DSL_idArray_EmptyIdsEnabled(self)
    def SetString(self, *args): return _pysmile_impl.DSL_idArray_SetString(self, *args)
    def Add(self, *args): return _pysmile_impl.DSL_idArray_Add(self, *args)
    def Insert(self, *args): return _pysmile_impl.DSL_idArray_Insert(self, *args)
    def CreateAndAddValidId(self, prefix = None, serialNumber = 0): return _pysmile_impl.DSL_idArray_CreateAndAddValidId(self, prefix, serialNumber)
    def CreateAndInsertValidId(self, prefix = None, serialNumber = 0, here = 0): return _pysmile_impl.DSL_idArray_CreateAndInsertValidId(self, prefix, serialNumber, here)
    def CreateValidId(self, *args): return _pysmile_impl.DSL_idArray_CreateValidId(self, *args)
    def MakeConsistent(self): return _pysmile_impl.DSL_idArray_MakeConsistent(self)
    def CheckConsistency(self, deep = 1): return _pysmile_impl.DSL_idArray_CheckConsistency(self, deep)
    def AddBlank(self): return _pysmile_impl.DSL_idArray_AddBlank(self)
    __swig_destroy__ = _pysmile_impl.delete_DSL_idArray
    __del__ = lambda self : None;
DSL_idArray_swigregister = _pysmile_impl.DSL_idArray_swigregister
DSL_idArray_swigregister(DSL_idArray)

class DSL_sysCoordinates(DSL_object):
    __swig_setmethods__ = {}
    for _s in [DSL_object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_sysCoordinates, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_sysCoordinates, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_sysCoordinates(*args)
        try: self.this.append(this)
        except: self.this = this
    def LinkTo(self, *args): return _pysmile_impl.DSL_sysCoordinates_LinkTo(self, *args)
    def GoFirst(self): return _pysmile_impl.DSL_sysCoordinates_GoFirst(self)
    def GoLast(self): return _pysmile_impl.DSL_sysCoordinates_GoLast(self)
    def GoTo(self, *args): return _pysmile_impl.DSL_sysCoordinates_GoTo(self, *args)
    def Next(self): return _pysmile_impl.DSL_sysCoordinates_Next(self)
    def Previous(self): return _pysmile_impl.DSL_sysCoordinates_Previous(self)
    def GoToCurrentPosition(self): return _pysmile_impl.DSL_sysCoordinates_GoToCurrentPosition(self)
    def Index(self): return _pysmile_impl.DSL_sysCoordinates_Index(self)
    def Coordinates(self): return _pysmile_impl.DSL_sysCoordinates_Coordinates(self)
    def UncheckedValue(self): return _pysmile_impl.DSL_sysCoordinates_UncheckedValue(self)
    def CheckedValue(self): return _pysmile_impl.DSL_sysCoordinates_CheckedValue(self)
    def LockCoordinate(self, *args): return _pysmile_impl.DSL_sysCoordinates_LockCoordinate(self, *args)
    def UnlockCoordinate(self, *args): return _pysmile_impl.DSL_sysCoordinates_UnlockCoordinate(self, *args)
    def UnlockAll(self): return _pysmile_impl.DSL_sysCoordinates_UnlockAll(self)
    def getCoordinate(self, *args): return _pysmile_impl.DSL_sysCoordinates_getCoordinate(self, *args)
    def setCoordinate(self, *args): return _pysmile_impl.DSL_sysCoordinates_setCoordinate(self, *args)
    def set(self, *args): return _pysmile_impl.DSL_sysCoordinates_set(self, *args)
    def setUnchecked(self, *args): return _pysmile_impl.DSL_sysCoordinates_setUnchecked(self, *args)
    __swig_destroy__ = _pysmile_impl.delete_DSL_sysCoordinates
    __del__ = lambda self : None;
DSL_sysCoordinates_swigregister = _pysmile_impl.DSL_sysCoordinates_swigregister
DSL_sysCoordinates_swigregister(DSL_sysCoordinates)

class DSL_header(DSL_object):
    __swig_setmethods__ = {}
    for _s in [DSL_object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_header, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_header, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_header(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_header
    __del__ = lambda self : None;
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_header_CleanUp(self, deep)
    def SetId(self, *args): return _pysmile_impl.DSL_header_SetId(self, *args)
    def SetName(self, *args): return _pysmile_impl.DSL_header_SetName(self, *args)
    def SetComment(self, *args): return _pysmile_impl.DSL_header_SetComment(self, *args)
    def GetId(self): return _pysmile_impl.DSL_header_GetId(self)
    def GetName(self): return _pysmile_impl.DSL_header_GetName(self)
    def GetComment(self): return _pysmile_impl.DSL_header_GetComment(self)
    __swig_getmethods__["IsThisIdValid"] = lambda x: _pysmile_impl.DSL_header_IsThisIdValid
    if _newclass:IsThisIdValid = staticmethod(_pysmile_impl.DSL_header_IsThisIdValid)
    __swig_getmethods__["MakeValidId"] = lambda x: _pysmile_impl.DSL_header_MakeValidId
    if _newclass:MakeValidId = staticmethod(_pysmile_impl.DSL_header_MakeValidId)
    def CheckConsistency(self, deep = 1): return _pysmile_impl.DSL_header_CheckConsistency(self, deep)
    def AssociateWithNode(self, *args): return _pysmile_impl.DSL_header_AssociateWithNode(self, *args)
DSL_header_swigregister = _pysmile_impl.DSL_header_swigregister
DSL_header_swigregister(DSL_header)

def DSL_header_IsThisIdValid(*args):
  return _pysmile_impl.DSL_header_IsThisIdValid(*args)
DSL_header_IsThisIdValid = _pysmile_impl.DSL_header_IsThisIdValid

def DSL_header_MakeValidId(*args):
  return _pysmile_impl.DSL_header_MakeValidId(*args)
DSL_header_MakeValidId = _pysmile_impl.DSL_header_MakeValidId

DSL_SHOW_IN_ARCS = _pysmile_impl.DSL_SHOW_IN_ARCS
DSL_SHOW_OUT_ARCS = _pysmile_impl.DSL_SHOW_OUT_ARCS
DSL_SELECTED = _pysmile_impl.DSL_SELECTED
DSL_DEFAULT_SCREENINFO_FLAGS = _pysmile_impl.DSL_DEFAULT_SCREENINFO_FLAGS
class DSL_screenInfo(DSL_object):
    __swig_setmethods__ = {}
    for _s in [DSL_object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_screenInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_screenInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["position"] = _pysmile_impl.DSL_screenInfo_position_set
    __swig_getmethods__["position"] = _pysmile_impl.DSL_screenInfo_position_get
    if _newclass:position = _swig_property(_pysmile_impl.DSL_screenInfo_position_get, _pysmile_impl.DSL_screenInfo_position_set)
    __swig_setmethods__["color"] = _pysmile_impl.DSL_screenInfo_color_set
    __swig_getmethods__["color"] = _pysmile_impl.DSL_screenInfo_color_get
    if _newclass:color = _swig_property(_pysmile_impl.DSL_screenInfo_color_get, _pysmile_impl.DSL_screenInfo_color_set)
    __swig_setmethods__["selColor"] = _pysmile_impl.DSL_screenInfo_selColor_set
    __swig_getmethods__["selColor"] = _pysmile_impl.DSL_screenInfo_selColor_get
    if _newclass:selColor = _swig_property(_pysmile_impl.DSL_screenInfo_selColor_get, _pysmile_impl.DSL_screenInfo_selColor_set)
    __swig_setmethods__["font"] = _pysmile_impl.DSL_screenInfo_font_set
    __swig_getmethods__["font"] = _pysmile_impl.DSL_screenInfo_font_get
    if _newclass:font = _swig_property(_pysmile_impl.DSL_screenInfo_font_get, _pysmile_impl.DSL_screenInfo_font_set)
    __swig_setmethods__["fontColor"] = _pysmile_impl.DSL_screenInfo_fontColor_set
    __swig_getmethods__["fontColor"] = _pysmile_impl.DSL_screenInfo_fontColor_get
    if _newclass:fontColor = _swig_property(_pysmile_impl.DSL_screenInfo_fontColor_get, _pysmile_impl.DSL_screenInfo_fontColor_set)
    __swig_setmethods__["borderThickness"] = _pysmile_impl.DSL_screenInfo_borderThickness_set
    __swig_getmethods__["borderThickness"] = _pysmile_impl.DSL_screenInfo_borderThickness_get
    if _newclass:borderThickness = _swig_property(_pysmile_impl.DSL_screenInfo_borderThickness_get, _pysmile_impl.DSL_screenInfo_borderThickness_set)
    __swig_setmethods__["borderColor"] = _pysmile_impl.DSL_screenInfo_borderColor_set
    __swig_getmethods__["borderColor"] = _pysmile_impl.DSL_screenInfo_borderColor_get
    if _newclass:borderColor = _swig_property(_pysmile_impl.DSL_screenInfo_borderColor_get, _pysmile_impl.DSL_screenInfo_borderColor_set)
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_screenInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def ShowInArcs(self): return _pysmile_impl.DSL_screenInfo_ShowInArcs(self)
    def ShowOutArcs(self): return _pysmile_impl.DSL_screenInfo_ShowOutArcs(self)
    def IsSelected(self): return _pysmile_impl.DSL_screenInfo_IsSelected(self)
    def SetShowInArcs(self): return _pysmile_impl.DSL_screenInfo_SetShowInArcs(self)
    def SetHideInArcs(self): return _pysmile_impl.DSL_screenInfo_SetHideInArcs(self)
    def SetShowOutArcs(self): return _pysmile_impl.DSL_screenInfo_SetShowOutArcs(self)
    def SetHideOutArcs(self): return _pysmile_impl.DSL_screenInfo_SetHideOutArcs(self)
    def SetSelected(self): return _pysmile_impl.DSL_screenInfo_SetSelected(self)
    def SetUnselected(self): return _pysmile_impl.DSL_screenInfo_SetUnselected(self)
    def FillDefaultValues(self, *args): return _pysmile_impl.DSL_screenInfo_FillDefaultValues(self, *args)
    __swig_destroy__ = _pysmile_impl.delete_DSL_screenInfo
    __del__ = lambda self : None;
DSL_screenInfo_swigregister = _pysmile_impl.DSL_screenInfo_swigregister
DSL_screenInfo_swigregister(DSL_screenInfo)

class DSL_creation(DSL_object):
    __swig_setmethods__ = {}
    for _s in [DSL_object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_creation, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_creation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_creation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_creation
    __del__ = lambda self : None;
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_creation_CleanUp(self, deep)
    def SetCreator(self, *args): return _pysmile_impl.DSL_creation_SetCreator(self, *args)
    def SetCreated(self, *args): return _pysmile_impl.DSL_creation_SetCreated(self, *args)
    def SetModified(self, *args): return _pysmile_impl.DSL_creation_SetModified(self, *args)
    def GetCreator(self): return _pysmile_impl.DSL_creation_GetCreator(self)
    def GetCreated(self): return _pysmile_impl.DSL_creation_GetCreated(self)
    def GetModified(self): return _pysmile_impl.DSL_creation_GetModified(self)
DSL_creation_swigregister = _pysmile_impl.DSL_creation_swigregister
DSL_creation_swigregister(DSL_creation)

class DSL_textBoxList(DSL_object):
    __swig_setmethods__ = {}
    for _s in [DSL_object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_textBoxList, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_textBoxList, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_textBoxList()
        try: self.this.append(this)
        except: self.this = this
    def GetPositions(self): return _pysmile_impl.DSL_textBoxList_GetPositions(self)
    def GetStrings(self): return _pysmile_impl.DSL_textBoxList_GetStrings(self)
    def GetString(self, *args): return _pysmile_impl.DSL_textBoxList_GetString(self, *args)
    def GetPosition(self, *args): return _pysmile_impl.DSL_textBoxList_GetPosition(self, *args)
    def NumItems(self): return _pysmile_impl.DSL_textBoxList_NumItems(self)
    __swig_destroy__ = _pysmile_impl.delete_DSL_textBoxList
    __del__ = lambda self : None;
DSL_textBoxList_swigregister = _pysmile_impl.DSL_textBoxList_swigregister
DSL_textBoxList_swigregister(DSL_textBoxList)

class DSL_userProperties(DSL_object):
    __swig_setmethods__ = {}
    for _s in [DSL_object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_userProperties, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_userProperties, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_userProperties(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_userProperties
    __del__ = lambda self : None;
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_userProperties_CleanUp(self, deep)
    def AddProperty(self, *args): return _pysmile_impl.DSL_userProperties_AddProperty(self, *args)
    def InsertProperty(self, *args): return _pysmile_impl.DSL_userProperties_InsertProperty(self, *args)
    def GetPropertyName(self, *args): return _pysmile_impl.DSL_userProperties_GetPropertyName(self, *args)
    def GetPropertyValue(self, *args): return _pysmile_impl.DSL_userProperties_GetPropertyValue(self, *args)
    def ChangePropertyName(self, *args): return _pysmile_impl.DSL_userProperties_ChangePropertyName(self, *args)
    def ChangePropertyValue(self, *args): return _pysmile_impl.DSL_userProperties_ChangePropertyValue(self, *args)
    def FindProperty(self, *args): return _pysmile_impl.DSL_userProperties_FindProperty(self, *args)
    def DeleteProperty(self, *args): return _pysmile_impl.DSL_userProperties_DeleteProperty(self, *args)
    def DeleteAllProperties(self): return _pysmile_impl.DSL_userProperties_DeleteAllProperties(self)
    def GetNumberOfProperties(self): return _pysmile_impl.DSL_userProperties_GetNumberOfProperties(self)
    def CheckConsistency(self, deep = 1): return _pysmile_impl.DSL_userProperties_CheckConsistency(self, deep)
DSL_userProperties_swigregister = _pysmile_impl.DSL_userProperties_swigregister
DSL_userProperties_swigregister(DSL_userProperties)

class DSL_documentation(DSL_object):
    __swig_setmethods__ = {}
    for _s in [DSL_object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_documentation, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_documentation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_documentation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_documentation
    __del__ = lambda self : None;
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_documentation_CleanUp(self, deep)
    def AddDocument(self, *args): return _pysmile_impl.DSL_documentation_AddDocument(self, *args)
    def InsertDocument(self, *args): return _pysmile_impl.DSL_documentation_InsertDocument(self, *args)
    def GetDocumentTitle(self, *args): return _pysmile_impl.DSL_documentation_GetDocumentTitle(self, *args)
    def GetDocumentPath(self, *args): return _pysmile_impl.DSL_documentation_GetDocumentPath(self, *args)
    def ChangeDocumentTitle(self, *args): return _pysmile_impl.DSL_documentation_ChangeDocumentTitle(self, *args)
    def ChangeDocumentPath(self, *args): return _pysmile_impl.DSL_documentation_ChangeDocumentPath(self, *args)
    def FindDocument(self, *args): return _pysmile_impl.DSL_documentation_FindDocument(self, *args)
    def DeleteDocument(self, *args): return _pysmile_impl.DSL_documentation_DeleteDocument(self, *args)
    def DeleteAllDocuments(self): return _pysmile_impl.DSL_documentation_DeleteAllDocuments(self)
    def GetNumberOfDocuments(self): return _pysmile_impl.DSL_documentation_GetNumberOfDocuments(self)
    def CheckConsistency(self, deep = 1): return _pysmile_impl.DSL_documentation_CheckConsistency(self, deep)
DSL_documentation_swigregister = _pysmile_impl.DSL_documentation_swigregister
DSL_documentation_swigregister(DSL_documentation)

dsl_normalNode = _pysmile_impl.dsl_normalNode
dsl_anchorNode = _pysmile_impl.dsl_anchorNode
dsl_terminalNode = _pysmile_impl.dsl_terminalNode
dsl_plateNode = _pysmile_impl.dsl_plateNode
dsl_normalArc = _pysmile_impl.dsl_normalArc
dsl_costObserve = _pysmile_impl.dsl_costObserve
class DSL_EPISParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_EPISParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_EPISParams, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_EPISParams()
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self): return _pysmile_impl.DSL_EPISParams_IsValid(self)
    def Equals(self, *args): return _pysmile_impl.DSL_EPISParams_Equals(self, *args)
    __swig_setmethods__["iPropagationLength"] = _pysmile_impl.DSL_EPISParams_iPropagationLength_set
    __swig_getmethods__["iPropagationLength"] = _pysmile_impl.DSL_EPISParams_iPropagationLength_get
    if _newclass:iPropagationLength = _swig_property(_pysmile_impl.DSL_EPISParams_iPropagationLength_get, _pysmile_impl.DSL_EPISParams_iPropagationLength_set)
    __swig_setmethods__["iNumStateSmall"] = _pysmile_impl.DSL_EPISParams_iNumStateSmall_set
    __swig_getmethods__["iNumStateSmall"] = _pysmile_impl.DSL_EPISParams_iNumStateSmall_get
    if _newclass:iNumStateSmall = _swig_property(_pysmile_impl.DSL_EPISParams_iNumStateSmall_get, _pysmile_impl.DSL_EPISParams_iNumStateSmall_set)
    __swig_setmethods__["iNumStateMedium"] = _pysmile_impl.DSL_EPISParams_iNumStateMedium_set
    __swig_getmethods__["iNumStateMedium"] = _pysmile_impl.DSL_EPISParams_iNumStateMedium_get
    if _newclass:iNumStateMedium = _swig_property(_pysmile_impl.DSL_EPISParams_iNumStateMedium_get, _pysmile_impl.DSL_EPISParams_iNumStateMedium_set)
    __swig_setmethods__["iNumStateBig"] = _pysmile_impl.DSL_EPISParams_iNumStateBig_set
    __swig_getmethods__["iNumStateBig"] = _pysmile_impl.DSL_EPISParams_iNumStateBig_get
    if _newclass:iNumStateBig = _swig_property(_pysmile_impl.DSL_EPISParams_iNumStateBig_get, _pysmile_impl.DSL_EPISParams_iNumStateBig_set)
    __swig_setmethods__["dStateSmallEpsil"] = _pysmile_impl.DSL_EPISParams_dStateSmallEpsil_set
    __swig_getmethods__["dStateSmallEpsil"] = _pysmile_impl.DSL_EPISParams_dStateSmallEpsil_get
    if _newclass:dStateSmallEpsil = _swig_property(_pysmile_impl.DSL_EPISParams_dStateSmallEpsil_get, _pysmile_impl.DSL_EPISParams_dStateSmallEpsil_set)
    __swig_setmethods__["dStateMediumEpsil"] = _pysmile_impl.DSL_EPISParams_dStateMediumEpsil_set
    __swig_getmethods__["dStateMediumEpsil"] = _pysmile_impl.DSL_EPISParams_dStateMediumEpsil_get
    if _newclass:dStateMediumEpsil = _swig_property(_pysmile_impl.DSL_EPISParams_dStateMediumEpsil_get, _pysmile_impl.DSL_EPISParams_dStateMediumEpsil_set)
    __swig_setmethods__["dStateBigEpsil"] = _pysmile_impl.DSL_EPISParams_dStateBigEpsil_set
    __swig_getmethods__["dStateBigEpsil"] = _pysmile_impl.DSL_EPISParams_dStateBigEpsil_get
    if _newclass:dStateBigEpsil = _swig_property(_pysmile_impl.DSL_EPISParams_dStateBigEpsil_get, _pysmile_impl.DSL_EPISParams_dStateBigEpsil_set)
    __swig_setmethods__["dStateOtherwise"] = _pysmile_impl.DSL_EPISParams_dStateOtherwise_set
    __swig_getmethods__["dStateOtherwise"] = _pysmile_impl.DSL_EPISParams_dStateOtherwise_get
    if _newclass:dStateOtherwise = _swig_property(_pysmile_impl.DSL_EPISParams_dStateOtherwise_get, _pysmile_impl.DSL_EPISParams_dStateOtherwise_set)
    __swig_destroy__ = _pysmile_impl.delete_DSL_EPISParams
    __del__ = lambda self : None;
DSL_EPISParams_swigregister = _pysmile_impl.DSL_EPISParams_swigregister
DSL_EPISParams_swigregister(DSL_EPISParams)

class DSL_LBPParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_LBPParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_LBPParams, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_LBPParams()
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self): return _pysmile_impl.DSL_LBPParams_IsValid(self)
    __swig_setmethods__["iPropagationLength"] = _pysmile_impl.DSL_LBPParams_iPropagationLength_set
    __swig_getmethods__["iPropagationLength"] = _pysmile_impl.DSL_LBPParams_iPropagationLength_get
    if _newclass:iPropagationLength = _swig_property(_pysmile_impl.DSL_LBPParams_iPropagationLength_get, _pysmile_impl.DSL_LBPParams_iPropagationLength_set)
    __swig_destroy__ = _pysmile_impl.delete_DSL_LBPParams
    __del__ = lambda self : None;
DSL_LBPParams_swigregister = _pysmile_impl.DSL_LBPParams_swigregister
DSL_LBPParams_swigregister(DSL_LBPParams)

class DSL_AnnealedMAPParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_AnnealedMAPParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_AnnealedMAPParams, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_AnnealedMAPParams()
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self): return _pysmile_impl.DSL_AnnealedMAPParams_IsValid(self)
    __swig_setmethods__["speed"] = _pysmile_impl.DSL_AnnealedMAPParams_speed_set
    __swig_getmethods__["speed"] = _pysmile_impl.DSL_AnnealedMAPParams_speed_get
    if _newclass:speed = _swig_property(_pysmile_impl.DSL_AnnealedMAPParams_speed_get, _pysmile_impl.DSL_AnnealedMAPParams_speed_set)
    __swig_setmethods__["Tmin"] = _pysmile_impl.DSL_AnnealedMAPParams_Tmin_set
    __swig_getmethods__["Tmin"] = _pysmile_impl.DSL_AnnealedMAPParams_Tmin_get
    if _newclass:Tmin = _swig_property(_pysmile_impl.DSL_AnnealedMAPParams_Tmin_get, _pysmile_impl.DSL_AnnealedMAPParams_Tmin_set)
    __swig_setmethods__["Tinit"] = _pysmile_impl.DSL_AnnealedMAPParams_Tinit_set
    __swig_getmethods__["Tinit"] = _pysmile_impl.DSL_AnnealedMAPParams_Tinit_get
    if _newclass:Tinit = _swig_property(_pysmile_impl.DSL_AnnealedMAPParams_Tinit_get, _pysmile_impl.DSL_AnnealedMAPParams_Tinit_set)
    __swig_setmethods__["kReheat"] = _pysmile_impl.DSL_AnnealedMAPParams_kReheat_set
    __swig_getmethods__["kReheat"] = _pysmile_impl.DSL_AnnealedMAPParams_kReheat_get
    if _newclass:kReheat = _swig_property(_pysmile_impl.DSL_AnnealedMAPParams_kReheat_get, _pysmile_impl.DSL_AnnealedMAPParams_kReheat_set)
    __swig_setmethods__["kMAP"] = _pysmile_impl.DSL_AnnealedMAPParams_kMAP_set
    __swig_getmethods__["kMAP"] = _pysmile_impl.DSL_AnnealedMAPParams_kMAP_get
    if _newclass:kMAP = _swig_property(_pysmile_impl.DSL_AnnealedMAPParams_kMAP_get, _pysmile_impl.DSL_AnnealedMAPParams_kMAP_set)
    __swig_setmethods__["kRFC"] = _pysmile_impl.DSL_AnnealedMAPParams_kRFC_set
    __swig_getmethods__["kRFC"] = _pysmile_impl.DSL_AnnealedMAPParams_kRFC_get
    if _newclass:kRFC = _swig_property(_pysmile_impl.DSL_AnnealedMAPParams_kRFC_get, _pysmile_impl.DSL_AnnealedMAPParams_kRFC_set)
    __swig_setmethods__["numCycle"] = _pysmile_impl.DSL_AnnealedMAPParams_numCycle_set
    __swig_getmethods__["numCycle"] = _pysmile_impl.DSL_AnnealedMAPParams_numCycle_get
    if _newclass:numCycle = _swig_property(_pysmile_impl.DSL_AnnealedMAPParams_numCycle_get, _pysmile_impl.DSL_AnnealedMAPParams_numCycle_set)
    __swig_setmethods__["iReheatSteps"] = _pysmile_impl.DSL_AnnealedMAPParams_iReheatSteps_set
    __swig_getmethods__["iReheatSteps"] = _pysmile_impl.DSL_AnnealedMAPParams_iReheatSteps_get
    if _newclass:iReheatSteps = _swig_property(_pysmile_impl.DSL_AnnealedMAPParams_iReheatSteps_get, _pysmile_impl.DSL_AnnealedMAPParams_iReheatSteps_set)
    __swig_setmethods__["iStopSteps"] = _pysmile_impl.DSL_AnnealedMAPParams_iStopSteps_set
    __swig_getmethods__["iStopSteps"] = _pysmile_impl.DSL_AnnealedMAPParams_iStopSteps_get
    if _newclass:iStopSteps = _swig_property(_pysmile_impl.DSL_AnnealedMAPParams_iStopSteps_get, _pysmile_impl.DSL_AnnealedMAPParams_iStopSteps_set)
    __swig_destroy__ = _pysmile_impl.delete_DSL_AnnealedMAPParams
    __del__ = lambda self : None;
DSL_AnnealedMAPParams_swigregister = _pysmile_impl.DSL_AnnealedMAPParams_swigregister
DSL_AnnealedMAPParams_swigregister(DSL_AnnealedMAPParams)

class DSL_SimpleGraphLayoutParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_SimpleGraphLayoutParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_SimpleGraphLayoutParams, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_SimpleGraphLayoutParams()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["flowTopDown"] = _pysmile_impl.DSL_SimpleGraphLayoutParams_flowTopDown_set
    __swig_getmethods__["flowTopDown"] = _pysmile_impl.DSL_SimpleGraphLayoutParams_flowTopDown_get
    if _newclass:flowTopDown = _swig_property(_pysmile_impl.DSL_SimpleGraphLayoutParams_flowTopDown_get, _pysmile_impl.DSL_SimpleGraphLayoutParams_flowTopDown_set)
    __swig_setmethods__["percSpacing"] = _pysmile_impl.DSL_SimpleGraphLayoutParams_percSpacing_set
    __swig_getmethods__["percSpacing"] = _pysmile_impl.DSL_SimpleGraphLayoutParams_percSpacing_get
    if _newclass:percSpacing = _swig_property(_pysmile_impl.DSL_SimpleGraphLayoutParams_percSpacing_get, _pysmile_impl.DSL_SimpleGraphLayoutParams_percSpacing_set)
    __swig_setmethods__["setNodeSizes"] = _pysmile_impl.DSL_SimpleGraphLayoutParams_setNodeSizes_set
    __swig_getmethods__["setNodeSizes"] = _pysmile_impl.DSL_SimpleGraphLayoutParams_setNodeSizes_get
    if _newclass:setNodeSizes = _swig_property(_pysmile_impl.DSL_SimpleGraphLayoutParams_setNodeSizes_get, _pysmile_impl.DSL_SimpleGraphLayoutParams_setNodeSizes_set)
    __swig_setmethods__["nodeWidth"] = _pysmile_impl.DSL_SimpleGraphLayoutParams_nodeWidth_set
    __swig_getmethods__["nodeWidth"] = _pysmile_impl.DSL_SimpleGraphLayoutParams_nodeWidth_get
    if _newclass:nodeWidth = _swig_property(_pysmile_impl.DSL_SimpleGraphLayoutParams_nodeWidth_get, _pysmile_impl.DSL_SimpleGraphLayoutParams_nodeWidth_set)
    __swig_setmethods__["nodeHeight"] = _pysmile_impl.DSL_SimpleGraphLayoutParams_nodeHeight_set
    __swig_getmethods__["nodeHeight"] = _pysmile_impl.DSL_SimpleGraphLayoutParams_nodeHeight_get
    if _newclass:nodeHeight = _swig_property(_pysmile_impl.DSL_SimpleGraphLayoutParams_nodeHeight_get, _pysmile_impl.DSL_SimpleGraphLayoutParams_nodeHeight_set)
    __swig_destroy__ = _pysmile_impl.delete_DSL_SimpleGraphLayoutParams
    __del__ = lambda self : None;
DSL_SimpleGraphLayoutParams_swigregister = _pysmile_impl.DSL_SimpleGraphLayoutParams_swigregister
DSL_SimpleGraphLayoutParams_swigregister(DSL_SimpleGraphLayoutParams)

DSL_NODE_CLEAN = _pysmile_impl.DSL_NODE_CLEAN
DSL_NODE_TARGET = _pysmile_impl.DSL_NODE_TARGET
DSL_NODE_VISITED = _pysmile_impl.DSL_NODE_VISITED
DSL_NODE_ANCESTOR = _pysmile_impl.DSL_NODE_ANCESTOR
DSL_NODE_DESCENDANT = _pysmile_impl.DSL_NODE_DESCENDANT
DSL_NODE_ORDERED = _pysmile_impl.DSL_NODE_ORDERED
DSL_NODE_VISITED_II = _pysmile_impl.DSL_NODE_VISITED_II
DSL_NODE_VISITED_III = _pysmile_impl.DSL_NODE_VISITED_III
DSL_NODE_FROM_CHILD = _pysmile_impl.DSL_NODE_FROM_CHILD
DSL_NODE_FROM_PARENT = _pysmile_impl.DSL_NODE_FROM_PARENT
DSL_NODE_EVIDENCE_TEMP = _pysmile_impl.DSL_NODE_EVIDENCE_TEMP
DSL_NODE_RELEVANT = _pysmile_impl.DSL_NODE_RELEVANT
DSL_NODE_ENTRY_DEFAULT = _pysmile_impl.DSL_NODE_ENTRY_DEFAULT
class DSL_nodeEntry(DSL_object):
    __swig_setmethods__ = {}
    for _s in [DSL_object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_nodeEntry, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_nodeEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["node"] = _pysmile_impl.DSL_nodeEntry_node_set
    __swig_getmethods__["node"] = _pysmile_impl.DSL_nodeEntry_node_get
    if _newclass:node = _swig_property(_pysmile_impl.DSL_nodeEntry_node_get, _pysmile_impl.DSL_nodeEntry_node_set)
    __swig_setmethods__["parents"] = _pysmile_impl.DSL_nodeEntry_parents_set
    __swig_getmethods__["parents"] = _pysmile_impl.DSL_nodeEntry_parents_get
    if _newclass:parents = _swig_property(_pysmile_impl.DSL_nodeEntry_parents_get, _pysmile_impl.DSL_nodeEntry_parents_set)
    __swig_setmethods__["children"] = _pysmile_impl.DSL_nodeEntry_children_set
    __swig_getmethods__["children"] = _pysmile_impl.DSL_nodeEntry_children_get
    if _newclass:children = _swig_property(_pysmile_impl.DSL_nodeEntry_children_get, _pysmile_impl.DSL_nodeEntry_children_set)
    __swig_setmethods__["parents_observCost"] = _pysmile_impl.DSL_nodeEntry_parents_observCost_set
    __swig_getmethods__["parents_observCost"] = _pysmile_impl.DSL_nodeEntry_parents_observCost_get
    if _newclass:parents_observCost = _swig_property(_pysmile_impl.DSL_nodeEntry_parents_observCost_get, _pysmile_impl.DSL_nodeEntry_parents_observCost_set)
    __swig_setmethods__["children_observCost"] = _pysmile_impl.DSL_nodeEntry_children_observCost_set
    __swig_getmethods__["children_observCost"] = _pysmile_impl.DSL_nodeEntry_children_observCost_get
    if _newclass:children_observCost = _swig_property(_pysmile_impl.DSL_nodeEntry_children_observCost_get, _pysmile_impl.DSL_nodeEntry_children_observCost_set)
    __swig_setmethods__["temporalType"] = _pysmile_impl.DSL_nodeEntry_temporalType_set
    __swig_getmethods__["temporalType"] = _pysmile_impl.DSL_nodeEntry_temporalType_get
    if _newclass:temporalType = _swig_property(_pysmile_impl.DSL_nodeEntry_temporalType_get, _pysmile_impl.DSL_nodeEntry_temporalType_set)
    __swig_setmethods__["flags"] = _pysmile_impl.DSL_nodeEntry_flags_set
    __swig_getmethods__["flags"] = _pysmile_impl.DSL_nodeEntry_flags_get
    if _newclass:flags = _swig_property(_pysmile_impl.DSL_nodeEntry_flags_get, _pysmile_impl.DSL_nodeEntry_flags_set)
    __swig_setmethods__["lenFromBottom"] = _pysmile_impl.DSL_nodeEntry_lenFromBottom_set
    __swig_getmethods__["lenFromBottom"] = _pysmile_impl.DSL_nodeEntry_lenFromBottom_get
    if _newclass:lenFromBottom = _swig_property(_pysmile_impl.DSL_nodeEntry_lenFromBottom_get, _pysmile_impl.DSL_nodeEntry_lenFromBottom_set)
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_nodeEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_nodeEntry
    __del__ = lambda self : None;
    def SetTarget(self): return _pysmile_impl.DSL_nodeEntry_SetTarget(self)
    def UnSetTarget(self): return _pysmile_impl.DSL_nodeEntry_UnSetTarget(self)
    def IsTarget(self): return _pysmile_impl.DSL_nodeEntry_IsTarget(self)
    def IsMarked(self, *args): return _pysmile_impl.DSL_nodeEntry_IsMarked(self, *args)
    def SetMark(self, *args): return _pysmile_impl.DSL_nodeEntry_SetMark(self, *args)
    def CleanMark(self, *args): return _pysmile_impl.DSL_nodeEntry_CleanMark(self, *args)
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_nodeEntry_CleanUp(self, deep)
    def Swap(self, *args): return _pysmile_impl.DSL_nodeEntry_Swap(self, *args)
DSL_nodeEntry_swigregister = _pysmile_impl.DSL_nodeEntry_swigregister
DSL_nodeEntry_swigregister(DSL_nodeEntry)

DSL_USE_RELEVANCE = _pysmile_impl.DSL_USE_RELEVANCE
DSL_PROPAGATE_EVIDENCE = _pysmile_impl.DSL_PROPAGATE_EVIDENCE
DSL_UPDATE_IMMEDIATELY = _pysmile_impl.DSL_UPDATE_IMMEDIATELY
DSL_RELEVANCE_ARC_ADDED = _pysmile_impl.DSL_RELEVANCE_ARC_ADDED
DSL_RELEVANCE_ARC_REMOVED = _pysmile_impl.DSL_RELEVANCE_ARC_REMOVED
DSL_RELEVANCE_EVIDENCE_SET = _pysmile_impl.DSL_RELEVANCE_EVIDENCE_SET
DSL_RELEVANCE_EVIDENCE_CLEARED = _pysmile_impl.DSL_RELEVANCE_EVIDENCE_CLEARED
DSL_RELEVANCE_PROPAGATED_EVIDENCE_SET = _pysmile_impl.DSL_RELEVANCE_PROPAGATED_EVIDENCE_SET
DSL_RELEVANCE_PROPAGATED_EVIDENCE_CLEARED = _pysmile_impl.DSL_RELEVANCE_PROPAGATED_EVIDENCE_CLEARED
DSL_RELEVANCE_NUMBER_OF_OUTCOMES_CHANGED = _pysmile_impl.DSL_RELEVANCE_NUMBER_OF_OUTCOMES_CHANGED
DSL_RELEVANCE_DISTRIBUTION_CHANGED = _pysmile_impl.DSL_RELEVANCE_DISTRIBUTION_CHANGED
DSL_RELEVANCE_GENERAL_CHANGE = _pysmile_impl.DSL_RELEVANCE_GENERAL_CHANGE
DSL_DEFAULT_NOISYMAX_RELEVANCE = _pysmile_impl.DSL_DEFAULT_NOISYMAX_RELEVANCE
DSL_NETWORK_DEFAULT = _pysmile_impl.DSL_NETWORK_DEFAULT
DSL_RELEVANCE_STRUCTURE_CHANGED = _pysmile_impl.DSL_RELEVANCE_STRUCTURE_CHANGED
DSL_RELEVANCE_DEFVAL_CHANGED = _pysmile_impl.DSL_RELEVANCE_DEFVAL_CHANGED
DSL_RELEVANCE_DEFAULT = _pysmile_impl.DSL_RELEVANCE_DEFAULT
class DSL_network(DSL_object):
    __swig_setmethods__ = {}
    for _s in [DSL_object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_network, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_network, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pysmile_impl.delete_DSL_network
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_network(*args)
        try: self.this.append(this)
        except: self.this = this
    def FastCopy(self, *args): return _pysmile_impl.DSL_network_FastCopy(self, *args)
    def Copy(self, *args): return _pysmile_impl.DSL_network_Copy(self, *args)
    def Header(self): return _pysmile_impl.DSL_network_Header(self)
    def Creation(self): return _pysmile_impl.DSL_network_Creation(self)
    def UserProperties(self): return _pysmile_impl.DSL_network_UserProperties(self)
    def Documentation(self): return _pysmile_impl.DSL_network_Documentation(self)
    def GetSubmodelHandler(self): return _pysmile_impl.DSL_network_GetSubmodelHandler(self)
    def GetNode(self, *args): return _pysmile_impl.DSL_network_GetNode(self, *args)
    def GetParents(self, *args): return _pysmile_impl.DSL_network_GetParents(self, *args)
    def GetChildren(self, *args): return _pysmile_impl.DSL_network_GetChildren(self, *args)
    def GetDiscreteParents(self, *args): return _pysmile_impl.DSL_network_GetDiscreteParents(self, *args)
    def GetNumberOfSamples(self): return _pysmile_impl.DSL_network_GetNumberOfSamples(self)
    def SetNumberOfSamples(self, *args): return _pysmile_impl.DSL_network_SetNumberOfSamples(self, *args)
    def IsRejectOutlierSamplesEnabled(self): return _pysmile_impl.DSL_network_IsRejectOutlierSamplesEnabled(self)
    def EnableRejectOutlierSamples(self, *args): return _pysmile_impl.DSL_network_EnableRejectOutlierSamples(self, *args)
    def SetDefaultBNAlgorithm(self, *args): return _pysmile_impl.DSL_network_SetDefaultBNAlgorithm(self, *args)
    def SetDefaultIDAlgorithm(self, *args): return _pysmile_impl.DSL_network_SetDefaultIDAlgorithm(self, *args)
    def SetDefaultHBNAlgorithm(self, *args): return _pysmile_impl.DSL_network_SetDefaultHBNAlgorithm(self, *args)
    def GetDefaultBNAlgorithm(self): return _pysmile_impl.DSL_network_GetDefaultBNAlgorithm(self)
    def GetDefaultIDAlgorithm(self): return _pysmile_impl.DSL_network_GetDefaultIDAlgorithm(self)
    def GetDefaultHBNAlgorithm(self): return _pysmile_impl.DSL_network_GetDefaultHBNAlgorithm(self)
    def EnableAutoDiscretize(self, *args): return _pysmile_impl.DSL_network_EnableAutoDiscretize(self, *args)
    def EnableZeroAvoidance(self, *args): return _pysmile_impl.DSL_network_EnableZeroAvoidance(self, *args)
    def IsAutoDiscretizeEnabled(self): return _pysmile_impl.DSL_network_IsAutoDiscretizeEnabled(self)
    def IsZeroAvoidanceEnabled(self): return _pysmile_impl.DSL_network_IsZeroAvoidanceEnabled(self)
    def GetNumberOfDiscretizationSamples(self): return _pysmile_impl.DSL_network_GetNumberOfDiscretizationSamples(self)
    def SetNumberOfDiscretizationSamples(self, *args): return _pysmile_impl.DSL_network_SetNumberOfDiscretizationSamples(self, *args)
    def IsJptStoreEnabled(self): return _pysmile_impl.DSL_network_IsJptStoreEnabled(self)
    def EnableJptStore(self, *args): return _pysmile_impl.DSL_network_EnableJptStore(self, *args)
    def GetJpts(self, *args): return _pysmile_impl.DSL_network_GetJpts(self, *args)
    def RemoveJpts(self): return _pysmile_impl.DSL_network_RemoveJpts(self)
    def InitJpt(self, *args): return _pysmile_impl.DSL_network_InitJpt(self, *args)
    def GetNumberOfNodes(self): return _pysmile_impl.DSL_network_GetNumberOfNodes(self)
    def AddNode(self, *args): return _pysmile_impl.DSL_network_AddNode(self, *args)
    def DeleteNode(self, *args): return _pysmile_impl.DSL_network_DeleteNode(self, *args)
    def DeleteAllNodes(self): return _pysmile_impl.DSL_network_DeleteAllNodes(self)
    def AddArc(self, *args): return _pysmile_impl.DSL_network_AddArc(self, *args)
    def RemoveArc(self, *args): return _pysmile_impl.DSL_network_RemoveArc(self, *args)
    def ReverseArc(self, *args): return _pysmile_impl.DSL_network_ReverseArc(self, *args)
    def IsArcNecessary(self, *args): return _pysmile_impl.DSL_network_IsArcNecessary(self, *args)
    def RemoveAllArcs(self): return _pysmile_impl.DSL_network_RemoveAllArcs(self)
    def AbsorbEvidenceNode(self, *args): return _pysmile_impl.DSL_network_AbsorbEvidenceNode(self, *args)
    def MarginalizeNode(self, *args): return _pysmile_impl.DSL_network_MarginalizeNode(self, *args)
    def MakeUniform(self): return _pysmile_impl.DSL_network_MakeUniform(self)
    def GetNumberOfTargets(self): return _pysmile_impl.DSL_network_GetNumberOfTargets(self)
    def IsTarget(self, *args): return _pysmile_impl.DSL_network_IsTarget(self, *args)
    def SetTarget(self, *args): return _pysmile_impl.DSL_network_SetTarget(self, *args)
    def UnSetTarget(self, *args): return _pysmile_impl.DSL_network_UnSetTarget(self, *args)
    def ClearAllTargets(self): return _pysmile_impl.DSL_network_ClearAllTargets(self)
    def SelectAllNodes(self): return _pysmile_impl.DSL_network_SelectAllNodes(self)
    def UnselectAllNodes(self): return _pysmile_impl.DSL_network_UnselectAllNodes(self)
    def GetSelectedNodes(self, *args): return _pysmile_impl.DSL_network_GetSelectedNodes(self, *args)
    def ClearAllEvidence(self): return _pysmile_impl.DSL_network_ClearAllEvidence(self)
    def ClearAllDecision(self): return _pysmile_impl.DSL_network_ClearAllDecision(self)
    def ClearAllPropagatedEvidence(self): return _pysmile_impl.DSL_network_ClearAllPropagatedEvidence(self)
    def IsThereAnyEvidence(self): return _pysmile_impl.DSL_network_IsThereAnyEvidence(self)
    def IsThereAnyDecision(self): return _pysmile_impl.DSL_network_IsThereAnyDecision(self)
    def GetFirstNode(self): return _pysmile_impl.DSL_network_GetFirstNode(self)
    def GetNextNode(self, *args): return _pysmile_impl.DSL_network_GetNextNode(self, *args)
    def GetLastNode(self): return _pysmile_impl.DSL_network_GetLastNode(self)
    def Ok(self, *args): return _pysmile_impl.DSL_network_Ok(self, *args)
    def NumParents(self, *args): return _pysmile_impl.DSL_network_NumParents(self, *args)
    def NumChildren(self, *args): return _pysmile_impl.DSL_network_NumChildren(self, *args)
    def Related(self, *args): return _pysmile_impl.DSL_network_Related(self, *args)
    def IsThisGuyMyParent(self, *args): return _pysmile_impl.DSL_network_IsThisGuyMyParent(self, *args)
    def IsThisGuyMyChild(self, *args): return _pysmile_impl.DSL_network_IsThisGuyMyChild(self, *args)
    def GetAncestors(self, *args): return _pysmile_impl.DSL_network_GetAncestors(self, *args)
    def GetDescendants(self, *args): return _pysmile_impl.DSL_network_GetDescendants(self, *args)
    def GetNumOfAncestors(self, *args): return _pysmile_impl.DSL_network_GetNumOfAncestors(self, *args)
    def GetNumOfDescendants(self, *args): return _pysmile_impl.DSL_network_GetNumOfDescendants(self, *args)
    def SetFlag(self, *args): return _pysmile_impl.DSL_network_SetFlag(self, *args)
    def CleanFlag(self, *args): return _pysmile_impl.DSL_network_CleanFlag(self, *args)
    def GetAllNodeIds(self, *args): return _pysmile_impl.DSL_network_GetAllNodeIds(self, *args)
    def GetAllNodes(self, *args): return _pysmile_impl.DSL_network_GetAllNodes(self, *args)
    def GetAllEvidenceNodes(self, *args): return _pysmile_impl.DSL_network_GetAllEvidenceNodes(self, *args)
    def IsThisIdentifierInUse(self, *args): return _pysmile_impl.DSL_network_IsThisIdentifierInUse(self, *args)
    def OnNodeIdChanging(self, *args): return _pysmile_impl.DSL_network_OnNodeIdChanging(self, *args)
    def FindNode(self, *args): return _pysmile_impl.DSL_network_FindNode(self, *args)
    def IsPolyTree(self): return _pysmile_impl.DSL_network_IsPolyTree(self)
    def InDegree(self): return _pysmile_impl.DSL_network_InDegree(self)
    def IsAcyclic(self): return _pysmile_impl.DSL_network_IsAcyclic(self)
    def IsInfluenceDiagram(self): return _pysmile_impl.DSL_network_IsInfluenceDiagram(self)
    def PartialOrdering(self): return _pysmile_impl.DSL_network_PartialOrdering(self)
    def ReadFile(self, *args): return _pysmile_impl.DSL_network_ReadFile(self, *args)
    def WriteFile(self, *args): return _pysmile_impl.DSL_network_WriteFile(self, *args)
    def IsLoading(self): return _pysmile_impl.DSL_network_IsLoading(self)
    def CreateUniqueNodeIdentifier(self, *args): return _pysmile_impl.DSL_network_CreateUniqueNodeIdentifier(self, *args)
    def CheckReadiness(self, deep = 0): return _pysmile_impl.DSL_network_CheckReadiness(self, deep)
    def CheckConsistency(self, deep = 0): return _pysmile_impl.DSL_network_CheckConsistency(self, deep)
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_network_CleanUp(self, deep)
    def ErrorHandler(self): return _pysmile_impl.DSL_network_ErrorHandler(self)
    def UpdateBeliefs(self): return _pysmile_impl.DSL_network_UpdateBeliefs(self)
    def InvalidateAllBeliefs(self): return _pysmile_impl.DSL_network_InvalidateAllBeliefs(self)
    def CallIDAlgorithm(self): return _pysmile_impl.DSL_network_CallIDAlgorithm(self)
    def CallBNAlgorithm(self): return _pysmile_impl.DSL_network_CallBNAlgorithm(self)
    def CallEqAlgorithm(self): return _pysmile_impl.DSL_network_CallEqAlgorithm(self)
    def CallHBNAlgorithm(self): return _pysmile_impl.DSL_network_CallHBNAlgorithm(self)
    def RelevanceControlValue(self, *args): return _pysmile_impl.DSL_network_RelevanceControlValue(self, *args)
    def RelevanceClearControlledValue(self, *args): return _pysmile_impl.DSL_network_RelevanceClearControlledValue(self, *args)
    def RelevanceEvidenceSet(self, *args): return _pysmile_impl.DSL_network_RelevanceEvidenceSet(self, *args)
    def RelevanceEvidenceCleared(self, *args): return _pysmile_impl.DSL_network_RelevanceEvidenceCleared(self, *args)
    def RelevanceContEvidenceChanged(self, *args): return _pysmile_impl.DSL_network_RelevanceContEvidenceChanged(self, *args)
    def RelevanceVirtualEvidenceSet(self, *args): return _pysmile_impl.DSL_network_RelevanceVirtualEvidenceSet(self, *args)
    def RelevanceVirtualEvidenceCleared(self, *args): return _pysmile_impl.DSL_network_RelevanceVirtualEvidenceCleared(self, *args)
    def RelevanceArcRemoved(self, *args): return _pysmile_impl.DSL_network_RelevanceArcRemoved(self, *args)
    def RelevanceArcAdded(self, *args): return _pysmile_impl.DSL_network_RelevanceArcAdded(self, *args)
    def RelevanceDefinitionChanged(self, *args): return _pysmile_impl.DSL_network_RelevanceDefinitionChanged(self, *args)
    def RelevanceEvidencePropagated(self, *args): return _pysmile_impl.DSL_network_RelevanceEvidencePropagated(self, *args)
    def RelevancePropagatedEvidenceCleared(self, *args): return _pysmile_impl.DSL_network_RelevancePropagatedEvidenceCleared(self, *args)
    def ActivateRelevance(self): return _pysmile_impl.DSL_network_ActivateRelevance(self)
    def DeactivateRelevance(self): return _pysmile_impl.DSL_network_DeactivateRelevance(self)
    def IsRelevanceActive(self): return _pysmile_impl.DSL_network_IsRelevanceActive(self)
    def SetRelevanceLevelFlag(self, *args): return _pysmile_impl.DSL_network_SetRelevanceLevelFlag(self, *args)
    def ClearRelevanceLevelFlag(self, *args): return _pysmile_impl.DSL_network_ClearRelevanceLevelFlag(self, *args)
    def IsRelevanceLevelSet(self, *args): return _pysmile_impl.DSL_network_IsRelevanceLevelSet(self, *args)
    def GetRelevanceLevelFlags(self): return _pysmile_impl.DSL_network_GetRelevanceLevelFlags(self)
    def SetRelevanceLevelFlags(self, *args): return _pysmile_impl.DSL_network_SetRelevanceLevelFlags(self, *args)
    def ReCreate(self, *args): return _pysmile_impl.DSL_network_ReCreate(self, *args)
    def AbsorbObservCostArc(self, *args): return _pysmile_impl.DSL_network_AbsorbObservCostArc(self, *args)
    def SetNetworkFlag(self, *args): return _pysmile_impl.DSL_network_SetNetworkFlag(self, *args)
    def ClearNetworkFlag(self, *args): return _pysmile_impl.DSL_network_ClearNetworkFlag(self, *args)
    def IsNetworkFlagSet(self, *args): return _pysmile_impl.DSL_network_IsNetworkFlagSet(self, *args)
    def GetNetworkFlags(self): return _pysmile_impl.DSL_network_GetNetworkFlags(self)
    def ValueOfInformation(self, *args): return _pysmile_impl.DSL_network_ValueOfInformation(self, *args)
    def TemporalOrder(self, *args): return _pysmile_impl.DSL_network_TemporalOrder(self, *args)
    def OrderPartially(self, *args): return _pysmile_impl.DSL_network_OrderPartially(self, *args)
    def OrderTemporally(self, *args): return _pysmile_impl.DSL_network_OrderTemporally(self, *args)
    def SetShowAs(self, *args): return _pysmile_impl.DSL_network_SetShowAs(self, *args)
    def GetShowAs(self): return _pysmile_impl.DSL_network_GetShowAs(self)
    def CostPartialOrdering(self, *args): return _pysmile_impl.DSL_network_CostPartialOrdering(self, *args)
    def OrderPartiallyByCost(self, *args): return _pysmile_impl.DSL_network_OrderPartiallyByCost(self, *args)
    def GetCostDescendants(self, *args): return _pysmile_impl.DSL_network_GetCostDescendants(self, *args)
    def MarkCostDescendants(self, *args): return _pysmile_impl.DSL_network_MarkCostDescendants(self, *args)
    def IsGroupCost(self, *args): return _pysmile_impl.DSL_network_IsGroupCost(self, *args)
    def ChangeOrderOfParents(self, *args): return _pysmile_impl.DSL_network_ChangeOrderOfParents(self, *args)
    def SetEPISParams(self, *args): return _pysmile_impl.DSL_network_SetEPISParams(self, *args)
    def GetEPISParams(self): return _pysmile_impl.DSL_network_GetEPISParams(self)
    def SetLBPParams(self, *args): return _pysmile_impl.DSL_network_SetLBPParams(self, *args)
    def GetLBPParams(self): return _pysmile_impl.DSL_network_GetLBPParams(self)
    def SetAnnealedMAPParams(self, *args): return _pysmile_impl.DSL_network_SetAnnealedMAPParams(self, *args)
    def GetAnnealedMAPParams(self): return _pysmile_impl.DSL_network_GetAnnealedMAPParams(self)
    def AnnealedMAP(self, *args): return _pysmile_impl.DSL_network_AnnealedMAP(self, *args)
    def GetDepthOfNet(self): return _pysmile_impl.DSL_network_GetDepthOfNet(self)
    def CalcProbEvidence(self, *args): return _pysmile_impl.DSL_network_CalcProbEvidence(self, *args)
    def CalcProbEvidence_JoinTree(self, *args): return _pysmile_impl.DSL_network_CalcProbEvidence_JoinTree(self, *args)
    def CalcProbEvidence_ChainRule(self, *args): return _pysmile_impl.DSL_network_CalcProbEvidence_ChainRule(self, *args)
    def SimpleGraphLayout(self, params = None): return _pysmile_impl.DSL_network_SimpleGraphLayout(self, params)
    def EnableNoisyMAXRelevance(self, enable = True): return _pysmile_impl.DSL_network_EnableNoisyMAXRelevance(self, enable)
    def IsNoisyMAXRelevanceEnabled(self): return _pysmile_impl.DSL_network_IsNoisyMAXRelevanceEnabled(self)
    def AddCase(self, *args): return _pysmile_impl.DSL_network_AddCase(self, *args)
    def GetCase(self, *args): return _pysmile_impl.DSL_network_GetCase(self, *args)
    def DeleteCase(self, *args): return _pysmile_impl.DSL_network_DeleteCase(self, *args)
    def DeleteAllCases(self): return _pysmile_impl.DSL_network_DeleteAllCases(self)
    def GetNumberOfCases(self): return _pysmile_impl.DSL_network_GetNumberOfCases(self)
    def EnableSyncCases(self, *args): return _pysmile_impl.DSL_network_EnableSyncCases(self, *args)
    def IsEnableSyncCases(self): return _pysmile_impl.DSL_network_IsEnableSyncCases(self)
    def UnrollNetwork(self, *args): return _pysmile_impl.DSL_network_UnrollNetwork(self, *args)
    def GetNumberOfSlices(self): return _pysmile_impl.DSL_network_GetNumberOfSlices(self)
    def SetNumberOfSlices(self, *args): return _pysmile_impl.DSL_network_SetNumberOfSlices(self, *args)
    def AddTemporalArc(self, *args): return _pysmile_impl.DSL_network_AddTemporalArc(self, *args)
    def RemoveTemporalArc(self, *args): return _pysmile_impl.DSL_network_RemoveTemporalArc(self, *args)
    def TemporalArcExists(self, *args): return _pysmile_impl.DSL_network_TemporalArcExists(self, *args)
    def IsTemporalArcNecessary(self, *args): return _pysmile_impl.DSL_network_IsTemporalArcNecessary(self, *args)
    def GetTemporalType(self, *args): return _pysmile_impl.DSL_network_GetTemporalType(self, *args)
    def SetTemporalType(self, *args): return _pysmile_impl.DSL_network_SetTemporalType(self, *args)
    def GetMaxTemporalOrder(self, *args): return _pysmile_impl.DSL_network_GetMaxTemporalOrder(self, *args)
    def GetTemporalOrders(self, *args): return _pysmile_impl.DSL_network_GetTemporalOrders(self, *args)
    def GetTemporalChildren(self, *args): return _pysmile_impl.DSL_network_GetTemporalChildren(self, *args)
    def GetTemporalParents(self, *args): return _pysmile_impl.DSL_network_GetTemporalParents(self, *args)
    def GetUnrolledParents(self, *args): return _pysmile_impl.DSL_network_GetUnrolledParents(self, *args)
    def GetDbn(self): return _pysmile_impl.DSL_network_GetDbn(self)
    def OnTypeChanged(self, *args): return _pysmile_impl.DSL_network_OnTypeChanged(self, *args)
    def OnOutcomeAdded(self, *args): return _pysmile_impl.DSL_network_OnOutcomeAdded(self, *args)
    def OnOutcomeDeleted(self, *args): return _pysmile_impl.DSL_network_OnOutcomeDeleted(self, *args)
    def OnReorderOutcomes(self, *args): return _pysmile_impl.DSL_network_OnReorderOutcomes(self, *args)
DSL_network_swigregister = _pysmile_impl.DSL_network_swigregister
DSL_network_swigregister(DSL_network)

class DSL_nodeInfo(DSL_object):
    __swig_setmethods__ = {}
    for _s in [DSL_object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_nodeInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_nodeInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_nodeInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def Header(self): return _pysmile_impl.DSL_nodeInfo_Header(self)
    def Screen(self): return _pysmile_impl.DSL_nodeInfo_Screen(self)
    def UserProperties(self): return _pysmile_impl.DSL_nodeInfo_UserProperties(self)
    def Documentation(self): return _pysmile_impl.DSL_nodeInfo_Documentation(self)
    __swig_destroy__ = _pysmile_impl.delete_DSL_nodeInfo
    __del__ = lambda self : None;
DSL_nodeInfo_swigregister = _pysmile_impl.DSL_nodeInfo_swigregister
DSL_nodeInfo_swigregister(DSL_nodeInfo)

class DSL_node(DSL_object):
    __swig_setmethods__ = {}
    for _s in [DSL_object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_node, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_node, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pysmile_impl.delete_DSL_node
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_node(*args)
        try: self.this.append(this)
        except: self.this = this
    def FastCopy(self, *args): return _pysmile_impl.DSL_node_FastCopy(self, *args)
    def Info(self): return _pysmile_impl.DSL_node_Info(self)
    def Network(self): return _pysmile_impl.DSL_node_Network(self)
    def Definition(self): return _pysmile_impl.DSL_node_Definition(self)
    def Value(self): return _pysmile_impl.DSL_node_Value(self)
    def ObservCost(self): return _pysmile_impl.DSL_node_ObservCost(self)
    def ExtraDefinition(self): return _pysmile_impl.DSL_node_ExtraDefinition(self)
    def Handle(self): return _pysmile_impl.DSL_node_Handle(self)
    def GetId(self): return _pysmile_impl.DSL_node_GetId(self)
    def SetId(self, *args): return _pysmile_impl.DSL_node_SetId(self, *args)
    def GetSubmodel(self): return _pysmile_impl.DSL_node_GetSubmodel(self)
    def SetSubmodel(self, *args): return _pysmile_impl.DSL_node_SetSubmodel(self, *args)
    def SetNetwork(self, *args): return _pysmile_impl.DSL_node_SetNetwork(self, *args)
    def SetDefinition(self, *args): return _pysmile_impl.DSL_node_SetDefinition(self, *args)
    def SetValue(self, *args): return _pysmile_impl.DSL_node_SetValue(self, *args)
    def InheritAspect(self): return _pysmile_impl.DSL_node_InheritAspect(self)
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_node_CleanUp(self, deep)
    def CheckReadiness(self, deep = 0): return _pysmile_impl.DSL_node_CheckReadiness(self, deep)
    def CheckConsistency(self, deep = 0): return _pysmile_impl.DSL_node_CheckConsistency(self, deep)
    def CreateDefinition(self, *args): return _pysmile_impl.DSL_node_CreateDefinition(self, *args)
    def CreateValue(self, *args): return _pysmile_impl.DSL_node_CreateValue(self, *args)
    def NodeTypeFromName(self, *args): return _pysmile_impl.DSL_node_NodeTypeFromName(self, *args)
    def ChangeType(self, *args): return _pysmile_impl.DSL_node_ChangeType(self, *args)
    def CheckNetworkStructure(self, *args): return _pysmile_impl.DSL_node_CheckNetworkStructure(self, *args)
    def Parents(self): return _pysmile_impl.DSL_node_Parents(self)
    def Children(self): return _pysmile_impl.DSL_node_Children(self)
DSL_node_swigregister = _pysmile_impl.DSL_node_swigregister
DSL_node_swigregister(DSL_node)

DSL_NO_PARENT = _pysmile_impl.DSL_NO_PARENT
DSL_EMPTY_SLOT = _pysmile_impl.DSL_EMPTY_SLOT
DSL_SUBMODEL_MASK = _pysmile_impl.DSL_SUBMODEL_MASK
class DSL_submodel(DSL_object):
    __swig_setmethods__ = {}
    for _s in [DSL_object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_submodel, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_submodel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _pysmile_impl.DSL_submodel_header_set
    __swig_getmethods__["header"] = _pysmile_impl.DSL_submodel_header_get
    if _newclass:header = _swig_property(_pysmile_impl.DSL_submodel_header_get, _pysmile_impl.DSL_submodel_header_set)
    __swig_setmethods__["info"] = _pysmile_impl.DSL_submodel_info_set
    __swig_getmethods__["info"] = _pysmile_impl.DSL_submodel_info_get
    if _newclass:info = _swig_property(_pysmile_impl.DSL_submodel_info_get, _pysmile_impl.DSL_submodel_info_set)
    __swig_setmethods__["windowpos"] = _pysmile_impl.DSL_submodel_windowpos_set
    __swig_getmethods__["windowpos"] = _pysmile_impl.DSL_submodel_windowpos_get
    if _newclass:windowpos = _swig_property(_pysmile_impl.DSL_submodel_windowpos_get, _pysmile_impl.DSL_submodel_windowpos_set)
    __swig_setmethods__["bkcolor"] = _pysmile_impl.DSL_submodel_bkcolor_set
    __swig_getmethods__["bkcolor"] = _pysmile_impl.DSL_submodel_bkcolor_get
    if _newclass:bkcolor = _swig_property(_pysmile_impl.DSL_submodel_bkcolor_get, _pysmile_impl.DSL_submodel_bkcolor_set)
    __swig_setmethods__["theComments"] = _pysmile_impl.DSL_submodel_theComments_set
    __swig_getmethods__["theComments"] = _pysmile_impl.DSL_submodel_theComments_get
    if _newclass:theComments = _swig_property(_pysmile_impl.DSL_submodel_theComments_get, _pysmile_impl.DSL_submodel_theComments_set)
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_submodel(*args)
        try: self.this.append(this)
        except: self.this = this
    def CopyAppearance(self, *args): return _pysmile_impl.DSL_submodel_CopyAppearance(self, *args)
    __swig_destroy__ = _pysmile_impl.delete_DSL_submodel
    __del__ = lambda self : None;
DSL_submodel_swigregister = _pysmile_impl.DSL_submodel_swigregister
DSL_submodel_swigregister(DSL_submodel)

class DSL_submodelEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_submodelEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_submodelEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["submodel"] = _pysmile_impl.DSL_submodelEntry_submodel_set
    __swig_getmethods__["submodel"] = _pysmile_impl.DSL_submodelEntry_submodel_get
    if _newclass:submodel = _swig_property(_pysmile_impl.DSL_submodelEntry_submodel_get, _pysmile_impl.DSL_submodelEntry_submodel_set)
    __swig_setmethods__["parent"] = _pysmile_impl.DSL_submodelEntry_parent_set
    __swig_getmethods__["parent"] = _pysmile_impl.DSL_submodelEntry_parent_get
    if _newclass:parent = _swig_property(_pysmile_impl.DSL_submodelEntry_parent_get, _pysmile_impl.DSL_submodelEntry_parent_set)
    def __init__(self): 
        this = _pysmile_impl.new_DSL_submodelEntry()
        try: self.this.append(this)
        except: self.this = this
    def IsEmpty(self): return _pysmile_impl.DSL_submodelEntry_IsEmpty(self)
    def IsMainSubmodel(self): return _pysmile_impl.DSL_submodelEntry_IsMainSubmodel(self)
    __swig_destroy__ = _pysmile_impl.delete_DSL_submodelEntry
    __del__ = lambda self : None;
DSL_submodelEntry_swigregister = _pysmile_impl.DSL_submodelEntry_swigregister
DSL_submodelEntry_swigregister(DSL_submodelEntry)

DSL_MAIN_SUBMODEL = _pysmile_impl.DSL_MAIN_SUBMODEL
class DSL_submodelHandler(DSL_object):
    __swig_setmethods__ = {}
    for _s in [DSL_object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_submodelHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_submodelHandler, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_submodelHandler()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_submodelHandler
    __del__ = lambda self : None;
    def SetNetwork(self, *args): return _pysmile_impl.DSL_submodelHandler_SetNetwork(self, *args)
    def Initialize(self): return _pysmile_impl.DSL_submodelHandler_Initialize(self)
    def IsThisIdentifierInUse(self, *args): return _pysmile_impl.DSL_submodelHandler_IsThisIdentifierInUse(self, *args)
    def Flush(self): return _pysmile_impl.DSL_submodelHandler_Flush(self)
    def CreateSubmodel(self, *args): return _pysmile_impl.DSL_submodelHandler_CreateSubmodel(self, *args)
    def DeleteSubmodel(self, *args): return _pysmile_impl.DSL_submodelHandler_DeleteSubmodel(self, *args)
    def Ok(self, *args): return _pysmile_impl.DSL_submodelHandler_Ok(self, *args)
    def GetParent(self, *args): return _pysmile_impl.DSL_submodelHandler_GetParent(self, *args)
    def GetSubmodel(self, *args): return _pysmile_impl.DSL_submodelHandler_GetSubmodel(self, *args)
    def GetFirstSubmodel(self): return _pysmile_impl.DSL_submodelHandler_GetFirstSubmodel(self)
    def GetNextSubmodel(self, *args): return _pysmile_impl.DSL_submodelHandler_GetNextSubmodel(self, *args)
    def GetSelectedSubmodels(self, *args): return _pysmile_impl.DSL_submodelHandler_GetSelectedSubmodels(self, *args)
    def FindSubmodel(self, *args): return _pysmile_impl.DSL_submodelHandler_FindSubmodel(self, *args)
    def MoveSubmodel(self, *args): return _pysmile_impl.DSL_submodelHandler_MoveSubmodel(self, *args)
    def GetSubmodelsOfManyNodes(self, *args): return _pysmile_impl.DSL_submodelHandler_GetSubmodelsOfManyNodes(self, *args)
    def IdentifyArcs(self, *args): return _pysmile_impl.DSL_submodelHandler_IdentifyArcs(self, *args)
    def IsMainSubmodel(self, *args): return _pysmile_impl.DSL_submodelHandler_IsMainSubmodel(self, *args)
    def PartialOrdering(self, *args): return _pysmile_impl.DSL_submodelHandler_PartialOrdering(self, *args)
    def GetNumberOfSubmodels(self): return _pysmile_impl.DSL_submodelHandler_GetNumberOfSubmodels(self)
    def GetNodeDefaultValues(self): return _pysmile_impl.DSL_submodelHandler_GetNodeDefaultValues(self)
    def GetSubmodelDefaultValues(self): return _pysmile_impl.DSL_submodelHandler_GetSubmodelDefaultValues(self)
    def GetIncludedSubmodels(self, *args): return _pysmile_impl.DSL_submodelHandler_GetIncludedSubmodels(self, *args)
    def GetIncludedNodes(self, *args): return _pysmile_impl.DSL_submodelHandler_GetIncludedNodes(self, *args)
    def GetDeepIncludedSubmodels(self, *args): return _pysmile_impl.DSL_submodelHandler_GetDeepIncludedSubmodels(self, *args)
    def GetDeepIncludedNodes(self, *args): return _pysmile_impl.DSL_submodelHandler_GetDeepIncludedNodes(self, *args)
    def GetParentSubmodels(self, *args): return _pysmile_impl.DSL_submodelHandler_GetParentSubmodels(self, *args)
    def GetChildSubmodels(self, *args): return _pysmile_impl.DSL_submodelHandler_GetChildSubmodels(self, *args)
    def GetParentNodes(self, *args): return _pysmile_impl.DSL_submodelHandler_GetParentNodes(self, *args)
    def GetChildNodes(self, *args): return _pysmile_impl.DSL_submodelHandler_GetChildNodes(self, *args)
    def GetOutsideParentNodes(self, *args): return _pysmile_impl.DSL_submodelHandler_GetOutsideParentNodes(self, *args)
    def GetOutsideChildNodes(self, *args): return _pysmile_impl.DSL_submodelHandler_GetOutsideChildNodes(self, *args)
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_submodelHandler_CleanUp(self, deep)
    def CheckReadiness(self, deep = 0): return _pysmile_impl.DSL_submodelHandler_CheckReadiness(self, deep)
    def ReCreate(self, *args): return _pysmile_impl.DSL_submodelHandler_ReCreate(self, *args)
DSL_submodelHandler_swigregister = _pysmile_impl.DSL_submodelHandler_swigregister
DSL_submodelHandler_swigregister(DSL_submodelHandler)

class DSL_simpleCase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_simpleCase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_simpleCase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_simpleCase(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetName(self): return _pysmile_impl.DSL_simpleCase_GetName(self)
    def SetName(self, *args): return _pysmile_impl.DSL_simpleCase_SetName(self, *args)
    def GetDescription(self): return _pysmile_impl.DSL_simpleCase_GetDescription(self)
    def SetDescription(self, *args): return _pysmile_impl.DSL_simpleCase_SetDescription(self, *args)
    def GetCategory(self): return _pysmile_impl.DSL_simpleCase_GetCategory(self)
    def SetCategory(self, *args): return _pysmile_impl.DSL_simpleCase_SetCategory(self, *args)
    def GetCreated(self): return _pysmile_impl.DSL_simpleCase_GetCreated(self)
    def SetCreated(self, *args): return _pysmile_impl.DSL_simpleCase_SetCreated(self, *args)
    def GetLastModified(self): return _pysmile_impl.DSL_simpleCase_GetLastModified(self)
    def SetLastModified(self, *args): return _pysmile_impl.DSL_simpleCase_SetLastModified(self, *args)
    def GetNumberOfEvidence(self): return _pysmile_impl.DSL_simpleCase_GetNumberOfEvidence(self)
    def AddEvidence(self, *args): return _pysmile_impl.DSL_simpleCase_AddEvidence(self, *args)
    def AppendTemporalEvidence(self, *args): return _pysmile_impl.DSL_simpleCase_AppendTemporalEvidence(self, *args)
    def RemoveEvidence(self, *args): return _pysmile_impl.DSL_simpleCase_RemoveEvidence(self, *args)
    def RemoveEvidenceByHandle(self, *args): return _pysmile_impl.DSL_simpleCase_RemoveEvidenceByHandle(self, *args)
    def SetEvidence(self, *args): return _pysmile_impl.DSL_simpleCase_SetEvidence(self, *args)
    def SetEvidenceByHandle(self, *args): return _pysmile_impl.DSL_simpleCase_SetEvidenceByHandle(self, *args)
    def GetHandle(self, *args): return _pysmile_impl.DSL_simpleCase_GetHandle(self, *args)
    def FindNode(self, *args): return _pysmile_impl.DSL_simpleCase_FindNode(self, *args)
    def GetEvidence(self, *args): return _pysmile_impl.DSL_simpleCase_GetEvidence(self, *args)
    def GetEvidenceByHandle(self, *args): return _pysmile_impl.DSL_simpleCase_GetEvidenceByHandle(self, *args)
    def AddTarget(self, *args): return _pysmile_impl.DSL_simpleCase_AddTarget(self, *args)
    def RemoveTarget(self, *args): return _pysmile_impl.DSL_simpleCase_RemoveTarget(self, *args)
    def FindTarget(self, *args): return _pysmile_impl.DSL_simpleCase_FindTarget(self, *args)
    def GetTarget(self, *args): return _pysmile_impl.DSL_simpleCase_GetTarget(self, *args)
    def IsTarget(self, *args): return _pysmile_impl.DSL_simpleCase_IsTarget(self, *args)
    def GetNumberOfTargets(self): return _pysmile_impl.DSL_simpleCase_GetNumberOfTargets(self)
    def SetTargets(self, *args): return _pysmile_impl.DSL_simpleCase_SetTargets(self, *args)
    def CaseToNetwork(self): return _pysmile_impl.DSL_simpleCase_CaseToNetwork(self)
    def NetworkToCase(self): return _pysmile_impl.DSL_simpleCase_NetworkToCase(self)
    def OnTypeChanged(self, *args): return _pysmile_impl.DSL_simpleCase_OnTypeChanged(self, *args)
    def OnTemporalTypeChanged(self, *args): return _pysmile_impl.DSL_simpleCase_OnTemporalTypeChanged(self, *args)
    def OnNodeDeleted(self, *args): return _pysmile_impl.DSL_simpleCase_OnNodeDeleted(self, *args)
    def OnOutcomeAdded(self, *args): return _pysmile_impl.DSL_simpleCase_OnOutcomeAdded(self, *args)
    def OnOutcomeDeleted(self, *args): return _pysmile_impl.DSL_simpleCase_OnOutcomeDeleted(self, *args)
    def OnReorderOutcomes(self, *args): return _pysmile_impl.DSL_simpleCase_OnReorderOutcomes(self, *args)
    __swig_destroy__ = _pysmile_impl.delete_DSL_simpleCase
    __del__ = lambda self : None;
DSL_simpleCase_swigregister = _pysmile_impl.DSL_simpleCase_swigregister
DSL_simpleCase_swigregister(DSL_simpleCase)

class DSL_errorStringRedirect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_errorStringRedirect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_errorStringRedirect, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysmile_impl.delete_DSL_errorStringRedirect
    __del__ = lambda self : None;
    def LogError(self, *args): return _pysmile_impl.DSL_errorStringRedirect_LogError(self, *args)
DSL_errorStringRedirect_swigregister = _pysmile_impl.DSL_errorStringRedirect_swigregister
DSL_errorStringRedirect_swigregister(DSL_errorStringRedirect)

class DSL_errorStringHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_errorStringHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_errorStringHandler, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_errorStringHandler()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_errorStringHandler
    __del__ = lambda self : None;
    def LogError(self, *args): return _pysmile_impl.DSL_errorStringHandler_LogError(self, *args)
    def GetError(self, *args): return _pysmile_impl.DSL_errorStringHandler_GetError(self, *args)
    def GetLastError(self): return _pysmile_impl.DSL_errorStringHandler_GetLastError(self)
    def GetErrorMessage(self, *args): return _pysmile_impl.DSL_errorStringHandler_GetErrorMessage(self, *args)
    def GetLastErrorMessage(self): return _pysmile_impl.DSL_errorStringHandler_GetLastErrorMessage(self)
    def GetNumberOfErrors(self): return _pysmile_impl.DSL_errorStringHandler_GetNumberOfErrors(self)
    def Flush(self): return _pysmile_impl.DSL_errorStringHandler_Flush(self)
    def RedirectToFile(self, *args): return _pysmile_impl.DSL_errorStringHandler_RedirectToFile(self, *args)
    def Redirect(self, *args): return _pysmile_impl.DSL_errorStringHandler_Redirect(self, *args)
DSL_errorStringHandler_swigregister = _pysmile_impl.DSL_errorStringHandler_swigregister
DSL_errorStringHandler_swigregister(DSL_errorStringHandler)

class DSL_progress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_progress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_progress, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Tick(self, *args): return _pysmile_impl.DSL_progress_Tick(self, *args)
    __swig_destroy__ = _pysmile_impl.delete_DSL_progress
    __del__ = lambda self : None;
DSL_progress_swigregister = _pysmile_impl.DSL_progress_swigregister
DSL_progress_swigregister(DSL_progress)
cvar = _pysmile_impl.cvar

DSL_CPT_MIN_STATES = _pysmile_impl.DSL_CPT_MIN_STATES
DSL_CPT_EPSILON = _pysmile_impl.DSL_CPT_EPSILON
class DSL_cpt(DSL_nodeDefinition):
    __swig_setmethods__ = {}
    for _s in [DSL_nodeDefinition]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_cpt, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_nodeDefinition]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_cpt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_cpt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_cpt
    __del__ = lambda self : None;
    def GetType(self): return _pysmile_impl.DSL_cpt_GetType(self)
    def GetTypeName(self): return _pysmile_impl.DSL_cpt_GetTypeName(self)
    def GetStatesNames(self): return _pysmile_impl.DSL_cpt_GetStatesNames(self)
    def GetProbabilities(self): return _pysmile_impl.DSL_cpt_GetProbabilities(self)
    def GetTemporalProbabilities(self, *args): return _pysmile_impl.DSL_cpt_GetTemporalProbabilities(self, *args)
    def SetTemporalProbabilities(self, *args): return _pysmile_impl.DSL_cpt_SetTemporalProbabilities(self, *args)
    def GetSize(self): return _pysmile_impl.DSL_cpt_GetSize(self)
    def GetNumberOfStates(self): return _pysmile_impl.DSL_cpt_GetNumberOfStates(self)
    def SetProbabilities(self, *args): return _pysmile_impl.DSL_cpt_SetProbabilities(self, *args)
    def RenameState(self, *args): return _pysmile_impl.DSL_cpt_RenameState(self, *args)
    def RenameStates(self, *args): return _pysmile_impl.DSL_cpt_RenameStates(self, *args)
    def NextCoordinates(self, *args): return _pysmile_impl.DSL_cpt_NextCoordinates(self, *args)
    def PrevCoordinates(self, *args): return _pysmile_impl.DSL_cpt_PrevCoordinates(self, *args)
    def AddState(self, *args): return _pysmile_impl.DSL_cpt_AddState(self, *args)
    def InsertState(self, *args): return _pysmile_impl.DSL_cpt_InsertState(self, *args)
    def RemoveState(self, *args): return _pysmile_impl.DSL_cpt_RemoveState(self, *args)
    def SetNumberOfStates(self, *args): return _pysmile_impl.DSL_cpt_SetNumberOfStates(self, *args)
    def ChangeOrderOfStates(self, *args): return _pysmile_impl.DSL_cpt_ChangeOrderOfStates(self, *args)
    def AddParent(self, *args): return _pysmile_impl.DSL_cpt_AddParent(self, *args)
    def AbsorbEvidenceFromParent(self, *args): return _pysmile_impl.DSL_cpt_AbsorbEvidenceFromParent(self, *args)
    def MarginalizeParent(self, *args): return _pysmile_impl.DSL_cpt_MarginalizeParent(self, *args)
    def RemoveParent(self, *args): return _pysmile_impl.DSL_cpt_RemoveParent(self, *args)
    def DaddyGetsBigger(self, *args): return _pysmile_impl.DSL_cpt_DaddyGetsBigger(self, *args)
    def DaddyGetsSmaller(self, *args): return _pysmile_impl.DSL_cpt_DaddyGetsSmaller(self, *args)
    def DaddyChangedOrderOfOutcomes(self, *args): return _pysmile_impl.DSL_cpt_DaddyChangedOrderOfOutcomes(self, *args)
    def OrderOfParentsGetsChanged(self, *args): return _pysmile_impl.DSL_cpt_OrderOfParentsGetsChanged(self, *args)
    def SetProbability(self, *args): return _pysmile_impl.DSL_cpt_SetProbability(self, *args)
    def GetProbability(self, *args): return _pysmile_impl.DSL_cpt_GetProbability(self, *args)
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_cpt_CleanUp(self, deep)
    def CheckReadiness(self, deep = 0): return _pysmile_impl.DSL_cpt_CheckReadiness(self, deep)
    def CheckConsistency(self, deep = 0): return _pysmile_impl.DSL_cpt_CheckConsistency(self, deep)
    def CreateUniqueStateName(self, *args): return _pysmile_impl.DSL_cpt_CreateUniqueStateName(self, *args)
    def ReCreateFromNetworkStructure(self): return _pysmile_impl.DSL_cpt_ReCreateFromNetworkStructure(self)
    def Clone(self, *args): return _pysmile_impl.DSL_cpt_Clone(self, *args)
    def CheckParentsStructure(self): return _pysmile_impl.DSL_cpt_CheckParentsStructure(self)
    def AddOutcome(self, *args): return _pysmile_impl.DSL_cpt_AddOutcome(self, *args)
    def InsertOutcome(self, *args): return _pysmile_impl.DSL_cpt_InsertOutcome(self, *args)
    def RemoveOutcome(self, *args): return _pysmile_impl.DSL_cpt_RemoveOutcome(self, *args)
    def GetNumberOfOutcomes(self): return _pysmile_impl.DSL_cpt_GetNumberOfOutcomes(self)
    def RenameOutcome(self, *args): return _pysmile_impl.DSL_cpt_RenameOutcome(self, *args)
    def RenameOutcomes(self, *args): return _pysmile_impl.DSL_cpt_RenameOutcomes(self, *args)
    def GetOutcomesNames(self): return _pysmile_impl.DSL_cpt_GetOutcomesNames(self)
    def SetNumberOfOutcomes(self, *args): return _pysmile_impl.DSL_cpt_SetNumberOfOutcomes(self, *args)
    def ChangeOrderOfOutcomes(self, *args): return _pysmile_impl.DSL_cpt_ChangeOrderOfOutcomes(self, *args)
    def GetDefinition(self, *args): return _pysmile_impl.DSL_cpt_GetDefinition(self, *args)
    def SetDefinition(self, *args): return _pysmile_impl.DSL_cpt_SetDefinition(self, *args)
    def MakeUniform(self): return _pysmile_impl.DSL_cpt_MakeUniform(self)
DSL_cpt_swigregister = _pysmile_impl.DSL_cpt_swigregister
DSL_cpt_swigregister(DSL_cpt)

class DSL_truthTable(DSL_cpt):
    __swig_setmethods__ = {}
    for _s in [DSL_cpt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_truthTable, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_cpt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_truthTable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_truthTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_truthTable
    __del__ = lambda self : None;
    def DaddyGetsBigger(self, *args): return _pysmile_impl.DSL_truthTable_DaddyGetsBigger(self, *args)
    def GetType(self): return _pysmile_impl.DSL_truthTable_GetType(self)
    def GetTypeName(self): return _pysmile_impl.DSL_truthTable_GetTypeName(self)
    def SetProbability(self, *args): return _pysmile_impl.DSL_truthTable_SetProbability(self, *args)
    def SetResultingState(self, *args): return _pysmile_impl.DSL_truthTable_SetResultingState(self, *args)
    def SetResultingStates(self, *args): return _pysmile_impl.DSL_truthTable_SetResultingStates(self, *args)
    def GetResultingState(self, *args): return _pysmile_impl.DSL_truthTable_GetResultingState(self, *args)
    def GetResultingStates(self, *args): return _pysmile_impl.DSL_truthTable_GetResultingStates(self, *args)
    def GetTemporalResultingStates(self, *args): return _pysmile_impl.DSL_truthTable_GetTemporalResultingStates(self, *args)
    def SetTemporalResultingStates(self, *args): return _pysmile_impl.DSL_truthTable_SetTemporalResultingStates(self, *args)
    def CheckConsistency(self, deep = 0): return _pysmile_impl.DSL_truthTable_CheckConsistency(self, deep)
    def Clone(self, *args): return _pysmile_impl.DSL_truthTable_Clone(self, *args)
    def SetDefinition(self, *args): return _pysmile_impl.DSL_truthTable_SetDefinition(self, *args)
    def MakeUniform(self): return _pysmile_impl.DSL_truthTable_MakeUniform(self)
DSL_truthTable_swigregister = _pysmile_impl.DSL_truthTable_swigregister
DSL_truthTable_swigregister(DSL_truthTable)

DSL_NOISYMAX_SQUARE_DISTANCE = _pysmile_impl.DSL_NOISYMAX_SQUARE_DISTANCE
DSL_NOISYMAX_KL_DISTANCE = _pysmile_impl.DSL_NOISYMAX_KL_DISTANCE
class DSL_noisyMAX(DSL_ciDefinition):
    __swig_setmethods__ = {}
    for _s in [DSL_ciDefinition]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_noisyMAX, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_ciDefinition]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_noisyMAX, name)
    __repr__ = _swig_repr
    def GetParentOutcomeStrengths(self, *args): return _pysmile_impl.DSL_noisyMAX_GetParentOutcomeStrengths(self, *args)
    def GetNumOfParentOutcomes(self, *args): return _pysmile_impl.DSL_noisyMAX_GetNumOfParentOutcomes(self, *args)
    def GetStrengthOfOutcome(self, *args): return _pysmile_impl.DSL_noisyMAX_GetStrengthOfOutcome(self, *args)
    def GetOutcomeOfStrength(self, *args): return _pysmile_impl.DSL_noisyMAX_GetOutcomeOfStrength(self, *args)
    def GetNumberOfParents(self): return _pysmile_impl.DSL_noisyMAX_GetNumberOfParents(self)
    def SetParentOutcomeStrengths(self, *args): return _pysmile_impl.DSL_noisyMAX_SetParentOutcomeStrengths(self, *args)
    def GetTemporalParentOutcomeStrengths(self, *args): return _pysmile_impl.DSL_noisyMAX_GetTemporalParentOutcomeStrengths(self, *args)
    def SetTemporalParentOutcomeStrengths(self, *args): return _pysmile_impl.DSL_noisyMAX_SetTemporalParentOutcomeStrengths(self, *args)
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_noisyMAX(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_noisyMAX
    __del__ = lambda self : None;
    def GetType(self): return _pysmile_impl.DSL_noisyMAX_GetType(self)
    def GetTypeName(self): return _pysmile_impl.DSL_noisyMAX_GetTypeName(self)
    def Clone(self, *args): return _pysmile_impl.DSL_noisyMAX_Clone(self, *args)
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_noisyMAX_CleanUp(self, deep)
    def ReCreateFromNetworkStructure(self): return _pysmile_impl.DSL_noisyMAX_ReCreateFromNetworkStructure(self)
    def GetParentStartingPosition(self, *args): return _pysmile_impl.DSL_noisyMAX_GetParentStartingPosition(self, *args)
    def CheckConsistency(self, deep = 0): return _pysmile_impl.DSL_noisyMAX_CheckConsistency(self, deep)
    def AddParent(self, *args): return _pysmile_impl.DSL_noisyMAX_AddParent(self, *args)
    def RemoveParent(self, *args): return _pysmile_impl.DSL_noisyMAX_RemoveParent(self, *args)
    def DaddyGetsBigger(self, *args): return _pysmile_impl.DSL_noisyMAX_DaddyGetsBigger(self, *args)
    def DaddyGetsSmaller(self, *args): return _pysmile_impl.DSL_noisyMAX_DaddyGetsSmaller(self, *args)
    def DaddyChangedOrderOfOutcomes(self, *args): return _pysmile_impl.DSL_noisyMAX_DaddyChangedOrderOfOutcomes(self, *args)
    def OrderOfParentsGetsChanged(self, *args): return _pysmile_impl.DSL_noisyMAX_OrderOfParentsGetsChanged(self, *args)
    def ChangeOrderOfOutcomes(self, *args): return _pysmile_impl.DSL_noisyMAX_ChangeOrderOfOutcomes(self, *args)
    def ChangeOrderOfStrengths(self, *args): return _pysmile_impl.DSL_noisyMAX_ChangeOrderOfStrengths(self, *args)
    def SetDefinition(self, *args): return _pysmile_impl.DSL_noisyMAX_SetDefinition(self, *args)
    def CheckCiWeightsConsistency(self, *args): return _pysmile_impl.DSL_noisyMAX_CheckCiWeightsConsistency(self, *args)
    def GetHenrionProbabilities(self, *args): return _pysmile_impl.DSL_noisyMAX_GetHenrionProbabilities(self, *args)
    def SetHenrionProbabilities(self, *args): return _pysmile_impl.DSL_noisyMAX_SetHenrionProbabilities(self, *args)
    def CheckHenrionConsistency(self, *args): return _pysmile_impl.DSL_noisyMAX_CheckHenrionConsistency(self, *args)
    def CiToCpt(self, *args): return _pysmile_impl.DSL_noisyMAX_CiToCpt(self, *args)
    def CptToCi(self): return _pysmile_impl.DSL_noisyMAX_CptToCi(self)
    def CiIndexConstrained(self, *args): return _pysmile_impl.DSL_noisyMAX_CiIndexConstrained(self, *args)
    def IsNonZero(self, *args): return _pysmile_impl.DSL_noisyMAX_IsNonZero(self, *args)
    def SquareDistance(self, *args): return _pysmile_impl.DSL_noisyMAX_SquareDistance(self, *args)
    def SquareCptToCi(self, *args): return _pysmile_impl.DSL_noisyMAX_SquareCptToCi(self, *args)
    def KLDistance(self, *args): return _pysmile_impl.DSL_noisyMAX_KLDistance(self, *args)
    def KLCptToCi(self, *args): return _pysmile_impl.DSL_noisyMAX_KLCptToCi(self, *args)
    def SetLegacyNoisyOrProbabilities(self, *args): return _pysmile_impl.DSL_noisyMAX_SetLegacyNoisyOrProbabilities(self, *args)
    def GetLegacyNoisyOrProbabilities(self, *args): return _pysmile_impl.DSL_noisyMAX_GetLegacyNoisyOrProbabilities(self, *args)
    def CalculateCptColumn(self, *args): return _pysmile_impl.DSL_noisyMAX_CalculateCptColumn(self, *args)
    def GetCpt(self): return _pysmile_impl.DSL_noisyMAX_GetCpt(self)
    def AbsorbEvidenceFromParent(self, *args): return _pysmile_impl.DSL_noisyMAX_AbsorbEvidenceFromParent(self, *args)
    def MarginalizeParent(self, *args): return _pysmile_impl.DSL_noisyMAX_MarginalizeParent(self, *args)
DSL_noisyMAX_swigregister = _pysmile_impl.DSL_noisyMAX_swigregister
DSL_noisyMAX_swigregister(DSL_noisyMAX)

DSL_NOISYADDER_MIN_STATES = _pysmile_impl.DSL_NOISYADDER_MIN_STATES
class DSL_noisyAdder(DSL_ciDefinition):
    __swig_setmethods__ = {}
    for _s in [DSL_ciDefinition]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_noisyAdder, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_ciDefinition]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_noisyAdder, name)
    __repr__ = _swig_repr
    fun_average = _pysmile_impl.DSL_noisyAdder_fun_average
    fun_single_fault = _pysmile_impl.DSL_noisyAdder_fun_single_fault
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_noisyAdder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_noisyAdder
    __del__ = lambda self : None;
    def GetType(self): return _pysmile_impl.DSL_noisyAdder_GetType(self)
    def GetTypeName(self): return _pysmile_impl.DSL_noisyAdder_GetTypeName(self)
    def ReCreateFromNetworkStructure(self): return _pysmile_impl.DSL_noisyAdder_ReCreateFromNetworkStructure(self)
    def GetParentStartingPosition(self, *args): return _pysmile_impl.DSL_noisyAdder_GetParentStartingPosition(self, *args)
    def Clone(self, *args): return _pysmile_impl.DSL_noisyAdder_Clone(self, *args)
    def CheckConsistency(self, deep = 0): return _pysmile_impl.DSL_noisyAdder_CheckConsistency(self, deep)
    def GetNumberOfParents(self): return _pysmile_impl.DSL_noisyAdder_GetNumberOfParents(self)
    def GetNumOfParentOutcomes(self, *args): return _pysmile_impl.DSL_noisyAdder_GetNumOfParentOutcomes(self, *args)
    def AddParent(self, *args): return _pysmile_impl.DSL_noisyAdder_AddParent(self, *args)
    def RemoveParent(self, *args): return _pysmile_impl.DSL_noisyAdder_RemoveParent(self, *args)
    def DaddyGetsBigger(self, *args): return _pysmile_impl.DSL_noisyAdder_DaddyGetsBigger(self, *args)
    def DaddyGetsSmaller(self, *args): return _pysmile_impl.DSL_noisyAdder_DaddyGetsSmaller(self, *args)
    def DaddyChangedOrderOfOutcomes(self, *args): return _pysmile_impl.DSL_noisyAdder_DaddyChangedOrderOfOutcomes(self, *args)
    def OrderOfParentsGetsChanged(self, *args): return _pysmile_impl.DSL_noisyAdder_OrderOfParentsGetsChanged(self, *args)
    def ChangeOrderOfOutcomes(self, *args): return _pysmile_impl.DSL_noisyAdder_ChangeOrderOfOutcomes(self, *args)
    def SetDefinition(self, *args): return _pysmile_impl.DSL_noisyAdder_SetDefinition(self, *args)
    def CheckCiWeightsConsistency(self, *args): return _pysmile_impl.DSL_noisyAdder_CheckCiWeightsConsistency(self, *args)
    def CiToCpt(self, *args): return _pysmile_impl.DSL_noisyAdder_CiToCpt(self, *args)
    def AddOutcome(self, *args): return _pysmile_impl.DSL_noisyAdder_AddOutcome(self, *args)
    def InsertOutcome(self, *args): return _pysmile_impl.DSL_noisyAdder_InsertOutcome(self, *args)
    def RemoveOutcome(self, *args): return _pysmile_impl.DSL_noisyAdder_RemoveOutcome(self, *args)
    def SetNumberOfOutcomes(self, *args): return _pysmile_impl.DSL_noisyAdder_SetNumberOfOutcomes(self, *args)
    def CptToCi(self): return _pysmile_impl.DSL_noisyAdder_CptToCi(self)
    def GetCpt(self): return _pysmile_impl.DSL_noisyAdder_GetCpt(self)
    def CiIndexConstrained(self, *args): return _pysmile_impl.DSL_noisyAdder_CiIndexConstrained(self, *args)
    def GetDistinguishedState(self): return _pysmile_impl.DSL_noisyAdder_GetDistinguishedState(self)
    def GetParentDistinguishedState(self, *args): return _pysmile_impl.DSL_noisyAdder_GetParentDistinguishedState(self, *args)
    def GetParentWeight(self, *args): return _pysmile_impl.DSL_noisyAdder_GetParentWeight(self, *args)
    def ParentWeights(self): return _pysmile_impl.DSL_noisyAdder_ParentWeights(self)
    def ParentDistinguishedStates(self): return _pysmile_impl.DSL_noisyAdder_ParentDistinguishedStates(self)
    def SetDistinguishedState(self, *args): return _pysmile_impl.DSL_noisyAdder_SetDistinguishedState(self, *args)
    def SetParentDistinguishedState(self, *args): return _pysmile_impl.DSL_noisyAdder_SetParentDistinguishedState(self, *args)
    def SetParentWeight(self, *args): return _pysmile_impl.DSL_noisyAdder_SetParentWeight(self, *args)
    def SetFunction(self, *args): return _pysmile_impl.DSL_noisyAdder_SetFunction(self, *args)
    def GetFunction(self): return _pysmile_impl.DSL_noisyAdder_GetFunction(self)
    def GetTemporalFunction(self, *args): return _pysmile_impl.DSL_noisyAdder_GetTemporalFunction(self, *args)
    def SetTemporalFunction(self, *args): return _pysmile_impl.DSL_noisyAdder_SetTemporalFunction(self, *args)
    def GetTemporalDistinguishedState(self, *args): return _pysmile_impl.DSL_noisyAdder_GetTemporalDistinguishedState(self, *args)
    def SetTemporalDistinguishedState(self, *args): return _pysmile_impl.DSL_noisyAdder_SetTemporalDistinguishedState(self, *args)
    def GetTemporalParentInfo(self, *args): return _pysmile_impl.DSL_noisyAdder_GetTemporalParentInfo(self, *args)
    def SetTemporalParentInfo(self, *args): return _pysmile_impl.DSL_noisyAdder_SetTemporalParentInfo(self, *args)
DSL_noisyAdder_swigregister = _pysmile_impl.DSL_noisyAdder_swigregister
DSL_noisyAdder_swigregister(DSL_noisyAdder)

DSL_LIST_MIN_CHOICES = _pysmile_impl.DSL_LIST_MIN_CHOICES
class DSL_list(DSL_nodeDefinition):
    __swig_setmethods__ = {}
    for _s in [DSL_nodeDefinition]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_list, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_nodeDefinition]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_list, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_list(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_list
    __del__ = lambda self : None;
    def GetType(self): return _pysmile_impl.DSL_list_GetType(self)
    def GetTypeName(self): return _pysmile_impl.DSL_list_GetTypeName(self)
    def GetChoicesNames(self): return _pysmile_impl.DSL_list_GetChoicesNames(self)
    def GetChoicesValues(self): return _pysmile_impl.DSL_list_GetChoicesValues(self)
    def GetSize(self): return _pysmile_impl.DSL_list_GetSize(self)
    def GetNumberOfChoices(self): return _pysmile_impl.DSL_list_GetNumberOfChoices(self)
    def RenameChoice(self, *args): return _pysmile_impl.DSL_list_RenameChoice(self, *args)
    def RenameChoices(self, *args): return _pysmile_impl.DSL_list_RenameChoices(self, *args)
    def ChangeChoiceValue(self, *args): return _pysmile_impl.DSL_list_ChangeChoiceValue(self, *args)
    def ChangeChoicesValues(self, *args): return _pysmile_impl.DSL_list_ChangeChoicesValues(self, *args)
    def AddChoice(self, *args): return _pysmile_impl.DSL_list_AddChoice(self, *args)
    def InsertChoice(self, *args): return _pysmile_impl.DSL_list_InsertChoice(self, *args)
    def RemoveChoice(self, *args): return _pysmile_impl.DSL_list_RemoveChoice(self, *args)
    def SetNumberOfChoices(self, *args): return _pysmile_impl.DSL_list_SetNumberOfChoices(self, *args)
    def ChangeOrderOfChoices(self, *args): return _pysmile_impl.DSL_list_ChangeOrderOfChoices(self, *args)
    def AddParent(self, *args): return _pysmile_impl.DSL_list_AddParent(self, *args)
    def RemoveParent(self, *args): return _pysmile_impl.DSL_list_RemoveParent(self, *args)
    def DaddyGetsBigger(self, *args): return _pysmile_impl.DSL_list_DaddyGetsBigger(self, *args)
    def DaddyGetsSmaller(self, *args): return _pysmile_impl.DSL_list_DaddyGetsSmaller(self, *args)
    def DaddyChangedOrderOfOutcomes(self, *args): return _pysmile_impl.DSL_list_DaddyChangedOrderOfOutcomes(self, *args)
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_list_CleanUp(self, deep)
    def CheckReadiness(self, deep = 0): return _pysmile_impl.DSL_list_CheckReadiness(self, deep)
    def CheckConsistency(self, deep = 0): return _pysmile_impl.DSL_list_CheckConsistency(self, deep)
    def CreateUniqueChoiceName(self, *args): return _pysmile_impl.DSL_list_CreateUniqueChoiceName(self, *args)
    def Clone(self, *args): return _pysmile_impl.DSL_list_Clone(self, *args)
    def ReCreateFromNetworkStructure(self): return _pysmile_impl.DSL_list_ReCreateFromNetworkStructure(self)
    def CheckParentsStructure(self): return _pysmile_impl.DSL_list_CheckParentsStructure(self)
    def AddOutcome(self, *args): return _pysmile_impl.DSL_list_AddOutcome(self, *args)
    def InsertOutcome(self, *args): return _pysmile_impl.DSL_list_InsertOutcome(self, *args)
    def RemoveOutcome(self, *args): return _pysmile_impl.DSL_list_RemoveOutcome(self, *args)
    def GetNumberOfOutcomes(self): return _pysmile_impl.DSL_list_GetNumberOfOutcomes(self)
    def RenameOutcome(self, *args): return _pysmile_impl.DSL_list_RenameOutcome(self, *args)
    def RenameOutcomes(self, *args): return _pysmile_impl.DSL_list_RenameOutcomes(self, *args)
    def GetOutcomesNames(self): return _pysmile_impl.DSL_list_GetOutcomesNames(self)
    def SetNumberOfOutcomes(self, *args): return _pysmile_impl.DSL_list_SetNumberOfOutcomes(self, *args)
    def ChangeOrderOfOutcomes(self, *args): return _pysmile_impl.DSL_list_ChangeOrderOfOutcomes(self, *args)
    def GetDefinition(self, *args): return _pysmile_impl.DSL_list_GetDefinition(self, *args)
    def SetDefinition(self, *args): return _pysmile_impl.DSL_list_SetDefinition(self, *args)
DSL_list_swigregister = _pysmile_impl.DSL_list_swigregister
DSL_list_swigregister(DSL_list)

class DSL_table(DSL_nodeDefinition):
    __swig_setmethods__ = {}
    for _s in [DSL_nodeDefinition]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_table, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_nodeDefinition]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_table, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_table(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_table
    __del__ = lambda self : None;
    def GetType(self): return _pysmile_impl.DSL_table_GetType(self)
    def GetTypeName(self): return _pysmile_impl.DSL_table_GetTypeName(self)
    def GetUtilities(self): return _pysmile_impl.DSL_table_GetUtilities(self)
    def GetSize(self): return _pysmile_impl.DSL_table_GetSize(self)
    def SetUtilities(self, *args): return _pysmile_impl.DSL_table_SetUtilities(self, *args)
    def SetUtility(self, *args): return _pysmile_impl.DSL_table_SetUtility(self, *args)
    def GetUtility(self, *args): return _pysmile_impl.DSL_table_GetUtility(self, *args)
    def AddParent(self, *args): return _pysmile_impl.DSL_table_AddParent(self, *args)
    def AbsorbEvidenceFromParent(self, *args): return _pysmile_impl.DSL_table_AbsorbEvidenceFromParent(self, *args)
    def MarginalizeParent(self, *args): return _pysmile_impl.DSL_table_MarginalizeParent(self, *args)
    def RemoveParent(self, *args): return _pysmile_impl.DSL_table_RemoveParent(self, *args)
    def DaddyGetsBigger(self, *args): return _pysmile_impl.DSL_table_DaddyGetsBigger(self, *args)
    def DaddyGetsSmaller(self, *args): return _pysmile_impl.DSL_table_DaddyGetsSmaller(self, *args)
    def DaddyChangedOrderOfOutcomes(self, *args): return _pysmile_impl.DSL_table_DaddyChangedOrderOfOutcomes(self, *args)
    def OrderOfParentsGetsChanged(self, *args): return _pysmile_impl.DSL_table_OrderOfParentsGetsChanged(self, *args)
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_table_CleanUp(self, deep)
    def CheckReadiness(self, deep = 0): return _pysmile_impl.DSL_table_CheckReadiness(self, deep)
    def Clone(self, *args): return _pysmile_impl.DSL_table_Clone(self, *args)
    def ReCreateFromNetworkStructure(self): return _pysmile_impl.DSL_table_ReCreateFromNetworkStructure(self)
    def CheckParentsStructure(self): return _pysmile_impl.DSL_table_CheckParentsStructure(self)
    def NormalizeExpectedUtilities(self, *args): return _pysmile_impl.DSL_table_NormalizeExpectedUtilities(self, *args)
    def GetMinimumUtility(self): return _pysmile_impl.DSL_table_GetMinimumUtility(self)
    def GetMaximumUtility(self): return _pysmile_impl.DSL_table_GetMaximumUtility(self)
    def IsParentNecessary(self, *args): return _pysmile_impl.DSL_table_IsParentNecessary(self, *args)
    def GetDefinition(self, *args): return _pysmile_impl.DSL_table_GetDefinition(self, *args)
    def SetDefinition(self, *args): return _pysmile_impl.DSL_table_SetDefinition(self, *args)
DSL_table_swigregister = _pysmile_impl.DSL_table_swigregister
DSL_table_swigregister(DSL_table)

class DSL_mau(DSL_nodeDefinition):
    __swig_setmethods__ = {}
    for _s in [DSL_nodeDefinition]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_mau, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_nodeDefinition]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_mau, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_mau(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_mau
    __del__ = lambda self : None;
    def GetType(self): return _pysmile_impl.DSL_mau_GetType(self)
    def GetTypeName(self): return _pysmile_impl.DSL_mau_GetTypeName(self)
    def GetWeights(self): return _pysmile_impl.DSL_mau_GetWeights(self)
    def GetSize(self): return _pysmile_impl.DSL_mau_GetSize(self)
    def SetWeights(self, *args): return _pysmile_impl.DSL_mau_SetWeights(self, *args)
    def GetExpressions(self, *args): return _pysmile_impl.DSL_mau_GetExpressions(self, *args)
    def SetExpressions(self, *args): return _pysmile_impl.DSL_mau_SetExpressions(self, *args)
    def ValidateExpression(self, *args): return _pysmile_impl.DSL_mau_ValidateExpression(self, *args)
    def InitExpressionMatrix(self, *args): return _pysmile_impl.DSL_mau_InitExpressionMatrix(self, *args)
    def AddParent(self, *args): return _pysmile_impl.DSL_mau_AddParent(self, *args)
    def RemoveParent(self, *args): return _pysmile_impl.DSL_mau_RemoveParent(self, *args)
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_mau_CleanUp(self, deep)
    def CheckReadiness(self, deep = 0): return _pysmile_impl.DSL_mau_CheckReadiness(self, deep)
    def Clone(self, *args): return _pysmile_impl.DSL_mau_Clone(self, *args)
    def ReCreateFromNetworkStructure(self): return _pysmile_impl.DSL_mau_ReCreateFromNetworkStructure(self)
    def CheckParentsStructure(self): return _pysmile_impl.DSL_mau_CheckParentsStructure(self)
    def GetDefinition(self, *args): return _pysmile_impl.DSL_mau_GetDefinition(self, *args)
    def SetDefinition(self, *args): return _pysmile_impl.DSL_mau_SetDefinition(self, *args)
    def GetParentsSplitByType(self, *args): return _pysmile_impl.DSL_mau_GetParentsSplitByType(self, *args)
DSL_mau_swigregister = _pysmile_impl.DSL_mau_swigregister
DSL_mau_swigregister(DSL_mau)

class DSL_equation(DSL_nodeDefinition):
    __swig_setmethods__ = {}
    for _s in [DSL_nodeDefinition]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_equation, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_nodeDefinition]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_equation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_equation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_equation
    __del__ = lambda self : None;
    def GetType(self): return _pysmile_impl.DSL_equation_GetType(self)
    def GetTypeName(self): return _pysmile_impl.DSL_equation_GetTypeName(self)
    def AddParent(self, *args): return _pysmile_impl.DSL_equation_AddParent(self, *args)
    def RemoveParent(self, *args): return _pysmile_impl.DSL_equation_RemoveParent(self, *args)
    def GetEquation(self, *args): return _pysmile_impl.DSL_equation_GetEquation(self, *args)
    def GetSolution(self, *args): return _pysmile_impl.DSL_equation_GetSolution(self, *args)
    def SetEquation(self, *args): return _pysmile_impl.DSL_equation_SetEquation(self, *args)
    def ValidateEquation(self, *args): return _pysmile_impl.DSL_equation_ValidateEquation(self, *args)
    def SetBounds(self, *args): return _pysmile_impl.DSL_equation_SetBounds(self, *args)
    def GetBounds(self, *args): return _pysmile_impl.DSL_equation_GetBounds(self, *args)
    def IsDiscretized(self): return _pysmile_impl.DSL_equation_IsDiscretized(self)
    def GetDiscProbs(self): return _pysmile_impl.DSL_equation_GetDiscProbs(self)
    def InvalidateDiscProbs(self): return _pysmile_impl.DSL_equation_InvalidateDiscProbs(self)
    def UpdateDiscProbs(self, randSeed = 0, samples = None): return _pysmile_impl.DSL_equation_UpdateDiscProbs(self, randSeed, samples)
    def SetDiscProbs(self, *args): return _pysmile_impl.DSL_equation_SetDiscProbs(self, *args)
    def SetDiscIntervals(self, *args): return _pysmile_impl.DSL_equation_SetDiscIntervals(self, *args)
    def ClearDiscIntervals(self): return _pysmile_impl.DSL_equation_ClearDiscIntervals(self)
    def GetDiscIntervals(self): return _pysmile_impl.DSL_equation_GetDiscIntervals(self)
    def GetDiscInterval(self, *args): return _pysmile_impl.DSL_equation_GetDiscInterval(self, *args)
    def Clone(self, *args): return _pysmile_impl.DSL_equation_Clone(self, *args)
DSL_equation_swigregister = _pysmile_impl.DSL_equation_swigregister
DSL_equation_swigregister(DSL_equation)

class DSL_beliefVector(DSL_nodeValue):
    __swig_setmethods__ = {}
    for _s in [DSL_nodeValue]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_beliefVector, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_nodeValue]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_beliefVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_beliefVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_beliefVector
    __del__ = lambda self : None;
    def GetType(self): return _pysmile_impl.DSL_beliefVector_GetType(self)
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_beliefVector_CleanUp(self, deep)
    def ReCreateFromNetworkStructure(self): return _pysmile_impl.DSL_beliefVector_ReCreateFromNetworkStructure(self)
    def Clone(self, *args): return _pysmile_impl.DSL_beliefVector_Clone(self, *args)
    def GetEvidence(self): return _pysmile_impl.DSL_beliefVector_GetEvidence(self)
    def SetEvidence(self, *args): return _pysmile_impl.DSL_beliefVector_SetEvidence(self, *args)
    def ClearEvidence(self): return _pysmile_impl.DSL_beliefVector_ClearEvidence(self)
    def SetPropagatedEvidence(self, *args): return _pysmile_impl.DSL_beliefVector_SetPropagatedEvidence(self, *args)
    def ClearPropagatedEvidence(self): return _pysmile_impl.DSL_beliefVector_ClearPropagatedEvidence(self)
    def SetVirtualEvidence(self, *args): return _pysmile_impl.DSL_beliefVector_SetVirtualEvidence(self, *args)
    def GetVirtualEvidence(self, *args): return _pysmile_impl.DSL_beliefVector_GetVirtualEvidence(self, *args)
    def GetBeliefs(self): return _pysmile_impl.DSL_beliefVector_GetBeliefs(self)
    def GetBelief(self, *args): return _pysmile_impl.DSL_beliefVector_GetBelief(self, *args)
    def SetBelief(self, *args): return _pysmile_impl.DSL_beliefVector_SetBelief(self, *args)
    def ControlValue(self, *args): return _pysmile_impl.DSL_beliefVector_ControlValue(self, *args)
    def ClearControlledValue(self): return _pysmile_impl.DSL_beliefVector_ClearControlledValue(self)
    def GetControlledValue(self): return _pysmile_impl.DSL_beliefVector_GetControlledValue(self)
    def IsControlled(self): return _pysmile_impl.DSL_beliefVector_IsControlled(self)
    def IsControllable(self): return _pysmile_impl.DSL_beliefVector_IsControllable(self)
    def GetValue(self, *args): return _pysmile_impl.DSL_beliefVector_GetValue(self, *args)
    def SetValue(self, *args): return _pysmile_impl.DSL_beliefVector_SetValue(self, *args)
DSL_beliefVector_swigregister = _pysmile_impl.DSL_beliefVector_swigregister
DSL_beliefVector_swigregister(DSL_beliefVector)

class DSL_listOfDecisions(DSL_nodeValue):
    __swig_setmethods__ = {}
    for _s in [DSL_nodeValue]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_listOfDecisions, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_nodeValue]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_listOfDecisions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_listOfDecisions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_listOfDecisions
    __del__ = lambda self : None;
    def GetType(self): return _pysmile_impl.DSL_listOfDecisions_GetType(self)
    def GetPolicyValues(self): return _pysmile_impl.DSL_listOfDecisions_GetPolicyValues(self)
    def Clone(self, *args): return _pysmile_impl.DSL_listOfDecisions_Clone(self, *args)
    def SetEvidence(self, *args): return _pysmile_impl.DSL_listOfDecisions_SetEvidence(self, *args)
    def ClearEvidence(self): return _pysmile_impl.DSL_listOfDecisions_ClearEvidence(self)
    def SetPropagatedEvidence(self, *args): return _pysmile_impl.DSL_listOfDecisions_SetPropagatedEvidence(self, *args)
    def ClearPropagatedEvidence(self): return _pysmile_impl.DSL_listOfDecisions_ClearPropagatedEvidence(self)
    def GetEvidence(self): return _pysmile_impl.DSL_listOfDecisions_GetEvidence(self)
    def SetPolicyValue(self, *args): return _pysmile_impl.DSL_listOfDecisions_SetPolicyValue(self, *args)
    def GetPolicyValue(self, *args): return _pysmile_impl.DSL_listOfDecisions_GetPolicyValue(self, *args)
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_listOfDecisions_CleanUp(self, deep)
    def ReCreateFromNetworkStructure(self): return _pysmile_impl.DSL_listOfDecisions_ReCreateFromNetworkStructure(self)
    def GetValue(self, *args): return _pysmile_impl.DSL_listOfDecisions_GetValue(self, *args)
    def SetValue(self, *args): return _pysmile_impl.DSL_listOfDecisions_SetValue(self, *args)
DSL_listOfDecisions_swigregister = _pysmile_impl.DSL_listOfDecisions_swigregister
DSL_listOfDecisions_swigregister(DSL_listOfDecisions)

class DSL_expectedUtility(DSL_nodeValue):
    __swig_setmethods__ = {}
    for _s in [DSL_nodeValue]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_expectedUtility, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_nodeValue]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_expectedUtility, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_expectedUtility(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_expectedUtility
    __del__ = lambda self : None;
    def GetType(self): return _pysmile_impl.DSL_expectedUtility_GetType(self)
    def GetUtilities(self): return _pysmile_impl.DSL_expectedUtility_GetUtilities(self)
    def Clone(self, *args): return _pysmile_impl.DSL_expectedUtility_Clone(self, *args)
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_expectedUtility_CleanUp(self, deep)
    def ReCreateFromNetworkStructure(self): return _pysmile_impl.DSL_expectedUtility_ReCreateFromNetworkStructure(self)
    def NormalizeExpectedUtilities(self, *args): return _pysmile_impl.DSL_expectedUtility_NormalizeExpectedUtilities(self, *args)
    def GetMinimumUtility(self): return _pysmile_impl.DSL_expectedUtility_GetMinimumUtility(self)
    def GetMaximumUtility(self): return _pysmile_impl.DSL_expectedUtility_GetMaximumUtility(self)
    def SetUtility(self, *args): return _pysmile_impl.DSL_expectedUtility_SetUtility(self, *args)
    def GetUtility(self, *args): return _pysmile_impl.DSL_expectedUtility_GetUtility(self, *args)
    def GetValue(self, *args): return _pysmile_impl.DSL_expectedUtility_GetValue(self, *args)
    def SetValue(self, *args): return _pysmile_impl.DSL_expectedUtility_SetValue(self, *args)
DSL_expectedUtility_swigregister = _pysmile_impl.DSL_expectedUtility_swigregister
DSL_expectedUtility_swigregister(DSL_expectedUtility)

class DSL_mauExpectedUtility(DSL_nodeValue):
    __swig_setmethods__ = {}
    for _s in [DSL_nodeValue]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_mauExpectedUtility, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_nodeValue]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_mauExpectedUtility, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_mauExpectedUtility(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_mauExpectedUtility
    __del__ = lambda self : None;
    def GetType(self): return _pysmile_impl.DSL_mauExpectedUtility_GetType(self)
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_mauExpectedUtility_CleanUp(self, deep)
    def ReCreateFromNetworkStructure(self): return _pysmile_impl.DSL_mauExpectedUtility_ReCreateFromNetworkStructure(self)
    def GetUtilities(self): return _pysmile_impl.DSL_mauExpectedUtility_GetUtilities(self)
    def Clone(self, *args): return _pysmile_impl.DSL_mauExpectedUtility_Clone(self, *args)
    def GetValue(self, *args): return _pysmile_impl.DSL_mauExpectedUtility_GetValue(self, *args)
    def SetValue(self, *args): return _pysmile_impl.DSL_mauExpectedUtility_SetValue(self, *args)
    def SetUtility(self, *args): return _pysmile_impl.DSL_mauExpectedUtility_SetUtility(self, *args)
    def GetUtility(self, *args): return _pysmile_impl.DSL_mauExpectedUtility_GetUtility(self, *args)
    def CalculateMAU(self): return _pysmile_impl.DSL_mauExpectedUtility_CalculateMAU(self)
DSL_mauExpectedUtility_swigregister = _pysmile_impl.DSL_mauExpectedUtility_swigregister
DSL_mauExpectedUtility_swigregister(DSL_mauExpectedUtility)

class DSL_valEqEvaluation(DSL_nodeValue):
    __swig_setmethods__ = {}
    for _s in [DSL_nodeValue]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_valEqEvaluation, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_nodeValue]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_valEqEvaluation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_valEqEvaluation(*args)
        try: self.this.append(this)
        except: self.this = this
    def Clone(self, *args): return _pysmile_impl.DSL_valEqEvaluation_Clone(self, *args)
    def GetType(self): return _pysmile_impl.DSL_valEqEvaluation_GetType(self)
    def AddIndexingParent(self, *args): return _pysmile_impl.DSL_valEqEvaluation_AddIndexingParent(self, *args)
    def GetSize(self): return _pysmile_impl.DSL_valEqEvaluation_GetSize(self)
    def GetSamples(self): return _pysmile_impl.DSL_valEqEvaluation_GetSamples(self)
    def GetSample(self, *args): return _pysmile_impl.DSL_valEqEvaluation_GetSample(self, *args)
    def GetSampleMean(self): return _pysmile_impl.DSL_valEqEvaluation_GetSampleMean(self)
    def GetSampleStdDev(self): return _pysmile_impl.DSL_valEqEvaluation_GetSampleStdDev(self)
    def GetStats(self, *args): return _pysmile_impl.DSL_valEqEvaluation_GetStats(self, *args)
    def HasSamplesOutOfBounds(self): return _pysmile_impl.DSL_valEqEvaluation_HasSamplesOutOfBounds(self)
    def AddSample(self, *args): return _pysmile_impl.DSL_valEqEvaluation_AddSample(self, *args)
    def SamplingStart(self, samplesToReserve = 0): return _pysmile_impl.DSL_valEqEvaluation_SamplingStart(self, samplesToReserve)
    def SamplingEnd(self): return _pysmile_impl.DSL_valEqEvaluation_SamplingEnd(self)
    def SetSampleMean(self, *args): return _pysmile_impl.DSL_valEqEvaluation_SetSampleMean(self, *args)
    def SetSamples(self, *args): return _pysmile_impl.DSL_valEqEvaluation_SetSamples(self, *args)
    def SetDiscBeliefs(self, *args): return _pysmile_impl.DSL_valEqEvaluation_SetDiscBeliefs(self, *args)
    def GetDiscBeliefs(self): return _pysmile_impl.DSL_valEqEvaluation_GetDiscBeliefs(self)
    def SetEvidence(self, *args): return _pysmile_impl.DSL_valEqEvaluation_SetEvidence(self, *args)
    def SetPropagatedEvidence(self, *args): return _pysmile_impl.DSL_valEqEvaluation_SetPropagatedEvidence(self, *args)
    def GetEvidence(self, *args): return _pysmile_impl.DSL_valEqEvaluation_GetEvidence(self, *args)
    def ClearEvidence(self): return _pysmile_impl.DSL_valEqEvaluation_ClearEvidence(self)
    def ClearPropagatedEvidence(self): return _pysmile_impl.DSL_valEqEvaluation_ClearPropagatedEvidence(self)
    __swig_destroy__ = _pysmile_impl.delete_DSL_valEqEvaluation
    __del__ = lambda self : None;
DSL_valEqEvaluation_swigregister = _pysmile_impl.DSL_valEqEvaluation_swigregister
DSL_valEqEvaluation_swigregister(DSL_valEqEvaluation)

DSL_OKAY = _pysmile_impl.DSL_OKAY
DSL_GENERAL_ERROR = _pysmile_impl.DSL_GENERAL_ERROR
DSL_OUT_OF_RANGE = _pysmile_impl.DSL_OUT_OF_RANGE
DSL_NO_ITEM = _pysmile_impl.DSL_NO_ITEM
DSL_INVALID_VALUE = _pysmile_impl.DSL_INVALID_VALUE
DSL_NO_USEFUL_SAMPLES = _pysmile_impl.DSL_NO_USEFUL_SAMPLES
DSL_CANT_SOLVE_EQUATION = _pysmile_impl.DSL_CANT_SOLVE_EQUATION
DSL_CYCLE_DETECTED = _pysmile_impl.DSL_CYCLE_DETECTED
DSL_WRONG_NUM_STATES = _pysmile_impl.DSL_WRONG_NUM_STATES
DSL_CONFLICTING_EVIDENCE = _pysmile_impl.DSL_CONFLICTING_EVIDENCE
DSL_ILLEGAL_ID = _pysmile_impl.DSL_ILLEGAL_ID
DSL_DUPLICATED_ID = _pysmile_impl.DSL_DUPLICATED_ID
DSL_OUT_OF_MEMORY = _pysmile_impl.DSL_OUT_OF_MEMORY
DSL_ZERO_POTENTIAL = _pysmile_impl.DSL_ZERO_POTENTIAL
DSL_WRONG_NODE_TYPE = _pysmile_impl.DSL_WRONG_NODE_TYPE
DSL_WRONG_ELEMENT_TYPE = _pysmile_impl.DSL_WRONG_ELEMENT_TYPE
DSL_WRONG_MESSAGE_TYPE = _pysmile_impl.DSL_WRONG_MESSAGE_TYPE
DSL_WRONG_SAMPLENODE_TYPE = _pysmile_impl.DSL_WRONG_SAMPLENODE_TYPE
DSL_INTERRUPTED = _pysmile_impl.DSL_INTERRUPTED
DSL_FILE_READ = _pysmile_impl.DSL_FILE_READ
DSL_FILE_WRITE = _pysmile_impl.DSL_FILE_WRITE
DSL_END_OF_FILE = _pysmile_impl.DSL_END_OF_FILE
DSL_WRONG_FILE = _pysmile_impl.DSL_WRONG_FILE
DSL_NO_MORE_TOKENS = _pysmile_impl.DSL_NO_MORE_TOKENS
DSL_LEXICAL_ERROR = _pysmile_impl.DSL_LEXICAL_ERROR
DSL_SYNTAX_ERROR = _pysmile_impl.DSL_SYNTAX_ERROR
DSL_UNEXPECTED_EOF = _pysmile_impl.DSL_UNEXPECTED_EOF
DSL_FIELD_NOT_FOUND = _pysmile_impl.DSL_FIELD_NOT_FOUND
DSL_OBJECT_NOT_READY = _pysmile_impl.DSL_OBJECT_NOT_READY
DSL_OBJECT_NOT_CONSISTENT = _pysmile_impl.DSL_OBJECT_NOT_CONSISTENT
class DSL_valueOfInformation(DSL_object):
    __swig_setmethods__ = {}
    for _s in [DSL_object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_valueOfInformation, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_valueOfInformation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_valueOfInformation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_valueOfInformation
    __del__ = lambda self : None;
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_valueOfInformation_CleanUp(self, deep)
    def CheckReadiness(self, deep = 0): return _pysmile_impl.DSL_valueOfInformation_CheckReadiness(self, deep)
    def CheckConsistency(self, deep = 0): return _pysmile_impl.DSL_valueOfInformation_CheckConsistency(self, deep)
    def GetNetwork(self): return _pysmile_impl.DSL_valueOfInformation_GetNetwork(self)
    def GetNodes(self): return _pysmile_impl.DSL_valueOfInformation_GetNodes(self)
    def GetDecision(self): return _pysmile_impl.DSL_valueOfInformation_GetDecision(self)
    def GetPointOfView(self): return _pysmile_impl.DSL_valueOfInformation_GetPointOfView(self)
    def GetIndexingNodes(self): return _pysmile_impl.DSL_valueOfInformation_GetIndexingNodes(self)
    def GetValues(self): return _pysmile_impl.DSL_valueOfInformation_GetValues(self)
    def SetNetwork(self, *args): return _pysmile_impl.DSL_valueOfInformation_SetNetwork(self, *args)
    def AddNode(self, *args): return _pysmile_impl.DSL_valueOfInformation_AddNode(self, *args)
    def RemoveNode(self, *args): return _pysmile_impl.DSL_valueOfInformation_RemoveNode(self, *args)
    def SetDecision(self, *args): return _pysmile_impl.DSL_valueOfInformation_SetDecision(self, *args)
    def SetPointOfView(self, *args): return _pysmile_impl.DSL_valueOfInformation_SetPointOfView(self, *args)
    def GetDecisions(self): return _pysmile_impl.DSL_valueOfInformation_GetDecisions(self)
    def GetActions(self): return _pysmile_impl.DSL_valueOfInformation_GetActions(self)
DSL_valueOfInformation_swigregister = _pysmile_impl.DSL_valueOfInformation_swigregister
DSL_valueOfInformation_swigregister(DSL_valueOfInformation)

class DIAG_faultyState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIAG_faultyState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIAG_faultyState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["node"] = _pysmile_impl.DIAG_faultyState_node_set
    __swig_getmethods__["node"] = _pysmile_impl.DIAG_faultyState_node_get
    if _newclass:node = _swig_property(_pysmile_impl.DIAG_faultyState_node_get, _pysmile_impl.DIAG_faultyState_node_set)
    __swig_setmethods__["state"] = _pysmile_impl.DIAG_faultyState_state_set
    __swig_getmethods__["state"] = _pysmile_impl.DIAG_faultyState_state_get
    if _newclass:state = _swig_property(_pysmile_impl.DIAG_faultyState_state_get, _pysmile_impl.DIAG_faultyState_state_set)
    def __lt__(self, *args): return _pysmile_impl.DIAG_faultyState___lt__(self, *args)
    def __eq__(self, *args): return _pysmile_impl.DIAG_faultyState___eq__(self, *args)
    def __init__(self): 
        this = _pysmile_impl.new_DIAG_faultyState()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DIAG_faultyState
    __del__ = lambda self : None;
DIAG_faultyState_swigregister = _pysmile_impl.DIAG_faultyState_swigregister
DIAG_faultyState_swigregister(DIAG_faultyState)

class DIAG_testInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIAG_testInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIAG_testInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["test"] = _pysmile_impl.DIAG_testInfo_test_set
    __swig_getmethods__["test"] = _pysmile_impl.DIAG_testInfo_test_get
    if _newclass:test = _swig_property(_pysmile_impl.DIAG_testInfo_test_get, _pysmile_impl.DIAG_testInfo_test_set)
    __swig_setmethods__["entropy"] = _pysmile_impl.DIAG_testInfo_entropy_set
    __swig_getmethods__["entropy"] = _pysmile_impl.DIAG_testInfo_entropy_get
    if _newclass:entropy = _swig_property(_pysmile_impl.DIAG_testInfo_entropy_get, _pysmile_impl.DIAG_testInfo_entropy_set)
    __swig_setmethods__["cost"] = _pysmile_impl.DIAG_testInfo_cost_set
    __swig_getmethods__["cost"] = _pysmile_impl.DIAG_testInfo_cost_get
    if _newclass:cost = _swig_property(_pysmile_impl.DIAG_testInfo_cost_get, _pysmile_impl.DIAG_testInfo_cost_set)
    __swig_setmethods__["strength"] = _pysmile_impl.DIAG_testInfo_strength_set
    __swig_getmethods__["strength"] = _pysmile_impl.DIAG_testInfo_strength_get
    if _newclass:strength = _swig_property(_pysmile_impl.DIAG_testInfo_strength_get, _pysmile_impl.DIAG_testInfo_strength_set)
    def __init__(self): 
        this = _pysmile_impl.new_DIAG_testInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DIAG_testInfo
    __del__ = lambda self : None;
DIAG_testInfo_swigregister = _pysmile_impl.DIAG_testInfo_swigregister
DIAG_testInfo_swigregister(DIAG_testInfo)

class DIAG_faultInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIAG_faultInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIAG_faultInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nodeHandle"] = _pysmile_impl.DIAG_faultInfo_nodeHandle_set
    __swig_getmethods__["nodeHandle"] = _pysmile_impl.DIAG_faultInfo_nodeHandle_get
    if _newclass:nodeHandle = _swig_property(_pysmile_impl.DIAG_faultInfo_nodeHandle_get, _pysmile_impl.DIAG_faultInfo_nodeHandle_set)
    __swig_setmethods__["nodeState"] = _pysmile_impl.DIAG_faultInfo_nodeState_set
    __swig_getmethods__["nodeState"] = _pysmile_impl.DIAG_faultInfo_nodeState_get
    if _newclass:nodeState = _swig_property(_pysmile_impl.DIAG_faultInfo_nodeState_get, _pysmile_impl.DIAG_faultInfo_nodeState_set)
    __swig_setmethods__["faultHandle"] = _pysmile_impl.DIAG_faultInfo_faultHandle_set
    __swig_getmethods__["faultHandle"] = _pysmile_impl.DIAG_faultInfo_faultHandle_get
    if _newclass:faultHandle = _swig_property(_pysmile_impl.DIAG_faultInfo_faultHandle_get, _pysmile_impl.DIAG_faultInfo_faultHandle_set)
    __swig_setmethods__["posterior"] = _pysmile_impl.DIAG_faultInfo_posterior_set
    __swig_getmethods__["posterior"] = _pysmile_impl.DIAG_faultInfo_posterior_get
    if _newclass:posterior = _swig_property(_pysmile_impl.DIAG_faultInfo_posterior_get, _pysmile_impl.DIAG_faultInfo_posterior_set)
    def __lt__(self, *args): return _pysmile_impl.DIAG_faultInfo___lt__(self, *args)
    def __init__(self): 
        this = _pysmile_impl.new_DIAG_faultInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DIAG_faultInfo
    __del__ = lambda self : None;
DIAG_faultInfo_swigregister = _pysmile_impl.DIAG_faultInfo_swigregister
DIAG_faultInfo_swigregister(DIAG_faultInfo)

class DIAG_network(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIAG_network, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIAG_network, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DIAG_network(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DIAG_network
    __del__ = lambda self : None;
    def LinkToNetwork(self, *args): return _pysmile_impl.DIAG_network_LinkToNetwork(self, *args)
    def GetNetwork(self): return _pysmile_impl.DIAG_network_GetNetwork(self)
    def UpdateFaultBeliefs(self): return _pysmile_impl.DIAG_network_UpdateFaultBeliefs(self)
    def LoadModel(self, *args): return _pysmile_impl.DIAG_network_LoadModel(self, *args)
    def RestartDiagnosis(self): return _pysmile_impl.DIAG_network_RestartDiagnosis(self)
    def ComputeTestStrengths(self, *args): return _pysmile_impl.DIAG_network_ComputeTestStrengths(self, *args)
    def IsDSepEnabled(self): return _pysmile_impl.DIAG_network_IsDSepEnabled(self)
    def EnableDSep(self, *args): return _pysmile_impl.DIAG_network_EnableDSep(self, *args)
    def AreQuickTestsEnabled(self): return _pysmile_impl.DIAG_network_AreQuickTestsEnabled(self)
    def EnableQuickTests(self, *args): return _pysmile_impl.DIAG_network_EnableQuickTests(self, *args)
    def GetUnperformedTests(self): return _pysmile_impl.DIAG_network_GetUnperformedTests(self)
    def GetTestStatistics(self): return _pysmile_impl.DIAG_network_GetTestStatistics(self)
    def GetFaults(self): return _pysmile_impl.DIAG_network_GetFaults(self)
    def CalculateRankedFaults(self, *args): return _pysmile_impl.DIAG_network_CalculateRankedFaults(self, *args)
    def SetEntropyCostRatio(self, *args): return _pysmile_impl.DIAG_network_SetEntropyCostRatio(self, *args)
    def GetEntropyCostRatio(self): return _pysmile_impl.DIAG_network_GetEntropyCostRatio(self)
    def GetMaxEntropyCostRatio(self): return _pysmile_impl.DIAG_network_GetMaxEntropyCostRatio(self)
    def ClearModel(self): return _pysmile_impl.DIAG_network_ClearModel(self)
    def InstantiateObservation(self, *args): return _pysmile_impl.DIAG_network_InstantiateObservation(self, *args)
    def ReleaseObservation(self, *args): return _pysmile_impl.DIAG_network_ReleaseObservation(self, *args)
    def SetPursuedFault(self, *args): return _pysmile_impl.DIAG_network_SetPursuedFault(self, *args)
    def GetPursuedFault(self): return _pysmile_impl.DIAG_network_GetPursuedFault(self)
    def SetPursuedFaults(self, *args): return _pysmile_impl.DIAG_network_SetPursuedFaults(self, *args)
    def AddPursuedFault(self, *args): return _pysmile_impl.DIAG_network_AddPursuedFault(self, *args)
    def DeletePursuedFault(self, *args): return _pysmile_impl.DIAG_network_DeletePursuedFault(self, *args)
    def GetPursuedFaults(self): return _pysmile_impl.DIAG_network_GetPursuedFaults(self)
    def SetDefaultStates(self): return _pysmile_impl.DIAG_network_SetDefaultStates(self)
    def FindMostLikelyFault(self): return _pysmile_impl.DIAG_network_FindMostLikelyFault(self)
    def GetHandles(self, *args): return _pysmile_impl.DIAG_network_GetHandles(self, *args)
    def CollectNetworkInfo(self): return _pysmile_impl.DIAG_network_CollectNetworkInfo(self)
    def MandatoriesInstantiated(self): return _pysmile_impl.DIAG_network_MandatoriesInstantiated(self)
    def FindFault(self, *args): return _pysmile_impl.DIAG_network_FindFault(self, *args)
    def SetNetwork(self, *args): return _pysmile_impl.DIAG_network_SetNetwork(self, *args)
DIAG_network_swigregister = _pysmile_impl.DIAG_network_swigregister
DIAG_network_swigregister(DIAG_network)

class DSL_nodeCost(DSL_object):
    __swig_setmethods__ = {}
    for _s in [DSL_object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_nodeCost, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_nodeCost, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_nodeCost(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_nodeCost
    __del__ = lambda self : None;
    def Network(self): return _pysmile_impl.DSL_nodeCost_Network(self)
    def SetNetwork(self, *args): return _pysmile_impl.DSL_nodeCost_SetNetwork(self, *args)
    def Handle(self): return _pysmile_impl.DSL_nodeCost_Handle(self)
    def SetNetworkAndHandle(self, *args): return _pysmile_impl.DSL_nodeCost_SetNetworkAndHandle(self, *args)
    def GetCosts(self): return _pysmile_impl.DSL_nodeCost_GetCosts(self)
    def GetSize(self): return _pysmile_impl.DSL_nodeCost_GetSize(self)
    def SetCosts(self, *args): return _pysmile_impl.DSL_nodeCost_SetCosts(self, *args)
    def SetCost(self, *args): return _pysmile_impl.DSL_nodeCost_SetCost(self, *args)
    def GetCost(self, *args): return _pysmile_impl.DSL_nodeCost_GetCost(self, *args)
    def AddParent(self, *args): return _pysmile_impl.DSL_nodeCost_AddParent(self, *args)
    def AbsorbEvidenceFromParent(self, *args): return _pysmile_impl.DSL_nodeCost_AbsorbEvidenceFromParent(self, *args)
    def MarginalizeParent(self, *args): return _pysmile_impl.DSL_nodeCost_MarginalizeParent(self, *args)
    def RemoveParent(self, *args): return _pysmile_impl.DSL_nodeCost_RemoveParent(self, *args)
    def DaddyGetsBigger(self, *args): return _pysmile_impl.DSL_nodeCost_DaddyGetsBigger(self, *args)
    def DaddyGetsSmaller(self, *args): return _pysmile_impl.DSL_nodeCost_DaddyGetsSmaller(self, *args)
    def BeforeDirectChange(self, changeType = 0): return _pysmile_impl.DSL_nodeCost_BeforeDirectChange(self, changeType)
    def AfterDirectChange(self, changeType = 0): return _pysmile_impl.DSL_nodeCost_AfterDirectChange(self, changeType)
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_nodeCost_CleanUp(self, deep)
    def CheckReadiness(self, deep = 0): return _pysmile_impl.DSL_nodeCost_CheckReadiness(self, deep)
    def Clone(self, *args): return _pysmile_impl.DSL_nodeCost_Clone(self, *args)
    def ReCreateFromNetworkStructure(self): return _pysmile_impl.DSL_nodeCost_ReCreateFromNetworkStructure(self)
    def CheckParentsStructure(self): return _pysmile_impl.DSL_nodeCost_CheckParentsStructure(self)
    def NormalizeExpectedCosts(self, *args): return _pysmile_impl.DSL_nodeCost_NormalizeExpectedCosts(self, *args)
    def GetMinimumCost(self): return _pysmile_impl.DSL_nodeCost_GetMinimumCost(self)
    def GetMaximumCost(self): return _pysmile_impl.DSL_nodeCost_GetMaximumCost(self)
    def DaddyChangedOrderOfOutcomes(self, *args): return _pysmile_impl.DSL_nodeCost_DaddyChangedOrderOfOutcomes(self, *args)
    def GetDefinition(self, *args): return _pysmile_impl.DSL_nodeCost_GetDefinition(self, *args)
    def SetDefinition(self, *args): return _pysmile_impl.DSL_nodeCost_SetDefinition(self, *args)
DSL_nodeCost_swigregister = _pysmile_impl.DSL_nodeCost_swigregister
DSL_nodeCost_swigregister(DSL_nodeCost)

class DSL_extraDefinition(DSL_object):
    __swig_setmethods__ = {}
    for _s in [DSL_object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_extraDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_extraDefinition, name)
    __repr__ = _swig_repr
    target = _pysmile_impl.DSL_extraDefinition_target
    observation = _pysmile_impl.DSL_extraDefinition_observation
    auxiliary = _pysmile_impl.DSL_extraDefinition_auxiliary
    userDefined = _pysmile_impl.DSL_extraDefinition_userDefined
    nodeName = _pysmile_impl.DSL_extraDefinition_nodeName
    stateName = _pysmile_impl.DSL_extraDefinition_stateName
    nodeAndStateName = _pysmile_impl.DSL_extraDefinition_nodeAndStateName
    inherit = _pysmile_impl.DSL_extraDefinition_inherit
    def GetType(self): return _pysmile_impl.DSL_extraDefinition_GetType(self)
    def IsRanked(self): return _pysmile_impl.DSL_extraDefinition_IsRanked(self)
    def IsMandatory(self): return _pysmile_impl.DSL_extraDefinition_IsMandatory(self)
    def IsSetToDefault(self): return _pysmile_impl.DSL_extraDefinition_IsSetToDefault(self)
    def SetType(self, *args): return _pysmile_impl.DSL_extraDefinition_SetType(self, *args)
    def SetFlags(self, setRanked = False, setMandatory = False, setSetToDefault = False): return _pysmile_impl.DSL_extraDefinition_SetFlags(self, setRanked, setMandatory, setSetToDefault)
    def SetShowAs(self, *args): return _pysmile_impl.DSL_extraDefinition_SetShowAs(self, *args)
    def GetShowAs(self): return _pysmile_impl.DSL_extraDefinition_GetShowAs(self)
    __swig_destroy__ = _pysmile_impl.delete_DSL_extraDefinition
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_extraDefinition(*args)
        try: self.this.append(this)
        except: self.this = this
    def FastCopy(self, *args): return _pysmile_impl.DSL_extraDefinition_FastCopy(self, *args)
    def Network(self): return _pysmile_impl.DSL_extraDefinition_Network(self)
    def SetNetwork(self, *args): return _pysmile_impl.DSL_extraDefinition_SetNetwork(self, *args)
    def Handle(self): return _pysmile_impl.DSL_extraDefinition_Handle(self)
    def SetNetworkAndHandle(self, *args): return _pysmile_impl.DSL_extraDefinition_SetNetworkAndHandle(self, *args)
    def GetDefaultOutcome(self): return _pysmile_impl.DSL_extraDefinition_GetDefaultOutcome(self)
    def SetDefaultOutcome(self, *args): return _pysmile_impl.DSL_extraDefinition_SetDefaultOutcome(self, *args)
    def SetFaultState(self, *args): return _pysmile_impl.DSL_extraDefinition_SetFaultState(self, *args)
    def IsFaultState(self, *args): return _pysmile_impl.DSL_extraDefinition_IsFaultState(self, *args)
    def SetFaultStates(self, *args): return _pysmile_impl.DSL_extraDefinition_SetFaultStates(self, *args)
    def NodeGetsBigger(self, *args): return _pysmile_impl.DSL_extraDefinition_NodeGetsBigger(self, *args)
    def NodeGetsSmaller(self, *args): return _pysmile_impl.DSL_extraDefinition_NodeGetsSmaller(self, *args)
    def NodeChangedOrderOfStates(self, *args): return _pysmile_impl.DSL_extraDefinition_NodeChangedOrderOfStates(self, *args)
    def CleanUp(self, deep = 0): return _pysmile_impl.DSL_extraDefinition_CleanUp(self, deep)
    def CheckReadiness(self, deep = 0): return _pysmile_impl.DSL_extraDefinition_CheckReadiness(self, deep)
    def Clone(self, *args): return _pysmile_impl.DSL_extraDefinition_Clone(self, *args)
    def ReCreateFromNetworkStructure(self): return _pysmile_impl.DSL_extraDefinition_ReCreateFromNetworkStructure(self)
    def GetFaultStates(self): return _pysmile_impl.DSL_extraDefinition_GetFaultStates(self)
    def GetDocumentation(self, *args): return _pysmile_impl.DSL_extraDefinition_GetDocumentation(self, *args)
    def GetStateDescription(self, *args): return _pysmile_impl.DSL_extraDefinition_GetStateDescription(self, *args)
    def GetStateRepairInfo(self, *args): return _pysmile_impl.DSL_extraDefinition_GetStateRepairInfo(self, *args)
    def SetStateDescription(self, *args): return _pysmile_impl.DSL_extraDefinition_SetStateDescription(self, *args)
    def SetStateRepairInfo(self, *args): return _pysmile_impl.DSL_extraDefinition_SetStateRepairInfo(self, *args)
    def GetStateDescriptions(self): return _pysmile_impl.DSL_extraDefinition_GetStateDescriptions(self)
    def GetFaultNames(self): return _pysmile_impl.DSL_extraDefinition_GetFaultNames(self)
    def GetFaultLabels(self): return _pysmile_impl.DSL_extraDefinition_GetFaultLabels(self)
    def GetStateRepairInfos(self): return _pysmile_impl.DSL_extraDefinition_GetStateRepairInfos(self)
    def GetQuestion(self): return _pysmile_impl.DSL_extraDefinition_GetQuestion(self)
    def SetLabel(self, *args): return _pysmile_impl.DSL_extraDefinition_SetLabel(self, *args)
    def SetLabels(self, *args): return _pysmile_impl.DSL_extraDefinition_SetLabels(self, *args)
    def GenerateUniqueLabel(self, *args): return _pysmile_impl.DSL_extraDefinition_GenerateUniqueLabel(self, *args)
    def IsLabelInUse(self, *args): return _pysmile_impl.DSL_extraDefinition_IsLabelInUse(self, *args)
    def GetEffectiveFaultName(self, *args): return _pysmile_impl.DSL_extraDefinition_GetEffectiveFaultName(self, *args)
    def SfoDef(self): return _pysmile_impl.DSL_extraDefinition_SfoDef(self)
    def HasSfoDef(self): return _pysmile_impl.DSL_extraDefinition_HasSfoDef(self)
DSL_extraDefinition_swigregister = _pysmile_impl.DSL_extraDefinition_swigregister
DSL_extraDefinition_swigregister(DSL_extraDefinition)

class DSL_case(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_case, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_case, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_case()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["title"] = _pysmile_impl.DSL_case_title_set
    __swig_getmethods__["title"] = _pysmile_impl.DSL_case_title_get
    if _newclass:title = _swig_property(_pysmile_impl.DSL_case_title_get, _pysmile_impl.DSL_case_title_set)
    __swig_setmethods__["comment"] = _pysmile_impl.DSL_case_comment_set
    __swig_getmethods__["comment"] = _pysmile_impl.DSL_case_comment_get
    if _newclass:comment = _swig_property(_pysmile_impl.DSL_case_comment_get, _pysmile_impl.DSL_case_comment_set)
    __swig_setmethods__["pursuedFaults"] = _pysmile_impl.DSL_case_pursuedFaults_set
    __swig_getmethods__["pursuedFaults"] = _pysmile_impl.DSL_case_pursuedFaults_get
    if _newclass:pursuedFaults = _swig_property(_pysmile_impl.DSL_case_pursuedFaults_get, _pysmile_impl.DSL_case_pursuedFaults_set)
    __swig_setmethods__["modelName"] = _pysmile_impl.DSL_case_modelName_set
    __swig_getmethods__["modelName"] = _pysmile_impl.DSL_case_modelName_get
    if _newclass:modelName = _swig_property(_pysmile_impl.DSL_case_modelName_get, _pysmile_impl.DSL_case_modelName_set)
    __swig_setmethods__["evidence"] = _pysmile_impl.DSL_case_evidence_set
    __swig_getmethods__["evidence"] = _pysmile_impl.DSL_case_evidence_get
    if _newclass:evidence = _swig_property(_pysmile_impl.DSL_case_evidence_get, _pysmile_impl.DSL_case_evidence_set)
    __swig_setmethods__["entropyCostRatio"] = _pysmile_impl.DSL_case_entropyCostRatio_set
    __swig_getmethods__["entropyCostRatio"] = _pysmile_impl.DSL_case_entropyCostRatio_get
    if _newclass:entropyCostRatio = _swig_property(_pysmile_impl.DSL_case_entropyCostRatio_get, _pysmile_impl.DSL_case_entropyCostRatio_set)
    __swig_setmethods__["maxEntropyCostRatio"] = _pysmile_impl.DSL_case_maxEntropyCostRatio_set
    __swig_getmethods__["maxEntropyCostRatio"] = _pysmile_impl.DSL_case_maxEntropyCostRatio_get
    if _newclass:maxEntropyCostRatio = _swig_property(_pysmile_impl.DSL_case_maxEntropyCostRatio_get, _pysmile_impl.DSL_case_maxEntropyCostRatio_set)
    __swig_destroy__ = _pysmile_impl.delete_DSL_case
    __del__ = lambda self : None;
DSL_case_swigregister = _pysmile_impl.DSL_case_swigregister
DSL_case_swigregister(DSL_case)

class DSL_caseLibrary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_caseLibrary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_caseLibrary, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_caseLibrary(*args)
        try: self.this.append(this)
        except: self.this = this
    def LinkTo(self, *args): return _pysmile_impl.DSL_caseLibrary_LinkTo(self, *args)
    def ReadCaseLibrary(self, *args): return _pysmile_impl.DSL_caseLibrary_ReadCaseLibrary(self, *args)
    def WriteCaseLibrary(self, *args): return _pysmile_impl.DSL_caseLibrary_WriteCaseLibrary(self, *args)
    def GetCases(self, *args): return _pysmile_impl.DSL_caseLibrary_GetCases(self, *args)
    def AddCase(self, *args): return _pysmile_impl.DSL_caseLibrary_AddCase(self, *args)
    def GetCase(self, *args): return _pysmile_impl.DSL_caseLibrary_GetCase(self, *args)
    def DeleteCase(self, *args): return _pysmile_impl.DSL_caseLibrary_DeleteCase(self, *args)
    def InstantiateCaseEvidence(self, *args): return _pysmile_impl.DSL_caseLibrary_InstantiateCaseEvidence(self, *args)
    def FillCaseWithEvidence(self, *args): return _pysmile_impl.DSL_caseLibrary_FillCaseWithEvidence(self, *args)
    def FillCaseWithPursuedFaults(self, *args): return _pysmile_impl.DSL_caseLibrary_FillCaseWithPursuedFaults(self, *args)
    def EvidenceValid(self, *args): return _pysmile_impl.DSL_caseLibrary_EvidenceValid(self, *args)
    def FaultValid(self, *args): return _pysmile_impl.DSL_caseLibrary_FaultValid(self, *args)
    def FindCase(self, *args): return _pysmile_impl.DSL_caseLibrary_FindCase(self, *args)
    def SaveCurrentCase(self, *args): return _pysmile_impl.DSL_caseLibrary_SaveCurrentCase(self, *args)
    def InstantiateCase(self, *args): return _pysmile_impl.DSL_caseLibrary_InstantiateCase(self, *args)
    def ConsistentCase(self, *args): return _pysmile_impl.DSL_caseLibrary_ConsistentCase(self, *args)
    __swig_destroy__ = _pysmile_impl.delete_DSL_caseLibrary
    __del__ = lambda self : None;
DSL_caseLibrary_swigregister = _pysmile_impl.DSL_caseLibrary_swigregister
DSL_caseLibrary_swigregister(DSL_caseLibrary)

DSL_MISSING_INT = _pysmile_impl.DSL_MISSING_INT
class DSL_datasetVarInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_datasetVarInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_datasetVarInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_datasetVarInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["discrete"] = _pysmile_impl.DSL_datasetVarInfo_discrete_set
    __swig_getmethods__["discrete"] = _pysmile_impl.DSL_datasetVarInfo_discrete_get
    if _newclass:discrete = _swig_property(_pysmile_impl.DSL_datasetVarInfo_discrete_get, _pysmile_impl.DSL_datasetVarInfo_discrete_set)
    __swig_setmethods__["id"] = _pysmile_impl.DSL_datasetVarInfo_id_set
    __swig_getmethods__["id"] = _pysmile_impl.DSL_datasetVarInfo_id_get
    if _newclass:id = _swig_property(_pysmile_impl.DSL_datasetVarInfo_id_get, _pysmile_impl.DSL_datasetVarInfo_id_set)
    __swig_setmethods__["missingInt"] = _pysmile_impl.DSL_datasetVarInfo_missingInt_set
    __swig_getmethods__["missingInt"] = _pysmile_impl.DSL_datasetVarInfo_missingInt_get
    if _newclass:missingInt = _swig_property(_pysmile_impl.DSL_datasetVarInfo_missingInt_get, _pysmile_impl.DSL_datasetVarInfo_missingInt_set)
    __swig_setmethods__["missingFloat"] = _pysmile_impl.DSL_datasetVarInfo_missingFloat_set
    __swig_getmethods__["missingFloat"] = _pysmile_impl.DSL_datasetVarInfo_missingFloat_get
    if _newclass:missingFloat = _swig_property(_pysmile_impl.DSL_datasetVarInfo_missingFloat_get, _pysmile_impl.DSL_datasetVarInfo_missingFloat_set)
    __swig_setmethods__["stateNames"] = _pysmile_impl.DSL_datasetVarInfo_stateNames_set
    __swig_getmethods__["stateNames"] = _pysmile_impl.DSL_datasetVarInfo_stateNames_get
    if _newclass:stateNames = _swig_property(_pysmile_impl.DSL_datasetVarInfo_stateNames_get, _pysmile_impl.DSL_datasetVarInfo_stateNames_set)
    __swig_destroy__ = _pysmile_impl.delete_DSL_datasetVarInfo
    __del__ = lambda self : None;
DSL_datasetVarInfo_swigregister = _pysmile_impl.DSL_datasetVarInfo_swigregister
DSL_datasetVarInfo_swigregister(DSL_datasetVarInfo)

class DSL_datasetParseParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_datasetParseParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_datasetParseParams, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_datasetParseParams()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["missingValueToken"] = _pysmile_impl.DSL_datasetParseParams_missingValueToken_set
    __swig_getmethods__["missingValueToken"] = _pysmile_impl.DSL_datasetParseParams_missingValueToken_get
    if _newclass:missingValueToken = _swig_property(_pysmile_impl.DSL_datasetParseParams_missingValueToken_get, _pysmile_impl.DSL_datasetParseParams_missingValueToken_set)
    __swig_setmethods__["missingInt"] = _pysmile_impl.DSL_datasetParseParams_missingInt_set
    __swig_getmethods__["missingInt"] = _pysmile_impl.DSL_datasetParseParams_missingInt_get
    if _newclass:missingInt = _swig_property(_pysmile_impl.DSL_datasetParseParams_missingInt_get, _pysmile_impl.DSL_datasetParseParams_missingInt_set)
    __swig_setmethods__["missingFloat"] = _pysmile_impl.DSL_datasetParseParams_missingFloat_set
    __swig_getmethods__["missingFloat"] = _pysmile_impl.DSL_datasetParseParams_missingFloat_get
    if _newclass:missingFloat = _swig_property(_pysmile_impl.DSL_datasetParseParams_missingFloat_get, _pysmile_impl.DSL_datasetParseParams_missingFloat_set)
    __swig_setmethods__["columnIdsPresent"] = _pysmile_impl.DSL_datasetParseParams_columnIdsPresent_set
    __swig_getmethods__["columnIdsPresent"] = _pysmile_impl.DSL_datasetParseParams_columnIdsPresent_get
    if _newclass:columnIdsPresent = _swig_property(_pysmile_impl.DSL_datasetParseParams_columnIdsPresent_get, _pysmile_impl.DSL_datasetParseParams_columnIdsPresent_set)
    __swig_destroy__ = _pysmile_impl.delete_DSL_datasetParseParams
    __del__ = lambda self : None;
DSL_datasetParseParams_swigregister = _pysmile_impl.DSL_datasetParseParams_swigregister
DSL_datasetParseParams_swigregister(DSL_datasetParseParams)

class DSL_datasetWriteParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_datasetWriteParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_datasetWriteParams, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_datasetWriteParams()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["missingValueToken"] = _pysmile_impl.DSL_datasetWriteParams_missingValueToken_set
    __swig_getmethods__["missingValueToken"] = _pysmile_impl.DSL_datasetWriteParams_missingValueToken_get
    if _newclass:missingValueToken = _swig_property(_pysmile_impl.DSL_datasetWriteParams_missingValueToken_get, _pysmile_impl.DSL_datasetWriteParams_missingValueToken_set)
    __swig_setmethods__["columnIdsPresent"] = _pysmile_impl.DSL_datasetWriteParams_columnIdsPresent_set
    __swig_getmethods__["columnIdsPresent"] = _pysmile_impl.DSL_datasetWriteParams_columnIdsPresent_get
    if _newclass:columnIdsPresent = _swig_property(_pysmile_impl.DSL_datasetWriteParams_columnIdsPresent_get, _pysmile_impl.DSL_datasetWriteParams_columnIdsPresent_set)
    __swig_setmethods__["useStateIndices"] = _pysmile_impl.DSL_datasetWriteParams_useStateIndices_set
    __swig_getmethods__["useStateIndices"] = _pysmile_impl.DSL_datasetWriteParams_useStateIndices_get
    if _newclass:useStateIndices = _swig_property(_pysmile_impl.DSL_datasetWriteParams_useStateIndices_get, _pysmile_impl.DSL_datasetWriteParams_useStateIndices_set)
    __swig_setmethods__["separator"] = _pysmile_impl.DSL_datasetWriteParams_separator_set
    __swig_getmethods__["separator"] = _pysmile_impl.DSL_datasetWriteParams_separator_get
    if _newclass:separator = _swig_property(_pysmile_impl.DSL_datasetWriteParams_separator_get, _pysmile_impl.DSL_datasetWriteParams_separator_set)
    __swig_setmethods__["floatFormat"] = _pysmile_impl.DSL_datasetWriteParams_floatFormat_set
    __swig_getmethods__["floatFormat"] = _pysmile_impl.DSL_datasetWriteParams_floatFormat_get
    if _newclass:floatFormat = _swig_property(_pysmile_impl.DSL_datasetWriteParams_floatFormat_get, _pysmile_impl.DSL_datasetWriteParams_floatFormat_set)
    __swig_destroy__ = _pysmile_impl.delete_DSL_datasetWriteParams
    __del__ = lambda self : None;
DSL_datasetWriteParams_swigregister = _pysmile_impl.DSL_datasetWriteParams_swigregister
DSL_datasetWriteParams_swigregister(DSL_datasetWriteParams)

class DSL_datasetMatch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_datasetMatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_datasetMatch, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_datasetMatch()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["node"] = _pysmile_impl.DSL_datasetMatch_node_set
    __swig_getmethods__["node"] = _pysmile_impl.DSL_datasetMatch_node_get
    if _newclass:node = _swig_property(_pysmile_impl.DSL_datasetMatch_node_get, _pysmile_impl.DSL_datasetMatch_node_set)
    __swig_setmethods__["slice"] = _pysmile_impl.DSL_datasetMatch_slice_set
    __swig_getmethods__["slice"] = _pysmile_impl.DSL_datasetMatch_slice_get
    if _newclass:slice = _swig_property(_pysmile_impl.DSL_datasetMatch_slice_get, _pysmile_impl.DSL_datasetMatch_slice_set)
    __swig_setmethods__["column"] = _pysmile_impl.DSL_datasetMatch_column_set
    __swig_getmethods__["column"] = _pysmile_impl.DSL_datasetMatch_column_get
    if _newclass:column = _swig_property(_pysmile_impl.DSL_datasetMatch_column_get, _pysmile_impl.DSL_datasetMatch_column_set)
    __swig_destroy__ = _pysmile_impl.delete_DSL_datasetMatch
    __del__ = lambda self : None;
DSL_datasetMatch_swigregister = _pysmile_impl.DSL_datasetMatch_swigregister
DSL_datasetMatch_swigregister(DSL_datasetMatch)

class DSL_dataset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_dataset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_dataset, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_dataset(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_dataset
    __del__ = lambda self : None;
    def ReadFile(self, *args): return _pysmile_impl.DSL_dataset_ReadFile(self, *args)
    def WriteFile(self, *args): return _pysmile_impl.DSL_dataset_WriteFile(self, *args)
    def MatchNetwork(self, *args): return _pysmile_impl.DSL_dataset_MatchNetwork(self, *args)
    def AddIntVar(self, *args): return _pysmile_impl.DSL_dataset_AddIntVar(self, *args)
    def AddFloatVar(self, *args): return _pysmile_impl.DSL_dataset_AddFloatVar(self, *args)
    def RemoveVar(self, *args): return _pysmile_impl.DSL_dataset_RemoveVar(self, *args)
    def AddEmptyRecord(self): return _pysmile_impl.DSL_dataset_AddEmptyRecord(self)
    def SetNumberOfRecords(self, *args): return _pysmile_impl.DSL_dataset_SetNumberOfRecords(self, *args)
    def RemoveRecord(self, *args): return _pysmile_impl.DSL_dataset_RemoveRecord(self, *args)
    def FindVariable(self, *args): return _pysmile_impl.DSL_dataset_FindVariable(self, *args)
    def GetNumberOfVariables(self): return _pysmile_impl.DSL_dataset_GetNumberOfVariables(self)
    def GetNumberOfRecords(self): return _pysmile_impl.DSL_dataset_GetNumberOfRecords(self)
    def ApplyFilter(self, *args): return _pysmile_impl.DSL_dataset_ApplyFilter(self, *args)
    def ClearFilter(self): return _pysmile_impl.DSL_dataset_ClearFilter(self)
    def GetInt(self, *args): return _pysmile_impl.DSL_dataset_GetInt(self, *args)
    def GetFloat(self, *args): return _pysmile_impl.DSL_dataset_GetFloat(self, *args)
    def SetInt(self, *args): return _pysmile_impl.DSL_dataset_SetInt(self, *args)
    def SetFloat(self, *args): return _pysmile_impl.DSL_dataset_SetFloat(self, *args)
    def SetMissing(self, *args): return _pysmile_impl.DSL_dataset_SetMissing(self, *args)
    def GetMissingInt(self, *args): return _pysmile_impl.DSL_dataset_GetMissingInt(self, *args)
    def GetMissingFloat(self, *args): return _pysmile_impl.DSL_dataset_GetMissingFloat(self, *args)
    def IsMissing(self, *args): return _pysmile_impl.DSL_dataset_IsMissing(self, *args)
    def IsDiscrete(self, *args): return _pysmile_impl.DSL_dataset_IsDiscrete(self, *args)
    def GetIntData(self, *args): return _pysmile_impl.DSL_dataset_GetIntData(self, *args)
    def GetFloatData(self, *args): return _pysmile_impl.DSL_dataset_GetFloatData(self, *args)
    def GetVariableInfo(self, *args): return _pysmile_impl.DSL_dataset_GetVariableInfo(self, *args)
    def GetId(self, *args): return _pysmile_impl.DSL_dataset_GetId(self, *args)
    def SetId(self, *args): return _pysmile_impl.DSL_dataset_SetId(self, *args)
    def GetStateNames(self, *args): return _pysmile_impl.DSL_dataset_GetStateNames(self, *args)
    def SetStateNames(self, *args): return _pysmile_impl.DSL_dataset_SetStateNames(self, *args)
    def GetMinMaxInt(self, *args): return _pysmile_impl.DSL_dataset_GetMinMaxInt(self, *args)
    def GetMinMaxFloat(self, *args): return _pysmile_impl.DSL_dataset_GetMinMaxFloat(self, *args)
    def Get(self, *args): return _pysmile_impl.DSL_dataset_Get(self, *args)
    def HasMissingData(self, *args): return _pysmile_impl.DSL_dataset_HasMissingData(self, *args)
    def IsConstant(self, *args): return _pysmile_impl.DSL_dataset_IsConstant(self, *args)
    Hierarchical = _pysmile_impl.DSL_dataset_Hierarchical
    UniformWidth = _pysmile_impl.DSL_dataset_UniformWidth
    UniformCount = _pysmile_impl.DSL_dataset_UniformCount
    def Discretize(self, *args): return _pysmile_impl.DSL_dataset_Discretize(self, *args)
    def MatchNetworkSimple(self, *args): return _pysmile_impl.DSL_dataset_MatchNetworkSimple(self, *args)
DSL_dataset_swigregister = _pysmile_impl.DSL_dataset_swigregister
DSL_dataset_swigregister(DSL_dataset)

class DSL_discretizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_discretizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_discretizer, name)
    __repr__ = _swig_repr
    Hierarchical = _pysmile_impl.DSL_discretizer_Hierarchical
    UniformWidth = _pysmile_impl.DSL_discretizer_UniformWidth
    UniformCount = _pysmile_impl.DSL_discretizer_UniformCount
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_discretizer(*args)
        try: self.this.append(this)
        except: self.this = this
    def Discretize(self, *args): return _pysmile_impl.DSL_discretizer_Discretize(self, *args)
    __swig_destroy__ = _pysmile_impl.delete_DSL_discretizer
    __del__ = lambda self : None;
DSL_discretizer_swigregister = _pysmile_impl.DSL_discretizer_swigregister
DSL_discretizer_swigregister(DSL_discretizer)

class DSL_naiveBayes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_naiveBayes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_naiveBayes, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_naiveBayes()
        try: self.this.append(this)
        except: self.this = this
    def Learn(self, *args): return _pysmile_impl.DSL_naiveBayes_Learn(self, *args)
    K2 = _pysmile_impl.DSL_naiveBayes_K2
    BDeu = _pysmile_impl.DSL_naiveBayes_BDeu
    __swig_setmethods__["priors"] = _pysmile_impl.DSL_naiveBayes_priors_set
    __swig_getmethods__["priors"] = _pysmile_impl.DSL_naiveBayes_priors_get
    if _newclass:priors = _swig_property(_pysmile_impl.DSL_naiveBayes_priors_get, _pysmile_impl.DSL_naiveBayes_priors_set)
    __swig_setmethods__["featureSelection"] = _pysmile_impl.DSL_naiveBayes_featureSelection_set
    __swig_getmethods__["featureSelection"] = _pysmile_impl.DSL_naiveBayes_featureSelection_get
    if _newclass:featureSelection = _swig_property(_pysmile_impl.DSL_naiveBayes_featureSelection_get, _pysmile_impl.DSL_naiveBayes_featureSelection_set)
    __swig_setmethods__["classVariableId"] = _pysmile_impl.DSL_naiveBayes_classVariableId_set
    __swig_getmethods__["classVariableId"] = _pysmile_impl.DSL_naiveBayes_classVariableId_get
    if _newclass:classVariableId = _swig_property(_pysmile_impl.DSL_naiveBayes_classVariableId_get, _pysmile_impl.DSL_naiveBayes_classVariableId_set)
    __swig_setmethods__["netWeight"] = _pysmile_impl.DSL_naiveBayes_netWeight_set
    __swig_getmethods__["netWeight"] = _pysmile_impl.DSL_naiveBayes_netWeight_get
    if _newclass:netWeight = _swig_property(_pysmile_impl.DSL_naiveBayes_netWeight_get, _pysmile_impl.DSL_naiveBayes_netWeight_set)
    __swig_destroy__ = _pysmile_impl.delete_DSL_naiveBayes
    __del__ = lambda self : None;
DSL_naiveBayes_swigregister = _pysmile_impl.DSL_naiveBayes_swigregister
DSL_naiveBayes_swigregister(DSL_naiveBayes)

class DSL_greedyThickThinning(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_greedyThickThinning, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_greedyThickThinning, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_greedyThickThinning()
        try: self.this.append(this)
        except: self.this = this
    def Learn(self, *args): return _pysmile_impl.DSL_greedyThickThinning_Learn(self, *args)
    K2 = _pysmile_impl.DSL_greedyThickThinning_K2
    BDeu = _pysmile_impl.DSL_greedyThickThinning_BDeu
    __swig_setmethods__["priors"] = _pysmile_impl.DSL_greedyThickThinning_priors_set
    __swig_getmethods__["priors"] = _pysmile_impl.DSL_greedyThickThinning_priors_get
    if _newclass:priors = _swig_property(_pysmile_impl.DSL_greedyThickThinning_priors_get, _pysmile_impl.DSL_greedyThickThinning_priors_set)
    __swig_setmethods__["maxParents"] = _pysmile_impl.DSL_greedyThickThinning_maxParents_set
    __swig_getmethods__["maxParents"] = _pysmile_impl.DSL_greedyThickThinning_maxParents_get
    if _newclass:maxParents = _swig_property(_pysmile_impl.DSL_greedyThickThinning_maxParents_get, _pysmile_impl.DSL_greedyThickThinning_maxParents_set)
    __swig_setmethods__["netWeight"] = _pysmile_impl.DSL_greedyThickThinning_netWeight_set
    __swig_getmethods__["netWeight"] = _pysmile_impl.DSL_greedyThickThinning_netWeight_get
    if _newclass:netWeight = _swig_property(_pysmile_impl.DSL_greedyThickThinning_netWeight_get, _pysmile_impl.DSL_greedyThickThinning_netWeight_set)
    __swig_setmethods__["bkk"] = _pysmile_impl.DSL_greedyThickThinning_bkk_set
    __swig_getmethods__["bkk"] = _pysmile_impl.DSL_greedyThickThinning_bkk_get
    if _newclass:bkk = _swig_property(_pysmile_impl.DSL_greedyThickThinning_bkk_get, _pysmile_impl.DSL_greedyThickThinning_bkk_set)
    __swig_destroy__ = _pysmile_impl.delete_DSL_greedyThickThinning
    __del__ = lambda self : None;
DSL_greedyThickThinning_swigregister = _pysmile_impl.DSL_greedyThickThinning_swigregister
DSL_greedyThickThinning_swigregister(DSL_greedyThickThinning)

class DSL_essentialSearch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_essentialSearch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_essentialSearch, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_essentialSearch()
        try: self.this.append(this)
        except: self.this = this
    def Learn(self, *args): return _pysmile_impl.DSL_essentialSearch_Learn(self, *args)
    __swig_setmethods__["maxAdjacency"] = _pysmile_impl.DSL_essentialSearch_maxAdjacency_set
    __swig_getmethods__["maxAdjacency"] = _pysmile_impl.DSL_essentialSearch_maxAdjacency_get
    if _newclass:maxAdjacency = _swig_property(_pysmile_impl.DSL_essentialSearch_maxAdjacency_get, _pysmile_impl.DSL_essentialSearch_maxAdjacency_set)
    __swig_setmethods__["restarts"] = _pysmile_impl.DSL_essentialSearch_restarts_set
    __swig_getmethods__["restarts"] = _pysmile_impl.DSL_essentialSearch_restarts_get
    if _newclass:restarts = _swig_property(_pysmile_impl.DSL_essentialSearch_restarts_get, _pysmile_impl.DSL_essentialSearch_restarts_set)
    __swig_setmethods__["maxSearchTime"] = _pysmile_impl.DSL_essentialSearch_maxSearchTime_set
    __swig_getmethods__["maxSearchTime"] = _pysmile_impl.DSL_essentialSearch_maxSearchTime_get
    if _newclass:maxSearchTime = _swig_property(_pysmile_impl.DSL_essentialSearch_maxSearchTime_get, _pysmile_impl.DSL_essentialSearch_maxSearchTime_set)
    __swig_setmethods__["minSignificance"] = _pysmile_impl.DSL_essentialSearch_minSignificance_set
    __swig_getmethods__["minSignificance"] = _pysmile_impl.DSL_essentialSearch_minSignificance_get
    if _newclass:minSignificance = _swig_property(_pysmile_impl.DSL_essentialSearch_minSignificance_get, _pysmile_impl.DSL_essentialSearch_minSignificance_set)
    __swig_setmethods__["maxSignificance"] = _pysmile_impl.DSL_essentialSearch_maxSignificance_set
    __swig_getmethods__["maxSignificance"] = _pysmile_impl.DSL_essentialSearch_maxSignificance_get
    if _newclass:maxSignificance = _swig_property(_pysmile_impl.DSL_essentialSearch_maxSignificance_get, _pysmile_impl.DSL_essentialSearch_maxSignificance_set)
    __swig_setmethods__["bkk"] = _pysmile_impl.DSL_essentialSearch_bkk_set
    __swig_getmethods__["bkk"] = _pysmile_impl.DSL_essentialSearch_bkk_get
    if _newclass:bkk = _swig_property(_pysmile_impl.DSL_essentialSearch_bkk_get, _pysmile_impl.DSL_essentialSearch_bkk_set)
    __swig_destroy__ = _pysmile_impl.delete_DSL_essentialSearch
    __del__ = lambda self : None;
DSL_essentialSearch_swigregister = _pysmile_impl.DSL_essentialSearch_swigregister
DSL_essentialSearch_swigregister(DSL_essentialSearch)

class DSL_bsEvaluator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_bsEvaluator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_bsEvaluator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Evaluate(self, *args): return _pysmile_impl.DSL_bsEvaluator_Evaluate(self, *args)
    __swig_destroy__ = _pysmile_impl.delete_DSL_bsEvaluator
    __del__ = lambda self : None;
DSL_bsEvaluator_swigregister = _pysmile_impl.DSL_bsEvaluator_swigregister
DSL_bsEvaluator_swigregister(DSL_bsEvaluator)

class DSL_bs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_bs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_bs, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_bs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_bs
    __del__ = lambda self : None;
    def Learn(self, *args): return _pysmile_impl.DSL_bs_Learn(self, *args)
    __swig_setmethods__["maxParents"] = _pysmile_impl.DSL_bs_maxParents_set
    __swig_getmethods__["maxParents"] = _pysmile_impl.DSL_bs_maxParents_get
    if _newclass:maxParents = _swig_property(_pysmile_impl.DSL_bs_maxParents_get, _pysmile_impl.DSL_bs_maxParents_set)
    __swig_setmethods__["maxSearchTime"] = _pysmile_impl.DSL_bs_maxSearchTime_set
    __swig_getmethods__["maxSearchTime"] = _pysmile_impl.DSL_bs_maxSearchTime_get
    if _newclass:maxSearchTime = _swig_property(_pysmile_impl.DSL_bs_maxSearchTime_get, _pysmile_impl.DSL_bs_maxSearchTime_set)
    __swig_setmethods__["nrIteration"] = _pysmile_impl.DSL_bs_nrIteration_set
    __swig_getmethods__["nrIteration"] = _pysmile_impl.DSL_bs_nrIteration_get
    if _newclass:nrIteration = _swig_property(_pysmile_impl.DSL_bs_nrIteration_get, _pysmile_impl.DSL_bs_nrIteration_set)
    __swig_setmethods__["linkProbability"] = _pysmile_impl.DSL_bs_linkProbability_set
    __swig_getmethods__["linkProbability"] = _pysmile_impl.DSL_bs_linkProbability_get
    if _newclass:linkProbability = _swig_property(_pysmile_impl.DSL_bs_linkProbability_get, _pysmile_impl.DSL_bs_linkProbability_set)
    __swig_setmethods__["priorLinkProbability"] = _pysmile_impl.DSL_bs_priorLinkProbability_set
    __swig_getmethods__["priorLinkProbability"] = _pysmile_impl.DSL_bs_priorLinkProbability_get
    if _newclass:priorLinkProbability = _swig_property(_pysmile_impl.DSL_bs_priorLinkProbability_get, _pysmile_impl.DSL_bs_priorLinkProbability_set)
    __swig_setmethods__["priorSampleSize"] = _pysmile_impl.DSL_bs_priorSampleSize_set
    __swig_getmethods__["priorSampleSize"] = _pysmile_impl.DSL_bs_priorSampleSize_get
    if _newclass:priorSampleSize = _swig_property(_pysmile_impl.DSL_bs_priorSampleSize_get, _pysmile_impl.DSL_bs_priorSampleSize_set)
    __swig_setmethods__["seed"] = _pysmile_impl.DSL_bs_seed_set
    __swig_getmethods__["seed"] = _pysmile_impl.DSL_bs_seed_get
    if _newclass:seed = _swig_property(_pysmile_impl.DSL_bs_seed_get, _pysmile_impl.DSL_bs_seed_set)
    __swig_setmethods__["ThickThinning"] = _pysmile_impl.DSL_bs_ThickThinning_set
    __swig_getmethods__["ThickThinning"] = _pysmile_impl.DSL_bs_ThickThinning_get
    if _newclass:ThickThinning = _swig_property(_pysmile_impl.DSL_bs_ThickThinning_get, _pysmile_impl.DSL_bs_ThickThinning_set)
    __swig_setmethods__["bkk"] = _pysmile_impl.DSL_bs_bkk_set
    __swig_getmethods__["bkk"] = _pysmile_impl.DSL_bs_bkk_get
    if _newclass:bkk = _swig_property(_pysmile_impl.DSL_bs_bkk_get, _pysmile_impl.DSL_bs_bkk_set)
DSL_bs_swigregister = _pysmile_impl.DSL_bs_swigregister
DSL_bs_swigregister(DSL_bs)

class DSL_tan(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_tan, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_tan, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_tan()
        try: self.this.append(this)
        except: self.this = this
    def Learn(self, *args): return _pysmile_impl.DSL_tan_Learn(self, *args)
    __swig_setmethods__["classvar"] = _pysmile_impl.DSL_tan_classvar_set
    __swig_getmethods__["classvar"] = _pysmile_impl.DSL_tan_classvar_get
    if _newclass:classvar = _swig_property(_pysmile_impl.DSL_tan_classvar_get, _pysmile_impl.DSL_tan_classvar_set)
    __swig_setmethods__["maxSearchTime"] = _pysmile_impl.DSL_tan_maxSearchTime_set
    __swig_getmethods__["maxSearchTime"] = _pysmile_impl.DSL_tan_maxSearchTime_get
    if _newclass:maxSearchTime = _swig_property(_pysmile_impl.DSL_tan_maxSearchTime_get, _pysmile_impl.DSL_tan_maxSearchTime_set)
    __swig_setmethods__["seed"] = _pysmile_impl.DSL_tan_seed_set
    __swig_getmethods__["seed"] = _pysmile_impl.DSL_tan_seed_get
    if _newclass:seed = _swig_property(_pysmile_impl.DSL_tan_seed_get, _pysmile_impl.DSL_tan_seed_set)
    __swig_destroy__ = _pysmile_impl.delete_DSL_tan
    __del__ = lambda self : None;
DSL_tan_swigregister = _pysmile_impl.DSL_tan_swigregister
DSL_tan_swigregister(DSL_tan)

class DSL_pc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_pc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_pc, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_pc()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["maxAdjacency"] = _pysmile_impl.DSL_pc_maxAdjacency_set
    __swig_getmethods__["maxAdjacency"] = _pysmile_impl.DSL_pc_maxAdjacency_get
    if _newclass:maxAdjacency = _swig_property(_pysmile_impl.DSL_pc_maxAdjacency_get, _pysmile_impl.DSL_pc_maxAdjacency_set)
    __swig_setmethods__["maxSearchTime"] = _pysmile_impl.DSL_pc_maxSearchTime_set
    __swig_getmethods__["maxSearchTime"] = _pysmile_impl.DSL_pc_maxSearchTime_get
    if _newclass:maxSearchTime = _swig_property(_pysmile_impl.DSL_pc_maxSearchTime_get, _pysmile_impl.DSL_pc_maxSearchTime_set)
    __swig_setmethods__["significance"] = _pysmile_impl.DSL_pc_significance_set
    __swig_getmethods__["significance"] = _pysmile_impl.DSL_pc_significance_get
    if _newclass:significance = _swig_property(_pysmile_impl.DSL_pc_significance_get, _pysmile_impl.DSL_pc_significance_set)
    __swig_setmethods__["bkk"] = _pysmile_impl.DSL_pc_bkk_set
    __swig_getmethods__["bkk"] = _pysmile_impl.DSL_pc_bkk_get
    if _newclass:bkk = _swig_property(_pysmile_impl.DSL_pc_bkk_get, _pysmile_impl.DSL_pc_bkk_set)
    def Learn(self, *args): return _pysmile_impl.DSL_pc_Learn(self, *args)
    def Dbcml(self, *args): return _pysmile_impl.DSL_pc_Dbcml(self, *args)
    def DbcmlPc(self, *args): return _pysmile_impl.DSL_pc_DbcmlPc(self, *args)
    def Idx(self, *args): return _pysmile_impl.DSL_pc_Idx(self, *args)
    __swig_setmethods__["nc"] = _pysmile_impl.DSL_pc_nc_set
    __swig_getmethods__["nc"] = _pysmile_impl.DSL_pc_nc_get
    if _newclass:nc = _swig_property(_pysmile_impl.DSL_pc_nc_get, _pysmile_impl.DSL_pc_nc_set)
    __swig_destroy__ = _pysmile_impl.delete_DSL_pc
    __del__ = lambda self : None;
DSL_pc_swigregister = _pysmile_impl.DSL_pc_swigregister
DSL_pc_swigregister(DSL_pc)

class DSL_em(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_em, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_em, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_em()
        try: self.this.append(this)
        except: self.this = this
    def Learn(self, *args): return _pysmile_impl.DSL_em_Learn(self, *args)
    def SetEquivalentSampleSize(self, *args): return _pysmile_impl.DSL_em_SetEquivalentSampleSize(self, *args)
    def GetEquivalentSampleSize(self): return _pysmile_impl.DSL_em_GetEquivalentSampleSize(self)
    def SetRandomizeParameters(self, *args): return _pysmile_impl.DSL_em_SetRandomizeParameters(self, *args)
    def GetRandomizeParameters(self): return _pysmile_impl.DSL_em_GetRandomizeParameters(self)
    def GetSeed(self): return _pysmile_impl.DSL_em_GetSeed(self)
    def SetSeed(self, *args): return _pysmile_impl.DSL_em_SetSeed(self, *args)
    def SetRelevance(self, *args): return _pysmile_impl.DSL_em_SetRelevance(self, *args)
    def GetRelevance(self): return _pysmile_impl.DSL_em_GetRelevance(self)
    def SetUniformizeParameters(self, *args): return _pysmile_impl.DSL_em_SetUniformizeParameters(self, *args)
    def GetUniformizeParameters(self): return _pysmile_impl.DSL_em_GetUniformizeParameters(self)
    __swig_destroy__ = _pysmile_impl.delete_DSL_em
    __del__ = lambda self : None;
DSL_em_swigregister = _pysmile_impl.DSL_em_swigregister
DSL_em_swigregister(DSL_em)

class DSL_validator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_validator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_validator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_validator(*args)
        try: self.this.append(this)
        except: self.this = this
    def AddClassNode(self, *args): return _pysmile_impl.DSL_validator_AddClassNode(self, *args)
    def Test(self, progress = None): return _pysmile_impl.DSL_validator_Test(self, progress)
    def KFold(self, *args): return _pysmile_impl.DSL_validator_KFold(self, *args)
    def LeaveOneOut(self, *args): return _pysmile_impl.DSL_validator_LeaveOneOut(self, *args)
    def GetPosteriors(self, *args): return _pysmile_impl.DSL_validator_GetPosteriors(self, *args)
    def GetAccuracy(self, *args): return _pysmile_impl.DSL_validator_GetAccuracy(self, *args)
    def GetConfusionMatrix(self, *args): return _pysmile_impl.DSL_validator_GetConfusionMatrix(self, *args)
    def GetPredictedOutcome(self, *args): return _pysmile_impl.DSL_validator_GetPredictedOutcome(self, *args)
    def GetPredictedNode(self, *args): return _pysmile_impl.DSL_validator_GetPredictedNode(self, *args)
    def GetPredictedNodeIndex(self, *args): return _pysmile_impl.DSL_validator_GetPredictedNodeIndex(self, *args)
    def GetFoldIndex(self, *args): return _pysmile_impl.DSL_validator_GetFoldIndex(self, *args)
    def GetResultDataset(self, *args): return _pysmile_impl.DSL_validator_GetResultDataset(self, *args)
    __swig_destroy__ = _pysmile_impl.delete_DSL_validator
    __del__ = lambda self : None;
DSL_validator_swigregister = _pysmile_impl.DSL_validator_swigregister
DSL_validator_swigregister(DSL_validator)

class DSL_dataGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_dataGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_dataGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_dataGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_dataGenerator
    __del__ = lambda self : None;
    def GenerateData(self, *args): return _pysmile_impl.DSL_dataGenerator_GenerateData(self, *args)
    def GetNumberOfRecords(self): return _pysmile_impl.DSL_dataGenerator_GetNumberOfRecords(self)
    def SetNumberOfRecords(self, *args): return _pysmile_impl.DSL_dataGenerator_SetNumberOfRecords(self, *args)
    def GetRandSeed(self): return _pysmile_impl.DSL_dataGenerator_GetRandSeed(self)
    def SetRandSeed(self, *args): return _pysmile_impl.DSL_dataGenerator_SetRandSeed(self, *args)
    def GetMissingValuePercent(self): return _pysmile_impl.DSL_dataGenerator_GetMissingValuePercent(self)
    def SetMissingValuePercent(self, *args): return _pysmile_impl.DSL_dataGenerator_SetMissingValuePercent(self, *args)
    def GetBiasSamplesByEvidence(self): return _pysmile_impl.DSL_dataGenerator_GetBiasSamplesByEvidence(self)
    def SetBiasSamplesByEvidence(self, *args): return _pysmile_impl.DSL_dataGenerator_SetBiasSamplesByEvidence(self, *args)
    def GetSelectedNodes(self): return _pysmile_impl.DSL_dataGenerator_GetSelectedNodes(self)
    def SetSelectedNodes(self, *args): return _pysmile_impl.DSL_dataGenerator_SetSelectedNodes(self, *args)
DSL_dataGenerator_swigregister = _pysmile_impl.DSL_dataGenerator_swigregister
DSL_dataGenerator_swigregister(DSL_dataGenerator)

class DSL_dataGeneratorOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_dataGeneratorOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_dataGeneratorOutput, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Open(self, *args): return _pysmile_impl.DSL_dataGeneratorOutput_Open(self, *args)
    def PreRecord(self, *args): return _pysmile_impl.DSL_dataGeneratorOutput_PreRecord(self, *args)
    def WriteDiscreteValue(self, *args): return _pysmile_impl.DSL_dataGeneratorOutput_WriteDiscreteValue(self, *args)
    def WriteContinuousValue(self, *args): return _pysmile_impl.DSL_dataGeneratorOutput_WriteContinuousValue(self, *args)
    def WriteMissingValue(self, *args): return _pysmile_impl.DSL_dataGeneratorOutput_WriteMissingValue(self, *args)
    def PostRecord(self, *args): return _pysmile_impl.DSL_dataGeneratorOutput_PostRecord(self, *args)
    def Close(self): return _pysmile_impl.DSL_dataGeneratorOutput_Close(self)
    def Progress(self, *args): return _pysmile_impl.DSL_dataGeneratorOutput_Progress(self, *args)
    __swig_destroy__ = _pysmile_impl.delete_DSL_dataGeneratorOutput
    __del__ = lambda self : None;
DSL_dataGeneratorOutput_swigregister = _pysmile_impl.DSL_dataGeneratorOutput_swigregister
DSL_dataGeneratorOutput_swigregister(DSL_dataGeneratorOutput)

class DSL_dataGeneratorFileOutput(DSL_dataGeneratorOutput):
    __swig_setmethods__ = {}
    for _s in [DSL_dataGeneratorOutput]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_dataGeneratorFileOutput, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_dataGeneratorOutput]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_dataGeneratorFileOutput, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_dataGeneratorFileOutput(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_dataGeneratorFileOutput
    __del__ = lambda self : None;
    def Open(self, *args): return _pysmile_impl.DSL_dataGeneratorFileOutput_Open(self, *args)
    def WriteDiscreteValue(self, *args): return _pysmile_impl.DSL_dataGeneratorFileOutput_WriteDiscreteValue(self, *args)
    def WriteContinuousValue(self, *args): return _pysmile_impl.DSL_dataGeneratorFileOutput_WriteContinuousValue(self, *args)
    def WriteMissingValue(self, *args): return _pysmile_impl.DSL_dataGeneratorFileOutput_WriteMissingValue(self, *args)
    def PostRecord(self, *args): return _pysmile_impl.DSL_dataGeneratorFileOutput_PostRecord(self, *args)
    def Close(self): return _pysmile_impl.DSL_dataGeneratorFileOutput_Close(self)
DSL_dataGeneratorFileOutput_swigregister = _pysmile_impl.DSL_dataGeneratorFileOutput_swigregister
DSL_dataGeneratorFileOutput_swigregister(DSL_dataGeneratorFileOutput)

class DSL_dataGeneratorSetOutput(DSL_dataGeneratorOutput):
    __swig_setmethods__ = {}
    for _s in [DSL_dataGeneratorOutput]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_dataGeneratorSetOutput, name, value)
    __swig_getmethods__ = {}
    for _s in [DSL_dataGeneratorOutput]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_dataGeneratorSetOutput, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_dataGeneratorSetOutput(*args)
        try: self.this.append(this)
        except: self.this = this
    def Open(self, *args): return _pysmile_impl.DSL_dataGeneratorSetOutput_Open(self, *args)
    def WriteDiscreteValue(self, *args): return _pysmile_impl.DSL_dataGeneratorSetOutput_WriteDiscreteValue(self, *args)
    def WriteContinuousValue(self, *args): return _pysmile_impl.DSL_dataGeneratorSetOutput_WriteContinuousValue(self, *args)
    __swig_destroy__ = _pysmile_impl.delete_DSL_dataGeneratorSetOutput
    __del__ = lambda self : None;
DSL_dataGeneratorSetOutput_swigregister = _pysmile_impl.DSL_dataGeneratorSetOutput_swigregister
DSL_dataGeneratorSetOutput_swigregister(DSL_dataGeneratorSetOutput)

class DSL_pattern(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_pattern, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_pattern, name)
    __repr__ = _swig_repr
    _None = _pysmile_impl.DSL_pattern__None
    Undirected = _pysmile_impl.DSL_pattern_Undirected
    Directed = _pysmile_impl.DSL_pattern_Directed
    def GetSize(self): return _pysmile_impl.DSL_pattern_GetSize(self)
    def SetSize(self, *args): return _pysmile_impl.DSL_pattern_SetSize(self, *args)
    def GetEdge(self, *args): return _pysmile_impl.DSL_pattern_GetEdge(self, *args)
    def SetEdge(self, *args): return _pysmile_impl.DSL_pattern_SetEdge(self, *args)
    def HasDirectedPath(self, *args): return _pysmile_impl.DSL_pattern_HasDirectedPath(self, *args)
    def HasCycle(self): return _pysmile_impl.DSL_pattern_HasCycle(self)
    def IsDAG(self): return _pysmile_impl.DSL_pattern_IsDAG(self)
    def ToDAG(self, *args): return _pysmile_impl.DSL_pattern_ToDAG(self, *args)
    def HasIncomingEdge(self, *args): return _pysmile_impl.DSL_pattern_HasIncomingEdge(self, *args)
    def HasOutgoingEdge(self, *args): return _pysmile_impl.DSL_pattern_HasOutgoingEdge(self, *args)
    def Print(self): return _pysmile_impl.DSL_pattern_Print(self)
    def GetAdjacentNodes(self, *args): return _pysmile_impl.DSL_pattern_GetAdjacentNodes(self, *args)
    def __init__(self): 
        this = _pysmile_impl.new_DSL_pattern()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pysmile_impl.delete_DSL_pattern
    __del__ = lambda self : None;
DSL_pattern_swigregister = _pysmile_impl.DSL_pattern_swigregister
DSL_pattern_swigregister(DSL_pattern)

class DSL_dbcml(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_dbcml, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_dbcml, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pysmile_impl.new_DSL_dbcml()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["maxAdjacency"] = _pysmile_impl.DSL_dbcml_maxAdjacency_set
    __swig_getmethods__["maxAdjacency"] = _pysmile_impl.DSL_dbcml_maxAdjacency_get
    if _newclass:maxAdjacency = _swig_property(_pysmile_impl.DSL_dbcml_maxAdjacency_get, _pysmile_impl.DSL_dbcml_maxAdjacency_set)
    __swig_setmethods__["significance"] = _pysmile_impl.DSL_dbcml_significance_set
    __swig_getmethods__["significance"] = _pysmile_impl.DSL_dbcml_significance_get
    if _newclass:significance = _swig_property(_pysmile_impl.DSL_dbcml_significance_get, _pysmile_impl.DSL_dbcml_significance_set)
    __swig_setmethods__["maxDeriv"] = _pysmile_impl.DSL_dbcml_maxDeriv_set
    __swig_getmethods__["maxDeriv"] = _pysmile_impl.DSL_dbcml_maxDeriv_get
    if _newclass:maxDeriv = _swig_property(_pysmile_impl.DSL_dbcml_maxDeriv_get, _pysmile_impl.DSL_dbcml_maxDeriv_set)
    def Learn(self, *args): return _pysmile_impl.DSL_dbcml_Learn(self, *args)
    def CalcDerivsInit(self, *args): return _pysmile_impl.DSL_dbcml_CalcDerivsInit(self, *args)
    def CalcDerivsNext(self, *args): return _pysmile_impl.DSL_dbcml_CalcDerivsNext(self, *args)
    def Idx(self, *args): return _pysmile_impl.DSL_dbcml_Idx(self, *args)
    __swig_destroy__ = _pysmile_impl.delete_DSL_dbcml
    __del__ = lambda self : None;
DSL_dbcml_swigregister = _pysmile_impl.DSL_dbcml_swigregister
DSL_dbcml_swigregister(DSL_dbcml)

class int_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int_vector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pysmile_impl.int_vector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pysmile_impl.int_vector___nonzero__(self)
    def __bool__(self): return _pysmile_impl.int_vector___bool__(self)
    def __len__(self): return _pysmile_impl.int_vector___len__(self)
    def pop(self): return _pysmile_impl.int_vector_pop(self)
    def __getslice__(self, *args): return _pysmile_impl.int_vector___getslice__(self, *args)
    def __setslice__(self, *args): return _pysmile_impl.int_vector___setslice__(self, *args)
    def __delslice__(self, *args): return _pysmile_impl.int_vector___delslice__(self, *args)
    def __delitem__(self, *args): return _pysmile_impl.int_vector___delitem__(self, *args)
    def __getitem__(self, *args): return _pysmile_impl.int_vector___getitem__(self, *args)
    def __setitem__(self, *args): return _pysmile_impl.int_vector___setitem__(self, *args)
    def append(self, *args): return _pysmile_impl.int_vector_append(self, *args)
    def empty(self): return _pysmile_impl.int_vector_empty(self)
    def size(self): return _pysmile_impl.int_vector_size(self)
    def clear(self): return _pysmile_impl.int_vector_clear(self)
    def swap(self, *args): return _pysmile_impl.int_vector_swap(self, *args)
    def get_allocator(self): return _pysmile_impl.int_vector_get_allocator(self)
    def begin(self): return _pysmile_impl.int_vector_begin(self)
    def end(self): return _pysmile_impl.int_vector_end(self)
    def rbegin(self): return _pysmile_impl.int_vector_rbegin(self)
    def rend(self): return _pysmile_impl.int_vector_rend(self)
    def pop_back(self): return _pysmile_impl.int_vector_pop_back(self)
    def erase(self, *args): return _pysmile_impl.int_vector_erase(self, *args)
    def __init__(self, *args): 
        this = _pysmile_impl.new_int_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pysmile_impl.int_vector_push_back(self, *args)
    def front(self): return _pysmile_impl.int_vector_front(self)
    def back(self): return _pysmile_impl.int_vector_back(self)
    def assign(self, *args): return _pysmile_impl.int_vector_assign(self, *args)
    def resize(self, *args): return _pysmile_impl.int_vector_resize(self, *args)
    def insert(self, *args): return _pysmile_impl.int_vector_insert(self, *args)
    def reserve(self, *args): return _pysmile_impl.int_vector_reserve(self, *args)
    def capacity(self): return _pysmile_impl.int_vector_capacity(self)
    __swig_destroy__ = _pysmile_impl.delete_int_vector
    __del__ = lambda self : None;
int_vector_swigregister = _pysmile_impl.int_vector_swigregister
int_vector_swigregister(int_vector)

class double_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, double_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, double_vector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pysmile_impl.double_vector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pysmile_impl.double_vector___nonzero__(self)
    def __bool__(self): return _pysmile_impl.double_vector___bool__(self)
    def __len__(self): return _pysmile_impl.double_vector___len__(self)
    def pop(self): return _pysmile_impl.double_vector_pop(self)
    def __getslice__(self, *args): return _pysmile_impl.double_vector___getslice__(self, *args)
    def __setslice__(self, *args): return _pysmile_impl.double_vector___setslice__(self, *args)
    def __delslice__(self, *args): return _pysmile_impl.double_vector___delslice__(self, *args)
    def __delitem__(self, *args): return _pysmile_impl.double_vector___delitem__(self, *args)
    def __getitem__(self, *args): return _pysmile_impl.double_vector___getitem__(self, *args)
    def __setitem__(self, *args): return _pysmile_impl.double_vector___setitem__(self, *args)
    def append(self, *args): return _pysmile_impl.double_vector_append(self, *args)
    def empty(self): return _pysmile_impl.double_vector_empty(self)
    def size(self): return _pysmile_impl.double_vector_size(self)
    def clear(self): return _pysmile_impl.double_vector_clear(self)
    def swap(self, *args): return _pysmile_impl.double_vector_swap(self, *args)
    def get_allocator(self): return _pysmile_impl.double_vector_get_allocator(self)
    def begin(self): return _pysmile_impl.double_vector_begin(self)
    def end(self): return _pysmile_impl.double_vector_end(self)
    def rbegin(self): return _pysmile_impl.double_vector_rbegin(self)
    def rend(self): return _pysmile_impl.double_vector_rend(self)
    def pop_back(self): return _pysmile_impl.double_vector_pop_back(self)
    def erase(self, *args): return _pysmile_impl.double_vector_erase(self, *args)
    def __init__(self, *args): 
        this = _pysmile_impl.new_double_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pysmile_impl.double_vector_push_back(self, *args)
    def front(self): return _pysmile_impl.double_vector_front(self)
    def back(self): return _pysmile_impl.double_vector_back(self)
    def assign(self, *args): return _pysmile_impl.double_vector_assign(self, *args)
    def resize(self, *args): return _pysmile_impl.double_vector_resize(self, *args)
    def insert(self, *args): return _pysmile_impl.double_vector_insert(self, *args)
    def reserve(self, *args): return _pysmile_impl.double_vector_reserve(self, *args)
    def capacity(self): return _pysmile_impl.double_vector_capacity(self)
    __swig_destroy__ = _pysmile_impl.delete_double_vector
    __del__ = lambda self : None;
double_vector_swigregister = _pysmile_impl.double_vector_swigregister
double_vector_swigregister(double_vector)

class float_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, float_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, float_vector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pysmile_impl.float_vector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pysmile_impl.float_vector___nonzero__(self)
    def __bool__(self): return _pysmile_impl.float_vector___bool__(self)
    def __len__(self): return _pysmile_impl.float_vector___len__(self)
    def pop(self): return _pysmile_impl.float_vector_pop(self)
    def __getslice__(self, *args): return _pysmile_impl.float_vector___getslice__(self, *args)
    def __setslice__(self, *args): return _pysmile_impl.float_vector___setslice__(self, *args)
    def __delslice__(self, *args): return _pysmile_impl.float_vector___delslice__(self, *args)
    def __delitem__(self, *args): return _pysmile_impl.float_vector___delitem__(self, *args)
    def __getitem__(self, *args): return _pysmile_impl.float_vector___getitem__(self, *args)
    def __setitem__(self, *args): return _pysmile_impl.float_vector___setitem__(self, *args)
    def append(self, *args): return _pysmile_impl.float_vector_append(self, *args)
    def empty(self): return _pysmile_impl.float_vector_empty(self)
    def size(self): return _pysmile_impl.float_vector_size(self)
    def clear(self): return _pysmile_impl.float_vector_clear(self)
    def swap(self, *args): return _pysmile_impl.float_vector_swap(self, *args)
    def get_allocator(self): return _pysmile_impl.float_vector_get_allocator(self)
    def begin(self): return _pysmile_impl.float_vector_begin(self)
    def end(self): return _pysmile_impl.float_vector_end(self)
    def rbegin(self): return _pysmile_impl.float_vector_rbegin(self)
    def rend(self): return _pysmile_impl.float_vector_rend(self)
    def pop_back(self): return _pysmile_impl.float_vector_pop_back(self)
    def erase(self, *args): return _pysmile_impl.float_vector_erase(self, *args)
    def __init__(self, *args): 
        this = _pysmile_impl.new_float_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pysmile_impl.float_vector_push_back(self, *args)
    def front(self): return _pysmile_impl.float_vector_front(self)
    def back(self): return _pysmile_impl.float_vector_back(self)
    def assign(self, *args): return _pysmile_impl.float_vector_assign(self, *args)
    def resize(self, *args): return _pysmile_impl.float_vector_resize(self, *args)
    def insert(self, *args): return _pysmile_impl.float_vector_insert(self, *args)
    def reserve(self, *args): return _pysmile_impl.float_vector_reserve(self, *args)
    def capacity(self): return _pysmile_impl.float_vector_capacity(self)
    __swig_destroy__ = _pysmile_impl.delete_float_vector
    __del__ = lambda self : None;
float_vector_swigregister = _pysmile_impl.float_vector_swigregister
float_vector_swigregister(float_vector)

class string_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string_vector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pysmile_impl.string_vector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pysmile_impl.string_vector___nonzero__(self)
    def __bool__(self): return _pysmile_impl.string_vector___bool__(self)
    def __len__(self): return _pysmile_impl.string_vector___len__(self)
    def pop(self): return _pysmile_impl.string_vector_pop(self)
    def __getslice__(self, *args): return _pysmile_impl.string_vector___getslice__(self, *args)
    def __setslice__(self, *args): return _pysmile_impl.string_vector___setslice__(self, *args)
    def __delslice__(self, *args): return _pysmile_impl.string_vector___delslice__(self, *args)
    def __delitem__(self, *args): return _pysmile_impl.string_vector___delitem__(self, *args)
    def __getitem__(self, *args): return _pysmile_impl.string_vector___getitem__(self, *args)
    def __setitem__(self, *args): return _pysmile_impl.string_vector___setitem__(self, *args)
    def append(self, *args): return _pysmile_impl.string_vector_append(self, *args)
    def empty(self): return _pysmile_impl.string_vector_empty(self)
    def size(self): return _pysmile_impl.string_vector_size(self)
    def clear(self): return _pysmile_impl.string_vector_clear(self)
    def swap(self, *args): return _pysmile_impl.string_vector_swap(self, *args)
    def get_allocator(self): return _pysmile_impl.string_vector_get_allocator(self)
    def begin(self): return _pysmile_impl.string_vector_begin(self)
    def end(self): return _pysmile_impl.string_vector_end(self)
    def rbegin(self): return _pysmile_impl.string_vector_rbegin(self)
    def rend(self): return _pysmile_impl.string_vector_rend(self)
    def pop_back(self): return _pysmile_impl.string_vector_pop_back(self)
    def erase(self, *args): return _pysmile_impl.string_vector_erase(self, *args)
    def __init__(self, *args): 
        this = _pysmile_impl.new_string_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pysmile_impl.string_vector_push_back(self, *args)
    def front(self): return _pysmile_impl.string_vector_front(self)
    def back(self): return _pysmile_impl.string_vector_back(self)
    def assign(self, *args): return _pysmile_impl.string_vector_assign(self, *args)
    def resize(self, *args): return _pysmile_impl.string_vector_resize(self, *args)
    def insert(self, *args): return _pysmile_impl.string_vector_insert(self, *args)
    def reserve(self, *args): return _pysmile_impl.string_vector_reserve(self, *args)
    def capacity(self): return _pysmile_impl.string_vector_capacity(self)
    __swig_destroy__ = _pysmile_impl.delete_string_vector
    __del__ = lambda self : None;
string_vector_swigregister = _pysmile_impl.string_vector_swigregister
string_vector_swigregister(string_vector)

class DSL_datasetMatch_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSL_datasetMatch_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSL_datasetMatch_vector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pysmile_impl.DSL_datasetMatch_vector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pysmile_impl.DSL_datasetMatch_vector___nonzero__(self)
    def __bool__(self): return _pysmile_impl.DSL_datasetMatch_vector___bool__(self)
    def __len__(self): return _pysmile_impl.DSL_datasetMatch_vector___len__(self)
    def pop(self): return _pysmile_impl.DSL_datasetMatch_vector_pop(self)
    def __getslice__(self, *args): return _pysmile_impl.DSL_datasetMatch_vector___getslice__(self, *args)
    def __setslice__(self, *args): return _pysmile_impl.DSL_datasetMatch_vector___setslice__(self, *args)
    def __delslice__(self, *args): return _pysmile_impl.DSL_datasetMatch_vector___delslice__(self, *args)
    def __delitem__(self, *args): return _pysmile_impl.DSL_datasetMatch_vector___delitem__(self, *args)
    def __getitem__(self, *args): return _pysmile_impl.DSL_datasetMatch_vector___getitem__(self, *args)
    def __setitem__(self, *args): return _pysmile_impl.DSL_datasetMatch_vector___setitem__(self, *args)
    def append(self, *args): return _pysmile_impl.DSL_datasetMatch_vector_append(self, *args)
    def empty(self): return _pysmile_impl.DSL_datasetMatch_vector_empty(self)
    def size(self): return _pysmile_impl.DSL_datasetMatch_vector_size(self)
    def clear(self): return _pysmile_impl.DSL_datasetMatch_vector_clear(self)
    def swap(self, *args): return _pysmile_impl.DSL_datasetMatch_vector_swap(self, *args)
    def get_allocator(self): return _pysmile_impl.DSL_datasetMatch_vector_get_allocator(self)
    def begin(self): return _pysmile_impl.DSL_datasetMatch_vector_begin(self)
    def end(self): return _pysmile_impl.DSL_datasetMatch_vector_end(self)
    def rbegin(self): return _pysmile_impl.DSL_datasetMatch_vector_rbegin(self)
    def rend(self): return _pysmile_impl.DSL_datasetMatch_vector_rend(self)
    def pop_back(self): return _pysmile_impl.DSL_datasetMatch_vector_pop_back(self)
    def erase(self, *args): return _pysmile_impl.DSL_datasetMatch_vector_erase(self, *args)
    def __init__(self, *args): 
        this = _pysmile_impl.new_DSL_datasetMatch_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pysmile_impl.DSL_datasetMatch_vector_push_back(self, *args)
    def front(self): return _pysmile_impl.DSL_datasetMatch_vector_front(self)
    def back(self): return _pysmile_impl.DSL_datasetMatch_vector_back(self)
    def assign(self, *args): return _pysmile_impl.DSL_datasetMatch_vector_assign(self, *args)
    def resize(self, *args): return _pysmile_impl.DSL_datasetMatch_vector_resize(self, *args)
    def insert(self, *args): return _pysmile_impl.DSL_datasetMatch_vector_insert(self, *args)
    def reserve(self, *args): return _pysmile_impl.DSL_datasetMatch_vector_reserve(self, *args)
    def capacity(self): return _pysmile_impl.DSL_datasetMatch_vector_capacity(self)
    __swig_destroy__ = _pysmile_impl.delete_DSL_datasetMatch_vector
    __del__ = lambda self : None;
DSL_datasetMatch_vector_swigregister = _pysmile_impl.DSL_datasetMatch_vector_swigregister
DSL_datasetMatch_vector_swigregister(DSL_datasetMatch_vector)

PYSMILE_HELPER = _pysmile_impl.PYSMILE_HELPER

def newDSL_intArray(*args):
  return _pysmile_impl.newDSL_intArray(*args)
newDSL_intArray = _pysmile_impl.newDSL_intArray

def newDSL_doubleArray(*args):
  return _pysmile_impl.newDSL_doubleArray(*args)
newDSL_doubleArray = _pysmile_impl.newDSL_doubleArray

def newDSL_stringArray(*args):
  return _pysmile_impl.newDSL_stringArray(*args)
newDSL_stringArray = _pysmile_impl.newDSL_stringArray

def newDSL_idArray(*args):
  return _pysmile_impl.newDSL_idArray(*args)
newDSL_idArray = _pysmile_impl.newDSL_idArray
# This file is compatible with both classic and new-style classes.


